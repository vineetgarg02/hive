PREHOOK: query: create table t1 as select cast(key as int) key, value from src where key <= 10
PREHOOK: type: CREATETABLE_AS_SELECT
PREHOOK: Input: default@src
PREHOOK: Output: database:default
PREHOOK: Output: default@t1
POSTHOOK: query: create table t1 as select cast(key as int) key, value from src where key <= 10
POSTHOOK: type: CREATETABLE_AS_SELECT
POSTHOOK: Input: default@src
POSTHOOK: Output: database:default
POSTHOOK: Output: default@t1
POSTHOOK: Lineage: t1.key EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: t1.value SIMPLE [(src)src.FieldSchema(name:value, type:string, comment:default), ]
PREHOOK: query: select * from t1 sort by key
PREHOOK: type: QUERY
PREHOOK: Input: default@t1
#### A masked pattern was here ####
POSTHOOK: query: select * from t1 sort by key
POSTHOOK: type: QUERY
POSTHOOK: Input: default@t1
#### A masked pattern was here ####
0	val_0
0	val_0
0	val_0
10	val_10
2	val_2
4	val_4
5	val_5
5	val_5
5	val_5
8	val_8
9	val_9
PREHOOK: query: create table t2 as select cast(2*key as int) key, value from t1
PREHOOK: type: CREATETABLE_AS_SELECT
PREHOOK: Input: default@t1
PREHOOK: Output: database:default
PREHOOK: Output: default@t2
POSTHOOK: query: create table t2 as select cast(2*key as int) key, value from t1
POSTHOOK: type: CREATETABLE_AS_SELECT
POSTHOOK: Input: default@t1
POSTHOOK: Output: database:default
POSTHOOK: Output: default@t2
POSTHOOK: Lineage: t2.key EXPRESSION [(t1)t1.FieldSchema(name:key, type:int, comment:null), ]
POSTHOOK: Lineage: t2.value SIMPLE [(t1)t1.FieldSchema(name:value, type:string, comment:null), ]
PREHOOK: query: select * from t2 sort by key
PREHOOK: type: QUERY
PREHOOK: Input: default@t2
#### A masked pattern was here ####
POSTHOOK: query: select * from t2 sort by key
POSTHOOK: type: QUERY
POSTHOOK: Input: default@t2
#### A masked pattern was here ####
0	val_0
0	val_0
0	val_0
10	val_5
10	val_5
10	val_5
16	val_8
18	val_9
20	val_10
4	val_2
8	val_4
PREHOOK: query: create table t3 as select * from (select * from t1 union all select * from t2) b
PREHOOK: type: CREATETABLE_AS_SELECT
PREHOOK: Input: default@t1
PREHOOK: Input: default@t2
PREHOOK: Output: database:default
PREHOOK: Output: default@t3
POSTHOOK: query: create table t3 as select * from (select * from t1 union all select * from t2) b
POSTHOOK: type: CREATETABLE_AS_SELECT
POSTHOOK: Input: default@t1
POSTHOOK: Input: default@t2
POSTHOOK: Output: database:default
POSTHOOK: Output: default@t3
POSTHOOK: Lineage: t3.key EXPRESSION [(t1)t1.FieldSchema(name:key, type:int, comment:null), (t2)t2.FieldSchema(name:key, type:int, comment:null), ]
POSTHOOK: Lineage: t3.value EXPRESSION [(t1)t1.FieldSchema(name:value, type:string, comment:null), (t2)t2.FieldSchema(name:value, type:string, comment:null), ]
PREHOOK: query: select * from t3 sort by key, value
PREHOOK: type: QUERY
PREHOOK: Input: default@t3
#### A masked pattern was here ####
POSTHOOK: query: select * from t3 sort by key, value
POSTHOOK: type: QUERY
POSTHOOK: Input: default@t3
#### A masked pattern was here ####
0	val_0
0	val_0
0	val_0
0	val_0
0	val_0
0	val_0
10	val_10
10	val_5
10	val_5
10	val_5
16	val_8
18	val_9
2	val_2
20	val_10
4	val_2
4	val_4
5	val_5
5	val_5
5	val_5
8	val_4
8	val_8
9	val_9
PREHOOK: query: create table t4 (key int, value string)
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@t4
POSTHOOK: query: create table t4 (key int, value string)
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@t4
PREHOOK: query: select * from t4
PREHOOK: type: QUERY
PREHOOK: Input: default@t4
#### A masked pattern was here ####
POSTHOOK: query: select * from t4
POSTHOOK: type: QUERY
POSTHOOK: Input: default@t4
#### A masked pattern was here ####
PREHOOK: query: select * from t1 a join t2 b on a.key=b.key
PREHOOK: type: QUERY
PREHOOK: Input: default@t1
PREHOOK: Input: default@t2
#### A masked pattern was here ####
POSTHOOK: query: select * from t1 a join t2 b on a.key=b.key
POSTHOOK: type: QUERY
POSTHOOK: Input: default@t1
POSTHOOK: Input: default@t2
#### A masked pattern was here ####
0	val_0	0	val_0
0	val_0	0	val_0
0	val_0	0	val_0
0	val_0	0	val_0
0	val_0	0	val_0
0	val_0	0	val_0
0	val_0	0	val_0
0	val_0	0	val_0
0	val_0	0	val_0
10	val_10	10	val_5
10	val_10	10	val_5
10	val_10	10	val_5
4	val_4	4	val_2
8	val_8	8	val_4
PREHOOK: query: select * from t1 a left join t2 b on a.key=b.key
PREHOOK: type: QUERY
PREHOOK: Input: default@t1
PREHOOK: Input: default@t2
#### A masked pattern was here ####
POSTHOOK: query: select * from t1 a left join t2 b on a.key=b.key
POSTHOOK: type: QUERY
POSTHOOK: Input: default@t1
POSTHOOK: Input: default@t2
#### A masked pattern was here ####
0	val_0	0	val_0
0	val_0	0	val_0
0	val_0	0	val_0
0	val_0	0	val_0
0	val_0	0	val_0
0	val_0	0	val_0
0	val_0	0	val_0
0	val_0	0	val_0
0	val_0	0	val_0
10	val_10	10	val_5
10	val_10	10	val_5
10	val_10	10	val_5
2	val_2	NULL	NULL
4	val_4	4	val_2
5	val_5	NULL	NULL
5	val_5	NULL	NULL
5	val_5	NULL	NULL
8	val_8	8	val_4
9	val_9	NULL	NULL
PREHOOK: query: select * from t1 a join t2 b on a.key=b.key and a.value > b.value
PREHOOK: type: QUERY
PREHOOK: Input: default@t1
PREHOOK: Input: default@t2
#### A masked pattern was here ####
POSTHOOK: query: select * from t1 a join t2 b on a.key=b.key and a.value > b.value
POSTHOOK: type: QUERY
POSTHOOK: Input: default@t1
POSTHOOK: Input: default@t2
#### A masked pattern was here ####
4	val_4	4	val_2
8	val_8	8	val_4
PREHOOK: query: select * from t1 a left outer join t2 b on a.key=b.key  and a.value > b.value
PREHOOK: type: QUERY
PREHOOK: Input: default@t1
PREHOOK: Input: default@t2
#### A masked pattern was here ####
POSTHOOK: query: select * from t1 a left outer join t2 b on a.key=b.key  and a.value > b.value
POSTHOOK: type: QUERY
POSTHOOK: Input: default@t1
POSTHOOK: Input: default@t2
#### A masked pattern was here ####
0	val_0	NULL	NULL
0	val_0	NULL	NULL
0	val_0	NULL	NULL
10	val_10	NULL	NULL
2	val_2	NULL	NULL
4	val_4	4	val_2
5	val_5	NULL	NULL
5	val_5	NULL	NULL
5	val_5	NULL	NULL
8	val_8	8	val_4
9	val_9	NULL	NULL
PREHOOK: query: select * from t1 a left semi join t2 b on a.key=b.key
PREHOOK: type: QUERY
PREHOOK: Input: default@t1
PREHOOK: Input: default@t2
#### A masked pattern was here ####
POSTHOOK: query: select * from t1 a left semi join t2 b on a.key=b.key
POSTHOOK: type: QUERY
POSTHOOK: Input: default@t1
POSTHOOK: Input: default@t2
#### A masked pattern was here ####
0	val_0
0	val_0
0	val_0
10	val_10
4	val_4
8	val_8
PREHOOK: query: drop table t1
PREHOOK: type: DROPTABLE
PREHOOK: Input: default@t1
PREHOOK: Output: default@t1
POSTHOOK: query: drop table t1
POSTHOOK: type: DROPTABLE
POSTHOOK: Input: default@t1
POSTHOOK: Output: default@t1
PREHOOK: query: drop table t2
PREHOOK: type: DROPTABLE
PREHOOK: Input: default@t2
PREHOOK: Output: default@t2
POSTHOOK: query: drop table t2
POSTHOOK: type: DROPTABLE
POSTHOOK: Input: default@t2
POSTHOOK: Output: default@t2
PREHOOK: query: create table t1(i int, j int)
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@t1
POSTHOOK: query: create table t1(i int, j int)
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@t1
PREHOOK: query: insert into t1 values(4,1)
PREHOOK: type: QUERY
PREHOOK: Output: default@t1
POSTHOOK: query: insert into t1 values(4,1)
POSTHOOK: type: QUERY
POSTHOOK: Output: default@t1
POSTHOOK: Lineage: t1.i EXPRESSION [(values__tmp__table__1)values__tmp__table__1.FieldSchema(name:tmp_values_col1, type:string, comment:), ]
POSTHOOK: Lineage: t1.j EXPRESSION [(values__tmp__table__1)values__tmp__table__1.FieldSchema(name:tmp_values_col2, type:string, comment:), ]
PREHOOK: query: create table t2(i int, j int)
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@t2
POSTHOOK: query: create table t2(i int, j int)
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@t2
PREHOOK: query: insert into t2 values(4,2),(4,3),(4,5)
PREHOOK: type: QUERY
PREHOOK: Output: default@t2
POSTHOOK: query: insert into t2 values(4,2),(4,3),(4,5)
POSTHOOK: type: QUERY
POSTHOOK: Output: default@t2
POSTHOOK: Lineage: t2.i EXPRESSION [(values__tmp__table__2)values__tmp__table__2.FieldSchema(name:tmp_values_col1, type:string, comment:), ]
POSTHOOK: Lineage: t2.j EXPRESSION [(values__tmp__table__2)values__tmp__table__2.FieldSchema(name:tmp_values_col2, type:string, comment:), ]
PREHOOK: query: explain select * from t1 left semi join t2 on t1.i = t2.i and t2.j <> t1.j
PREHOOK: type: QUERY
POSTHOOK: query: explain select * from t1 left semi join t2 on t1.i = t2.i and t2.j <> t1.j
POSTHOOK: type: QUERY
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 3 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: t1
                  Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE
                  Filter Operator
                    predicate: i is not null (type: boolean)
                    Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE
                    Select Operator
                      expressions: i (type: int), j (type: int)
                      outputColumnNames: _col0, _col1
                      Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE
                      Reduce Output Operator
                        key expressions: _col0 (type: int)
                        sort order: +
                        Map-reduce partition columns: _col0 (type: int)
                        Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE
                        value expressions: _col1 (type: int)
            Execution mode: llap
            LLAP IO: no inputs
        Map 3 
            Map Operator Tree:
                TableScan
                  alias: t2
                  Statistics: Num rows: 3 Data size: 24 Basic stats: COMPLETE Column stats: NONE
                  Filter Operator
                    predicate: i is not null (type: boolean)
                    Statistics: Num rows: 3 Data size: 24 Basic stats: COMPLETE Column stats: NONE
                    Select Operator
                      expressions: i (type: int), j (type: int)
                      outputColumnNames: _col0, _col1
                      Statistics: Num rows: 3 Data size: 24 Basic stats: COMPLETE Column stats: NONE
                      Reduce Output Operator
                        key expressions: _col0 (type: int)
                        sort order: +
                        Map-reduce partition columns: _col0 (type: int)
                        Statistics: Num rows: 3 Data size: 24 Basic stats: COMPLETE Column stats: NONE
                        value expressions: _col1 (type: int)
            Execution mode: llap
            LLAP IO: no inputs
        Reducer 2 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Left Semi Join 0 to 1
                keys:
                  0 _col0 (type: int)
                  1 _col0 (type: int)
                outputColumnNames: _col0, _col1, _col3
                residual filter predicates: {(_col3 <> _col1)}
                Statistics: Num rows: 3 Data size: 26 Basic stats: COMPLETE Column stats: NONE
                Select Operator
                  expressions: _col0 (type: int), _col1 (type: int)
                  outputColumnNames: _col0, _col1
                  Statistics: Num rows: 3 Data size: 26 Basic stats: COMPLETE Column stats: NONE
                  File Output Operator
                    compressed: false
                    Statistics: Num rows: 3 Data size: 26 Basic stats: COMPLETE Column stats: NONE
                    table:
                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select * from t1 left semi join t2 on t1.i = t2.i and t2.j <> t1.j
PREHOOK: type: QUERY
PREHOOK: Input: default@t1
PREHOOK: Input: default@t2
#### A masked pattern was here ####
POSTHOOK: query: select * from t1 left semi join t2 on t1.i = t2.i and t2.j <> t1.j
POSTHOOK: type: QUERY
POSTHOOK: Input: default@t1
POSTHOOK: Input: default@t2
#### A masked pattern was here ####
4	1
PREHOOK: query: drop table t1
PREHOOK: type: DROPTABLE
PREHOOK: Input: default@t1
PREHOOK: Output: default@t1
POSTHOOK: query: drop table t1
POSTHOOK: type: DROPTABLE
POSTHOOK: Input: default@t1
POSTHOOK: Output: default@t1
PREHOOK: query: drop table t2
PREHOOK: type: DROPTABLE
PREHOOK: Input: default@t2
PREHOOK: Output: default@t2
POSTHOOK: query: drop table t2
POSTHOOK: type: DROPTABLE
POSTHOOK: Input: default@t2
POSTHOOK: Output: default@t2
PREHOOK: query: create table tx1 (a integer,b integer)
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@tx1
POSTHOOK: query: create table tx1 (a integer,b integer)
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@tx1
PREHOOK: query: insert into tx1	values  (1, 1),
                        (1, 2),
                        (1, 3)
PREHOOK: type: QUERY
PREHOOK: Output: default@tx1
POSTHOOK: query: insert into tx1	values  (1, 1),
                        (1, 2),
                        (1, 3)
POSTHOOK: type: QUERY
POSTHOOK: Output: default@tx1
POSTHOOK: Lineage: tx1.a EXPRESSION [(values__tmp__table__3)values__tmp__table__3.FieldSchema(name:tmp_values_col1, type:string, comment:), ]
POSTHOOK: Lineage: tx1.b EXPRESSION [(values__tmp__table__3)values__tmp__table__3.FieldSchema(name:tmp_values_col2, type:string, comment:), ]
PREHOOK: query: select * from tx1 u left semi join tx1 v on u.a=v.a and u.b <> v.b
PREHOOK: type: QUERY
PREHOOK: Input: default@tx1
#### A masked pattern was here ####
POSTHOOK: query: select * from tx1 u left semi join tx1 v on u.a=v.a and u.b <> v.b
POSTHOOK: type: QUERY
POSTHOOK: Input: default@tx1
#### A masked pattern was here ####
1	2
1	3

PREHOOK: query: create table tx1 (a integer,b integer)
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@tx1
POSTHOOK: query: create table tx1 (a integer,b integer)
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@tx1
PREHOOK: query: insert into tx1	values  (1, 105),
                        (2, 203),
                        (3, 300)
PREHOOK: type: QUERY
PREHOOK: Output: default@tx1
POSTHOOK: query: insert into tx1	values  (1, 105),
                        (2, 203),
                        (3, 300)
POSTHOOK: type: QUERY
POSTHOOK: Output: default@tx1
POSTHOOK: Lineage: tx1.a EXPRESSION [(values__tmp__table__1)values__tmp__table__1.FieldSchema(name:tmp_values_col1, type:string, comment:), ]
POSTHOOK: Lineage: tx1.b EXPRESSION [(values__tmp__table__1)values__tmp__table__1.FieldSchema(name:tmp_values_col2, type:string, comment:), ]
PREHOOK: query: create table tx2 (a int, b int)
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@tx2
POSTHOOK: query: create table tx2 (a int, b int)
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@tx2
PREHOOK: query: insert into tx2 values (1,105)
PREHOOK: type: QUERY
PREHOOK: Output: default@tx2
POSTHOOK: query: insert into tx2 values (1,105)
POSTHOOK: type: QUERY
POSTHOOK: Output: default@tx2
POSTHOOK: Lineage: tx2.a EXPRESSION [(values__tmp__table__2)values__tmp__table__2.FieldSchema(name:tmp_values_col1, type:string, comment:), ]
POSTHOOK: Lineage: tx2.b EXPRESSION [(values__tmp__table__2)values__tmp__table__2.FieldSchema(name:tmp_values_col2, type:string, comment:), ]
PREHOOK: query: insert into tx2 values (1,1995)
PREHOOK: type: QUERY
PREHOOK: Output: default@tx2
POSTHOOK: query: insert into tx2 values (1,1995)
POSTHOOK: type: QUERY
POSTHOOK: Output: default@tx2
POSTHOOK: Lineage: tx2.a EXPRESSION [(values__tmp__table__3)values__tmp__table__3.FieldSchema(name:tmp_values_col1, type:string, comment:), ]
POSTHOOK: Lineage: tx2.b EXPRESSION [(values__tmp__table__3)values__tmp__table__3.FieldSchema(name:tmp_values_col2, type:string, comment:), ]
PREHOOK: query: explain select * from tx1 u left semi join tx2 v on u.a=v.a and u.b <> v.b
PREHOOK: type: QUERY
POSTHOOK: query: explain select * from tx1 u left semi join tx2 v on u.a=v.a and u.b <> v.b
POSTHOOK: type: QUERY
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 3 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: u
                  Statistics: Num rows: 3 Data size: 24 Basic stats: COMPLETE Column stats: NONE
                  Filter Operator
                    predicate: a is not null (type: boolean)
                    Statistics: Num rows: 3 Data size: 24 Basic stats: COMPLETE Column stats: NONE
                    Select Operator
                      expressions: a (type: int), b (type: int)
                      outputColumnNames: _col0, _col1
                      Statistics: Num rows: 3 Data size: 24 Basic stats: COMPLETE Column stats: NONE
                      Reduce Output Operator
                        key expressions: _col0 (type: int)
                        sort order: +
                        Map-reduce partition columns: _col0 (type: int)
                        Statistics: Num rows: 3 Data size: 24 Basic stats: COMPLETE Column stats: NONE
                        value expressions: _col1 (type: int)
            Execution mode: llap
            LLAP IO: no inputs
        Map 3 
            Map Operator Tree:
                TableScan
                  alias: v
                  Statistics: Num rows: 2 Data size: 16 Basic stats: COMPLETE Column stats: NONE
                  Filter Operator
                    predicate: a is not null (type: boolean)
                    Statistics: Num rows: 2 Data size: 16 Basic stats: COMPLETE Column stats: NONE
                    Select Operator
                      expressions: a (type: int), b (type: int)
                      outputColumnNames: _col0, _col1
                      Statistics: Num rows: 2 Data size: 16 Basic stats: COMPLETE Column stats: NONE
                      Reduce Output Operator
                        key expressions: _col0 (type: int)
                        sort order: +
                        Map-reduce partition columns: _col0 (type: int)
                        Statistics: Num rows: 2 Data size: 16 Basic stats: COMPLETE Column stats: NONE
                        value expressions: _col1 (type: int)
            Execution mode: llap
            LLAP IO: no inputs
        Reducer 2 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Left Semi Join 0 to 1
                keys:
                  0 _col0 (type: int)
                  1 _col0 (type: int)
                outputColumnNames: _col0, _col1, _col3
                residual filter predicates: {(_col1 <> _col3)}
                Statistics: Num rows: 3 Data size: 26 Basic stats: COMPLETE Column stats: NONE
                Select Operator
                  expressions: _col0 (type: int), _col1 (type: int)
                  outputColumnNames: _col0, _col1
                  Statistics: Num rows: 3 Data size: 26 Basic stats: COMPLETE Column stats: NONE
                  File Output Operator
                    compressed: false
                    Statistics: Num rows: 3 Data size: 26 Basic stats: COMPLETE Column stats: NONE
                    table:
                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select * from tx1 u left semi join tx2 v on u.a=v.a and u.b <> v.b
PREHOOK: type: QUERY
PREHOOK: Input: default@tx1
PREHOOK: Input: default@tx2
#### A masked pattern was here ####
POSTHOOK: query: select * from tx1 u left semi join tx2 v on u.a=v.a and u.b <> v.b
POSTHOOK: type: QUERY
POSTHOOK: Input: default@tx1
POSTHOOK: Input: default@tx2
#### A masked pattern was here ####
1	105
PREHOOK: query: select * from tx1 u join tx2 v on u.a=v.a and u.b <> v.b
PREHOOK: type: QUERY
PREHOOK: Input: default@tx1
PREHOOK: Input: default@tx2
#### A masked pattern was here ####
POSTHOOK: query: select * from tx1 u join tx2 v on u.a=v.a and u.b <> v.b
POSTHOOK: type: QUERY
POSTHOOK: Input: default@tx1
POSTHOOK: Input: default@tx2
#### A masked pattern was here ####
1	105	1	1995
PREHOOK: query: select * from tx1 u left semi join tx1 v on u.a=v.a
PREHOOK: type: QUERY
PREHOOK: Input: default@tx1
#### A masked pattern was here ####
POSTHOOK: query: select * from tx1 u left semi join tx1 v on u.a=v.a
POSTHOOK: type: QUERY
POSTHOOK: Input: default@tx1
#### A masked pattern was here ####
1	105
2	203
3	300

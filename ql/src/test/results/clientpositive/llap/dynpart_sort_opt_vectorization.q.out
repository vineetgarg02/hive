PREHOOK: query: create table over1k_n1(
           t tinyint,
           si smallint,
           i int,
           b bigint,
           f float,
           d double,
           bo boolean,
           s string,
           ts timestamp,
           `dec` decimal(4,2),
           bin binary)
       row format delimited
       fields terminated by '|'
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@over1k_n1
POSTHOOK: query: create table over1k_n1(
           t tinyint,
           si smallint,
           i int,
           b bigint,
           f float,
           d double,
           bo boolean,
           s string,
           ts timestamp,
           `dec` decimal(4,2),
           bin binary)
       row format delimited
       fields terminated by '|'
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@over1k_n1
PREHOOK: query: load data local inpath '../../data/files/over1k' into table over1k_n1
PREHOOK: type: LOAD
#### A masked pattern was here ####
PREHOOK: Output: default@over1k_n1
POSTHOOK: query: load data local inpath '../../data/files/over1k' into table over1k_n1
POSTHOOK: type: LOAD
#### A masked pattern was here ####
POSTHOOK: Output: default@over1k_n1
PREHOOK: query: create table over1k_orc like over1k_n1
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@over1k_orc
POSTHOOK: query: create table over1k_orc like over1k_n1
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@over1k_orc
PREHOOK: query: alter table over1k_orc set fileformat orc
PREHOOK: type: ALTERTABLE_FILEFORMAT
PREHOOK: Input: default@over1k_orc
PREHOOK: Output: default@over1k_orc
POSTHOOK: query: alter table over1k_orc set fileformat orc
POSTHOOK: type: ALTERTABLE_FILEFORMAT
POSTHOOK: Input: default@over1k_orc
POSTHOOK: Output: default@over1k_orc
PREHOOK: query: insert overwrite table over1k_orc select * from over1k_n1
PREHOOK: type: QUERY
PREHOOK: Input: default@over1k_n1
PREHOOK: Output: default@over1k_orc
POSTHOOK: query: insert overwrite table over1k_orc select * from over1k_n1
POSTHOOK: type: QUERY
POSTHOOK: Input: default@over1k_n1
POSTHOOK: Output: default@over1k_orc
POSTHOOK: Lineage: over1k_orc.b SIMPLE [(over1k_n1)over1k_n1.FieldSchema(name:b, type:bigint, comment:null), ]
POSTHOOK: Lineage: over1k_orc.bin SIMPLE [(over1k_n1)over1k_n1.FieldSchema(name:bin, type:binary, comment:null), ]
POSTHOOK: Lineage: over1k_orc.bo SIMPLE [(over1k_n1)over1k_n1.FieldSchema(name:bo, type:boolean, comment:null), ]
POSTHOOK: Lineage: over1k_orc.d SIMPLE [(over1k_n1)over1k_n1.FieldSchema(name:d, type:double, comment:null), ]
POSTHOOK: Lineage: over1k_orc.dec SIMPLE [(over1k_n1)over1k_n1.FieldSchema(name:dec, type:decimal(4,2), comment:null), ]
POSTHOOK: Lineage: over1k_orc.f SIMPLE [(over1k_n1)over1k_n1.FieldSchema(name:f, type:float, comment:null), ]
POSTHOOK: Lineage: over1k_orc.i SIMPLE [(over1k_n1)over1k_n1.FieldSchema(name:i, type:int, comment:null), ]
POSTHOOK: Lineage: over1k_orc.s SIMPLE [(over1k_n1)over1k_n1.FieldSchema(name:s, type:string, comment:null), ]
POSTHOOK: Lineage: over1k_orc.si SIMPLE [(over1k_n1)over1k_n1.FieldSchema(name:si, type:smallint, comment:null), ]
POSTHOOK: Lineage: over1k_orc.t SIMPLE [(over1k_n1)over1k_n1.FieldSchema(name:t, type:tinyint, comment:null), ]
POSTHOOK: Lineage: over1k_orc.ts SIMPLE [(over1k_n1)over1k_n1.FieldSchema(name:ts, type:timestamp, comment:null), ]
PREHOOK: query: create table over1k_part_orc(
           si smallint,
           i int,
           b bigint,
           f float)
       partitioned by (ds string, t tinyint) stored as orc
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@over1k_part_orc
POSTHOOK: query: create table over1k_part_orc(
           si smallint,
           i int,
           b bigint,
           f float)
       partitioned by (ds string, t tinyint) stored as orc
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@over1k_part_orc
PREHOOK: query: create table over1k_part_limit_orc like over1k_part_orc
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@over1k_part_limit_orc
POSTHOOK: query: create table over1k_part_limit_orc like over1k_part_orc
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@over1k_part_limit_orc
PREHOOK: query: alter table over1k_part_limit_orc set fileformat orc
PREHOOK: type: ALTERTABLE_FILEFORMAT
PREHOOK: Input: default@over1k_part_limit_orc
PREHOOK: Output: default@over1k_part_limit_orc
POSTHOOK: query: alter table over1k_part_limit_orc set fileformat orc
POSTHOOK: type: ALTERTABLE_FILEFORMAT
POSTHOOK: Input: default@over1k_part_limit_orc
POSTHOOK: Output: default@over1k_part_limit_orc
PREHOOK: query: create table over1k_part_buck_orc(
           si smallint,
           i int,
           b bigint,
           f float)
       partitioned by (t tinyint)
       clustered by (si) into 4 buckets stored as orc
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@over1k_part_buck_orc
POSTHOOK: query: create table over1k_part_buck_orc(
           si smallint,
           i int,
           b bigint,
           f float)
       partitioned by (t tinyint)
       clustered by (si) into 4 buckets stored as orc
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@over1k_part_buck_orc
PREHOOK: query: create table over1k_part_buck_sort_orc(
           si smallint,
           i int,
           b bigint,
           f float)
       partitioned by (t tinyint)
       clustered by (si) 
       sorted by (f) into 4 buckets stored as orc
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@over1k_part_buck_sort_orc
POSTHOOK: query: create table over1k_part_buck_sort_orc(
           si smallint,
           i int,
           b bigint,
           f float)
       partitioned by (t tinyint)
       clustered by (si) 
       sorted by (f) into 4 buckets stored as orc
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@over1k_part_buck_sort_orc
PREHOOK: query: explain insert overwrite table over1k_part_orc partition(ds="foo", t) select si,i,b,f,t from over1k_orc where t is null or t=27 order by si
PREHOOK: type: QUERY
PREHOOK: Input: default@over1k_orc
PREHOOK: Output: default@over1k_part_orc@ds=foo
POSTHOOK: query: explain insert overwrite table over1k_part_orc partition(ds="foo", t) select si,i,b,f,t from over1k_orc where t is null or t=27 order by si
POSTHOOK: type: QUERY
POSTHOOK: Input: default@over1k_orc
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-2 depends on stages: Stage-1
  Stage-0 depends on stages: Stage-2
  Stage-3 depends on stages: Stage-0

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE)
        Reducer 3 <- Reducer 2 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: over1k_orc
                  filterExpr: (t is null or (t = 27Y)) (type: boolean)
                  Statistics: Num rows: 1049 Data size: 25160 Basic stats: COMPLETE Column stats: COMPLETE
                  Filter Operator
                    predicate: ((t = 27Y) or t is null) (type: boolean)
                    Statistics: Num rows: 11 Data size: 264 Basic stats: COMPLETE Column stats: COMPLETE
                    Select Operator
                      expressions: si (type: smallint), i (type: int), b (type: bigint), f (type: float), t (type: tinyint)
                      outputColumnNames: _col0, _col1, _col2, _col3, _col4
                      Statistics: Num rows: 11 Data size: 264 Basic stats: COMPLETE Column stats: COMPLETE
                      Reduce Output Operator
                        key expressions: _col0 (type: smallint)
                        sort order: +
                        Statistics: Num rows: 11 Data size: 264 Basic stats: COMPLETE Column stats: COMPLETE
                        value expressions: _col1 (type: int), _col2 (type: bigint), _col3 (type: float), _col4 (type: tinyint)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Reducer 2 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Select Operator
                expressions: KEY.reducesinkkey0 (type: smallint), VALUE._col0 (type: int), VALUE._col1 (type: bigint), VALUE._col2 (type: float), VALUE._col3 (type: tinyint)
                outputColumnNames: _col0, _col1, _col2, _col3, _col4
                Statistics: Num rows: 11 Data size: 264 Basic stats: COMPLETE Column stats: COMPLETE
                Reduce Output Operator
                  key expressions: _col4 (type: tinyint), _col0 (type: smallint)
                  sort order: ++
                  Map-reduce partition columns: _col4 (type: tinyint)
                  value expressions: _col1 (type: int), _col2 (type: bigint), _col3 (type: float)
        Reducer 3 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Select Operator
                expressions: KEY._col0 (type: smallint), VALUE._col1 (type: int), VALUE._col2 (type: bigint), VALUE._col3 (type: float), KEY._col4 (type: tinyint)
                outputColumnNames: _col0, _col1, _col2, _col3, _col4
                File Output Operator
                  compressed: false
                  Dp Sort State: PARTITION_SORTED
                  Statistics: Num rows: 11 Data size: 264 Basic stats: COMPLETE Column stats: COMPLETE
                  table:
                      input format: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
                      output format: org.apache.hadoop.hive.ql.io.orc.OrcOutputFormat
                      serde: org.apache.hadoop.hive.ql.io.orc.OrcSerde
                      name: default.over1k_part_orc

  Stage: Stage-2
    Dependency Collection

  Stage: Stage-0
    Move Operator
      tables:
          partition:
            ds foo
            t 
          replace: true
          table:
              input format: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
              output format: org.apache.hadoop.hive.ql.io.orc.OrcOutputFormat
              serde: org.apache.hadoop.hive.ql.io.orc.OrcSerde
              name: default.over1k_part_orc

  Stage: Stage-3
    Stats Work
      Basic Stats Work:
      Column Stats Desc:
          Columns: si, i, b, f
          Column Types: smallint, int, bigint, float
          Table: default.over1k_part_orc

PREHOOK: query: explain insert overwrite table over1k_part_limit_orc partition(ds="foo", t) select si,i,b,f,t from over1k_orc where t is null or t=27 limit 10
PREHOOK: type: QUERY
PREHOOK: Input: default@over1k_orc
PREHOOK: Output: default@over1k_part_limit_orc@ds=foo
POSTHOOK: query: explain insert overwrite table over1k_part_limit_orc partition(ds="foo", t) select si,i,b,f,t from over1k_orc where t is null or t=27 limit 10
POSTHOOK: type: QUERY
POSTHOOK: Input: default@over1k_orc
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-2 depends on stages: Stage-1
  Stage-0 depends on stages: Stage-2
  Stage-3 depends on stages: Stage-0

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (CUSTOM_SIMPLE_EDGE)
        Reducer 3 <- Reducer 2 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: over1k_orc
                  filterExpr: (t is null or (t = 27Y)) (type: boolean)
                  Statistics: Num rows: 1049 Data size: 25160 Basic stats: COMPLETE Column stats: COMPLETE
                  Filter Operator
                    predicate: ((t = 27Y) or t is null) (type: boolean)
                    Statistics: Num rows: 11 Data size: 264 Basic stats: COMPLETE Column stats: COMPLETE
                    Select Operator
                      expressions: si (type: smallint), i (type: int), b (type: bigint), f (type: float), t (type: tinyint)
                      outputColumnNames: _col0, _col1, _col2, _col3, _col4
                      Statistics: Num rows: 11 Data size: 264 Basic stats: COMPLETE Column stats: COMPLETE
                      Limit
                        Number of rows: 10
                        Statistics: Num rows: 10 Data size: 240 Basic stats: COMPLETE Column stats: COMPLETE
                        Reduce Output Operator
                          sort order: 
                          Statistics: Num rows: 10 Data size: 240 Basic stats: COMPLETE Column stats: COMPLETE
                          value expressions: _col0 (type: smallint), _col1 (type: int), _col2 (type: bigint), _col3 (type: float), _col4 (type: tinyint)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Reducer 2 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Select Operator
                expressions: VALUE._col0 (type: smallint), VALUE._col1 (type: int), VALUE._col2 (type: bigint), VALUE._col3 (type: float), VALUE._col4 (type: tinyint)
                outputColumnNames: _col0, _col1, _col2, _col3, _col4
                Statistics: Num rows: 10 Data size: 240 Basic stats: COMPLETE Column stats: COMPLETE
                Limit
                  Number of rows: 10
                  Statistics: Num rows: 10 Data size: 240 Basic stats: COMPLETE Column stats: COMPLETE
                  Reduce Output Operator
                    key expressions: _col4 (type: tinyint)
                    sort order: +
                    Map-reduce partition columns: _col4 (type: tinyint)
                    value expressions: _col0 (type: smallint), _col1 (type: int), _col2 (type: bigint), _col3 (type: float)
        Reducer 3 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Select Operator
                expressions: VALUE._col0 (type: smallint), VALUE._col1 (type: int), VALUE._col2 (type: bigint), VALUE._col3 (type: float), KEY._col4 (type: tinyint)
                outputColumnNames: _col0, _col1, _col2, _col3, _col4
                File Output Operator
                  compressed: false
                  Dp Sort State: PARTITION_SORTED
                  Statistics: Num rows: 10 Data size: 240 Basic stats: COMPLETE Column stats: COMPLETE
                  table:
                      input format: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
                      output format: org.apache.hadoop.hive.ql.io.orc.OrcOutputFormat
                      serde: org.apache.hadoop.hive.ql.io.orc.OrcSerde
                      name: default.over1k_part_limit_orc

  Stage: Stage-2
    Dependency Collection

  Stage: Stage-0
    Move Operator
      tables:
          partition:
            ds foo
            t 
          replace: true
          table:
              input format: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
              output format: org.apache.hadoop.hive.ql.io.orc.OrcOutputFormat
              serde: org.apache.hadoop.hive.ql.io.orc.OrcSerde
              name: default.over1k_part_limit_orc

  Stage: Stage-3
    Stats Work
      Basic Stats Work:
      Column Stats Desc:
          Columns: si, i, b, f
          Column Types: smallint, int, bigint, float
          Table: default.over1k_part_limit_orc

PREHOOK: query: explain insert overwrite table over1k_part_buck_orc partition(t) select si,i,b,f,t from over1k_orc where t is null or t=27
PREHOOK: type: QUERY
PREHOOK: Input: default@over1k_orc
PREHOOK: Output: default@over1k_part_buck_orc
POSTHOOK: query: explain insert overwrite table over1k_part_buck_orc partition(t) select si,i,b,f,t from over1k_orc where t is null or t=27
POSTHOOK: type: QUERY
POSTHOOK: Input: default@over1k_orc
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-2 depends on stages: Stage-1
  Stage-0 depends on stages: Stage-2
  Stage-3 depends on stages: Stage-0

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: over1k_orc
                  filterExpr: (t is null or (t = 27Y)) (type: boolean)
                  Statistics: Num rows: 1049 Data size: 25160 Basic stats: COMPLETE Column stats: COMPLETE
                  Filter Operator
                    predicate: ((t = 27Y) or t is null) (type: boolean)
                    Statistics: Num rows: 11 Data size: 264 Basic stats: COMPLETE Column stats: COMPLETE
                    Select Operator
                      expressions: si (type: smallint), i (type: int), b (type: bigint), f (type: float), t (type: tinyint)
                      outputColumnNames: _col0, _col1, _col2, _col3, _col4
                      Statistics: Num rows: 11 Data size: 264 Basic stats: COMPLETE Column stats: COMPLETE
                      Reduce Output Operator
                        key expressions: _col4 (type: tinyint), _bucket_number (type: string)
                        sort order: ++
                        Map-reduce partition columns: _col4 (type: tinyint)
                        value expressions: _col0 (type: smallint), _col1 (type: int), _col2 (type: bigint), _col3 (type: float)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Reducer 2 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Select Operator
                expressions: VALUE._col0 (type: smallint), VALUE._col1 (type: int), VALUE._col2 (type: bigint), VALUE._col3 (type: float), KEY._col4 (type: tinyint), KEY._bucket_number (type: string)
                outputColumnNames: _col0, _col1, _col2, _col3, _col4, _bucket_number
                File Output Operator
                  compressed: false
                  Dp Sort State: PARTITION_BUCKET_SORTED
                  Statistics: Num rows: 11 Data size: 264 Basic stats: COMPLETE Column stats: COMPLETE
                  table:
                      input format: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
                      output format: org.apache.hadoop.hive.ql.io.orc.OrcOutputFormat
                      serde: org.apache.hadoop.hive.ql.io.orc.OrcSerde
                      name: default.over1k_part_buck_orc

  Stage: Stage-2
    Dependency Collection

  Stage: Stage-0
    Move Operator
      tables:
          partition:
            t 
          replace: true
          table:
              input format: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
              output format: org.apache.hadoop.hive.ql.io.orc.OrcOutputFormat
              serde: org.apache.hadoop.hive.ql.io.orc.OrcSerde
              name: default.over1k_part_buck_orc

  Stage: Stage-3
    Stats Work
      Basic Stats Work:
      Column Stats Desc:
          Columns: si, i, b, f
          Column Types: smallint, int, bigint, float
          Table: default.over1k_part_buck_orc

PREHOOK: query: explain insert overwrite table over1k_part_buck_sort_orc partition(t) select si,i,b,f,t from over1k_orc where t is null or t=27
PREHOOK: type: QUERY
PREHOOK: Input: default@over1k_orc
PREHOOK: Output: default@over1k_part_buck_sort_orc
POSTHOOK: query: explain insert overwrite table over1k_part_buck_sort_orc partition(t) select si,i,b,f,t from over1k_orc where t is null or t=27
POSTHOOK: type: QUERY
POSTHOOK: Input: default@over1k_orc
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-2 depends on stages: Stage-1
  Stage-0 depends on stages: Stage-2
  Stage-3 depends on stages: Stage-0

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: over1k_orc
                  filterExpr: (t is null or (t = 27Y)) (type: boolean)
                  Statistics: Num rows: 1049 Data size: 25160 Basic stats: COMPLETE Column stats: COMPLETE
                  Filter Operator
                    predicate: ((t = 27Y) or t is null) (type: boolean)
                    Statistics: Num rows: 11 Data size: 264 Basic stats: COMPLETE Column stats: COMPLETE
                    Select Operator
                      expressions: si (type: smallint), i (type: int), b (type: bigint), f (type: float), t (type: tinyint)
                      outputColumnNames: _col0, _col1, _col2, _col3, _col4
                      Statistics: Num rows: 11 Data size: 264 Basic stats: COMPLETE Column stats: COMPLETE
                      Reduce Output Operator
                        key expressions: _col4 (type: tinyint), _bucket_number (type: string), _col3 (type: float)
                        sort order: +++
                        Map-reduce partition columns: _col4 (type: tinyint)
                        value expressions: _col0 (type: smallint), _col1 (type: int), _col2 (type: bigint)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Reducer 2 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Select Operator
                expressions: VALUE._col0 (type: smallint), VALUE._col1 (type: int), VALUE._col2 (type: bigint), KEY._col3 (type: float), KEY._col4 (type: tinyint), KEY._bucket_number (type: string)
                outputColumnNames: _col0, _col1, _col2, _col3, _col4, _bucket_number
                File Output Operator
                  compressed: false
                  Dp Sort State: PARTITION_BUCKET_SORTED
                  Statistics: Num rows: 11 Data size: 264 Basic stats: COMPLETE Column stats: COMPLETE
                  table:
                      input format: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
                      output format: org.apache.hadoop.hive.ql.io.orc.OrcOutputFormat
                      serde: org.apache.hadoop.hive.ql.io.orc.OrcSerde
                      name: default.over1k_part_buck_sort_orc

  Stage: Stage-2
    Dependency Collection

  Stage: Stage-0
    Move Operator
      tables:
          partition:
            t 
          replace: true
          table:
              input format: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
              output format: org.apache.hadoop.hive.ql.io.orc.OrcOutputFormat
              serde: org.apache.hadoop.hive.ql.io.orc.OrcSerde
              name: default.over1k_part_buck_sort_orc

  Stage: Stage-3
    Stats Work
      Basic Stats Work:
      Column Stats Desc:
          Columns: si, i, b, f
          Column Types: smallint, int, bigint, float
          Table: default.over1k_part_buck_sort_orc

PREHOOK: query: insert overwrite table over1k_part_orc partition(ds="foo", t) select si,i,b,f,t from over1k_orc where t is null or t=27 order by si
PREHOOK: type: QUERY
PREHOOK: Input: default@over1k_orc
PREHOOK: Output: default@over1k_part_orc@ds=foo
POSTHOOK: query: insert overwrite table over1k_part_orc partition(ds="foo", t) select si,i,b,f,t from over1k_orc where t is null or t=27 order by si
POSTHOOK: type: QUERY
POSTHOOK: Input: default@over1k_orc
POSTHOOK: Output: default@over1k_part_orc@ds=foo/t=27
POSTHOOK: Output: default@over1k_part_orc@ds=foo/t=__HIVE_DEFAULT_PARTITION__
POSTHOOK: Lineage: over1k_part_orc PARTITION(ds=foo,t=27).b SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:b, type:bigint, comment:null), ]
POSTHOOK: Lineage: over1k_part_orc PARTITION(ds=foo,t=27).f SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:f, type:float, comment:null), ]
POSTHOOK: Lineage: over1k_part_orc PARTITION(ds=foo,t=27).i SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:i, type:int, comment:null), ]
POSTHOOK: Lineage: over1k_part_orc PARTITION(ds=foo,t=27).si SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:si, type:smallint, comment:null), ]
POSTHOOK: Lineage: over1k_part_orc PARTITION(ds=foo,t=__HIVE_DEFAULT_PARTITION__).b SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:b, type:bigint, comment:null), ]
POSTHOOK: Lineage: over1k_part_orc PARTITION(ds=foo,t=__HIVE_DEFAULT_PARTITION__).f SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:f, type:float, comment:null), ]
POSTHOOK: Lineage: over1k_part_orc PARTITION(ds=foo,t=__HIVE_DEFAULT_PARTITION__).i SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:i, type:int, comment:null), ]
POSTHOOK: Lineage: over1k_part_orc PARTITION(ds=foo,t=__HIVE_DEFAULT_PARTITION__).si SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:si, type:smallint, comment:null), ]
PREHOOK: query: insert overwrite table over1k_part_limit_orc partition(ds="foo", t) select si,i,b,f,t from over1k_orc where t is null or t=27 limit 10
PREHOOK: type: QUERY
PREHOOK: Input: default@over1k_orc
PREHOOK: Output: default@over1k_part_limit_orc@ds=foo
POSTHOOK: query: insert overwrite table over1k_part_limit_orc partition(ds="foo", t) select si,i,b,f,t from over1k_orc where t is null or t=27 limit 10
POSTHOOK: type: QUERY
POSTHOOK: Input: default@over1k_orc
POSTHOOK: Output: default@over1k_part_limit_orc@ds=foo/t=27
POSTHOOK: Output: default@over1k_part_limit_orc@ds=foo/t=__HIVE_DEFAULT_PARTITION__
POSTHOOK: Lineage: over1k_part_limit_orc PARTITION(ds=foo,t=27).b SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:b, type:bigint, comment:null), ]
POSTHOOK: Lineage: over1k_part_limit_orc PARTITION(ds=foo,t=27).f SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:f, type:float, comment:null), ]
POSTHOOK: Lineage: over1k_part_limit_orc PARTITION(ds=foo,t=27).i SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:i, type:int, comment:null), ]
POSTHOOK: Lineage: over1k_part_limit_orc PARTITION(ds=foo,t=27).si SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:si, type:smallint, comment:null), ]
POSTHOOK: Lineage: over1k_part_limit_orc PARTITION(ds=foo,t=__HIVE_DEFAULT_PARTITION__).b SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:b, type:bigint, comment:null), ]
POSTHOOK: Lineage: over1k_part_limit_orc PARTITION(ds=foo,t=__HIVE_DEFAULT_PARTITION__).f SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:f, type:float, comment:null), ]
POSTHOOK: Lineage: over1k_part_limit_orc PARTITION(ds=foo,t=__HIVE_DEFAULT_PARTITION__).i SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:i, type:int, comment:null), ]
POSTHOOK: Lineage: over1k_part_limit_orc PARTITION(ds=foo,t=__HIVE_DEFAULT_PARTITION__).si SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:si, type:smallint, comment:null), ]
PREHOOK: query: insert overwrite table over1k_part_buck_orc partition(t) select si,i,b,f,t from over1k_orc where t is null or t=27
PREHOOK: type: QUERY
PREHOOK: Input: default@over1k_orc
PREHOOK: Output: default@over1k_part_buck_orc
POSTHOOK: query: insert overwrite table over1k_part_buck_orc partition(t) select si,i,b,f,t from over1k_orc where t is null or t=27
POSTHOOK: type: QUERY
POSTHOOK: Input: default@over1k_orc
POSTHOOK: Output: default@over1k_part_buck_orc@t=27
POSTHOOK: Output: default@over1k_part_buck_orc@t=__HIVE_DEFAULT_PARTITION__
POSTHOOK: Lineage: over1k_part_buck_orc PARTITION(t=27).b SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:b, type:bigint, comment:null), ]
POSTHOOK: Lineage: over1k_part_buck_orc PARTITION(t=27).f SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:f, type:float, comment:null), ]
POSTHOOK: Lineage: over1k_part_buck_orc PARTITION(t=27).i SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:i, type:int, comment:null), ]
POSTHOOK: Lineage: over1k_part_buck_orc PARTITION(t=27).si SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:si, type:smallint, comment:null), ]
POSTHOOK: Lineage: over1k_part_buck_orc PARTITION(t=__HIVE_DEFAULT_PARTITION__).b SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:b, type:bigint, comment:null), ]
POSTHOOK: Lineage: over1k_part_buck_orc PARTITION(t=__HIVE_DEFAULT_PARTITION__).f SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:f, type:float, comment:null), ]
POSTHOOK: Lineage: over1k_part_buck_orc PARTITION(t=__HIVE_DEFAULT_PARTITION__).i SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:i, type:int, comment:null), ]
POSTHOOK: Lineage: over1k_part_buck_orc PARTITION(t=__HIVE_DEFAULT_PARTITION__).si SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:si, type:smallint, comment:null), ]
PREHOOK: query: insert overwrite table over1k_part_buck_sort_orc partition(t) select si,i,b,f,t from over1k_orc where t is null or t=27
PREHOOK: type: QUERY
PREHOOK: Input: default@over1k_orc
PREHOOK: Output: default@over1k_part_buck_sort_orc
POSTHOOK: query: insert overwrite table over1k_part_buck_sort_orc partition(t) select si,i,b,f,t from over1k_orc where t is null or t=27
POSTHOOK: type: QUERY
POSTHOOK: Input: default@over1k_orc
POSTHOOK: Output: default@over1k_part_buck_sort_orc@t=27
POSTHOOK: Output: default@over1k_part_buck_sort_orc@t=__HIVE_DEFAULT_PARTITION__
POSTHOOK: Lineage: over1k_part_buck_sort_orc PARTITION(t=27).b SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:b, type:bigint, comment:null), ]
POSTHOOK: Lineage: over1k_part_buck_sort_orc PARTITION(t=27).f SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:f, type:float, comment:null), ]
POSTHOOK: Lineage: over1k_part_buck_sort_orc PARTITION(t=27).i SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:i, type:int, comment:null), ]
POSTHOOK: Lineage: over1k_part_buck_sort_orc PARTITION(t=27).si SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:si, type:smallint, comment:null), ]
POSTHOOK: Lineage: over1k_part_buck_sort_orc PARTITION(t=__HIVE_DEFAULT_PARTITION__).b SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:b, type:bigint, comment:null), ]
POSTHOOK: Lineage: over1k_part_buck_sort_orc PARTITION(t=__HIVE_DEFAULT_PARTITION__).f SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:f, type:float, comment:null), ]
POSTHOOK: Lineage: over1k_part_buck_sort_orc PARTITION(t=__HIVE_DEFAULT_PARTITION__).i SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:i, type:int, comment:null), ]
POSTHOOK: Lineage: over1k_part_buck_sort_orc PARTITION(t=__HIVE_DEFAULT_PARTITION__).si SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:si, type:smallint, comment:null), ]
PREHOOK: query: explain insert into table over1k_part_orc partition(ds="foo", t) select si,i,b,f,t from over1k_orc where t is null or t=27 order by si
PREHOOK: type: QUERY
PREHOOK: Input: default@over1k_orc
PREHOOK: Output: default@over1k_part_orc@ds=foo
POSTHOOK: query: explain insert into table over1k_part_orc partition(ds="foo", t) select si,i,b,f,t from over1k_orc where t is null or t=27 order by si
POSTHOOK: type: QUERY
POSTHOOK: Input: default@over1k_orc
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-2 depends on stages: Stage-1
  Stage-0 depends on stages: Stage-2
  Stage-3 depends on stages: Stage-0

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE)
        Reducer 3 <- Reducer 2 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: over1k_orc
                  filterExpr: (t is null or (t = 27Y)) (type: boolean)
                  Statistics: Num rows: 1049 Data size: 25160 Basic stats: COMPLETE Column stats: COMPLETE
                  Filter Operator
                    predicate: ((t = 27Y) or t is null) (type: boolean)
                    Statistics: Num rows: 11 Data size: 264 Basic stats: COMPLETE Column stats: COMPLETE
                    Select Operator
                      expressions: si (type: smallint), i (type: int), b (type: bigint), f (type: float), t (type: tinyint)
                      outputColumnNames: _col0, _col1, _col2, _col3, _col4
                      Statistics: Num rows: 11 Data size: 264 Basic stats: COMPLETE Column stats: COMPLETE
                      Reduce Output Operator
                        key expressions: _col0 (type: smallint)
                        sort order: +
                        Statistics: Num rows: 11 Data size: 264 Basic stats: COMPLETE Column stats: COMPLETE
                        value expressions: _col1 (type: int), _col2 (type: bigint), _col3 (type: float), _col4 (type: tinyint)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Reducer 2 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Select Operator
                expressions: KEY.reducesinkkey0 (type: smallint), VALUE._col0 (type: int), VALUE._col1 (type: bigint), VALUE._col2 (type: float), VALUE._col3 (type: tinyint)
                outputColumnNames: _col0, _col1, _col2, _col3, _col4
                Statistics: Num rows: 11 Data size: 264 Basic stats: COMPLETE Column stats: COMPLETE
                Reduce Output Operator
                  key expressions: _col4 (type: tinyint), _col0 (type: smallint)
                  sort order: ++
                  Map-reduce partition columns: _col4 (type: tinyint)
                  value expressions: _col1 (type: int), _col2 (type: bigint), _col3 (type: float)
        Reducer 3 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Select Operator
                expressions: KEY._col0 (type: smallint), VALUE._col1 (type: int), VALUE._col2 (type: bigint), VALUE._col3 (type: float), KEY._col4 (type: tinyint)
                outputColumnNames: _col0, _col1, _col2, _col3, _col4
                File Output Operator
                  compressed: false
                  Dp Sort State: PARTITION_SORTED
                  Statistics: Num rows: 11 Data size: 264 Basic stats: COMPLETE Column stats: COMPLETE
                  table:
                      input format: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
                      output format: org.apache.hadoop.hive.ql.io.orc.OrcOutputFormat
                      serde: org.apache.hadoop.hive.ql.io.orc.OrcSerde
                      name: default.over1k_part_orc

  Stage: Stage-2
    Dependency Collection

  Stage: Stage-0
    Move Operator
      tables:
          partition:
            ds foo
            t 
          replace: false
          table:
              input format: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
              output format: org.apache.hadoop.hive.ql.io.orc.OrcOutputFormat
              serde: org.apache.hadoop.hive.ql.io.orc.OrcSerde
              name: default.over1k_part_orc

  Stage: Stage-3
    Stats Work
      Basic Stats Work:
      Column Stats Desc:
          Columns: si, i, b, f
          Column Types: smallint, int, bigint, float
          Table: default.over1k_part_orc

PREHOOK: query: explain insert into table over1k_part_limit_orc partition(ds="foo", t) select si,i,b,f,t from over1k_orc where t is null or t=27 limit 10
PREHOOK: type: QUERY
PREHOOK: Input: default@over1k_orc
PREHOOK: Output: default@over1k_part_limit_orc@ds=foo
POSTHOOK: query: explain insert into table over1k_part_limit_orc partition(ds="foo", t) select si,i,b,f,t from over1k_orc where t is null or t=27 limit 10
POSTHOOK: type: QUERY
POSTHOOK: Input: default@over1k_orc
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-2 depends on stages: Stage-1
  Stage-0 depends on stages: Stage-2
  Stage-3 depends on stages: Stage-0

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (CUSTOM_SIMPLE_EDGE)
        Reducer 3 <- Reducer 2 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: over1k_orc
                  filterExpr: (t is null or (t = 27Y)) (type: boolean)
                  Statistics: Num rows: 1049 Data size: 25160 Basic stats: COMPLETE Column stats: COMPLETE
                  Filter Operator
                    predicate: ((t = 27Y) or t is null) (type: boolean)
                    Statistics: Num rows: 11 Data size: 264 Basic stats: COMPLETE Column stats: COMPLETE
                    Select Operator
                      expressions: si (type: smallint), i (type: int), b (type: bigint), f (type: float), t (type: tinyint)
                      outputColumnNames: _col0, _col1, _col2, _col3, _col4
                      Statistics: Num rows: 11 Data size: 264 Basic stats: COMPLETE Column stats: COMPLETE
                      Limit
                        Number of rows: 10
                        Statistics: Num rows: 10 Data size: 240 Basic stats: COMPLETE Column stats: COMPLETE
                        Reduce Output Operator
                          sort order: 
                          Statistics: Num rows: 10 Data size: 240 Basic stats: COMPLETE Column stats: COMPLETE
                          value expressions: _col0 (type: smallint), _col1 (type: int), _col2 (type: bigint), _col3 (type: float), _col4 (type: tinyint)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Reducer 2 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Select Operator
                expressions: VALUE._col0 (type: smallint), VALUE._col1 (type: int), VALUE._col2 (type: bigint), VALUE._col3 (type: float), VALUE._col4 (type: tinyint)
                outputColumnNames: _col0, _col1, _col2, _col3, _col4
                Statistics: Num rows: 10 Data size: 240 Basic stats: COMPLETE Column stats: COMPLETE
                Limit
                  Number of rows: 10
                  Statistics: Num rows: 10 Data size: 240 Basic stats: COMPLETE Column stats: COMPLETE
                  Reduce Output Operator
                    key expressions: _col4 (type: tinyint)
                    sort order: +
                    Map-reduce partition columns: _col4 (type: tinyint)
                    value expressions: _col0 (type: smallint), _col1 (type: int), _col2 (type: bigint), _col3 (type: float)
        Reducer 3 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Select Operator
                expressions: VALUE._col0 (type: smallint), VALUE._col1 (type: int), VALUE._col2 (type: bigint), VALUE._col3 (type: float), KEY._col4 (type: tinyint)
                outputColumnNames: _col0, _col1, _col2, _col3, _col4
                File Output Operator
                  compressed: false
                  Dp Sort State: PARTITION_SORTED
                  Statistics: Num rows: 10 Data size: 240 Basic stats: COMPLETE Column stats: COMPLETE
                  table:
                      input format: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
                      output format: org.apache.hadoop.hive.ql.io.orc.OrcOutputFormat
                      serde: org.apache.hadoop.hive.ql.io.orc.OrcSerde
                      name: default.over1k_part_limit_orc

  Stage: Stage-2
    Dependency Collection

  Stage: Stage-0
    Move Operator
      tables:
          partition:
            ds foo
            t 
          replace: false
          table:
              input format: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
              output format: org.apache.hadoop.hive.ql.io.orc.OrcOutputFormat
              serde: org.apache.hadoop.hive.ql.io.orc.OrcSerde
              name: default.over1k_part_limit_orc

  Stage: Stage-3
    Stats Work
      Basic Stats Work:
      Column Stats Desc:
          Columns: si, i, b, f
          Column Types: smallint, int, bigint, float
          Table: default.over1k_part_limit_orc

PREHOOK: query: explain insert into table over1k_part_buck_orc partition(t) select si,i,b,f,t from over1k_orc where t is null or t=27
PREHOOK: type: QUERY
PREHOOK: Input: default@over1k_orc
PREHOOK: Output: default@over1k_part_buck_orc
POSTHOOK: query: explain insert into table over1k_part_buck_orc partition(t) select si,i,b,f,t from over1k_orc where t is null or t=27
POSTHOOK: type: QUERY
POSTHOOK: Input: default@over1k_orc
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-2 depends on stages: Stage-1
  Stage-0 depends on stages: Stage-2
  Stage-3 depends on stages: Stage-0

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: over1k_orc
                  filterExpr: (t is null or (t = 27Y)) (type: boolean)
                  Statistics: Num rows: 1049 Data size: 25160 Basic stats: COMPLETE Column stats: COMPLETE
                  Filter Operator
                    predicate: ((t = 27Y) or t is null) (type: boolean)
                    Statistics: Num rows: 11 Data size: 264 Basic stats: COMPLETE Column stats: COMPLETE
                    Select Operator
                      expressions: si (type: smallint), i (type: int), b (type: bigint), f (type: float), t (type: tinyint)
                      outputColumnNames: _col0, _col1, _col2, _col3, _col4
                      Statistics: Num rows: 11 Data size: 264 Basic stats: COMPLETE Column stats: COMPLETE
                      Reduce Output Operator
                        key expressions: _col4 (type: tinyint), _bucket_number (type: string)
                        sort order: ++
                        Map-reduce partition columns: _col4 (type: tinyint)
                        value expressions: _col0 (type: smallint), _col1 (type: int), _col2 (type: bigint), _col3 (type: float)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Reducer 2 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Select Operator
                expressions: VALUE._col0 (type: smallint), VALUE._col1 (type: int), VALUE._col2 (type: bigint), VALUE._col3 (type: float), KEY._col4 (type: tinyint), KEY._bucket_number (type: string)
                outputColumnNames: _col0, _col1, _col2, _col3, _col4, _bucket_number
                File Output Operator
                  compressed: false
                  Dp Sort State: PARTITION_BUCKET_SORTED
                  Statistics: Num rows: 11 Data size: 264 Basic stats: COMPLETE Column stats: COMPLETE
                  table:
                      input format: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
                      output format: org.apache.hadoop.hive.ql.io.orc.OrcOutputFormat
                      serde: org.apache.hadoop.hive.ql.io.orc.OrcSerde
                      name: default.over1k_part_buck_orc

  Stage: Stage-2
    Dependency Collection

  Stage: Stage-0
    Move Operator
      tables:
          partition:
            t 
          replace: false
          table:
              input format: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
              output format: org.apache.hadoop.hive.ql.io.orc.OrcOutputFormat
              serde: org.apache.hadoop.hive.ql.io.orc.OrcSerde
              name: default.over1k_part_buck_orc

  Stage: Stage-3
    Stats Work
      Basic Stats Work:
      Column Stats Desc:
          Columns: si, i, b, f
          Column Types: smallint, int, bigint, float
          Table: default.over1k_part_buck_orc

PREHOOK: query: explain insert into table over1k_part_buck_sort_orc partition(t) select si,i,b,f,t from over1k_orc where t is null or t=27
PREHOOK: type: QUERY
PREHOOK: Input: default@over1k_orc
PREHOOK: Output: default@over1k_part_buck_sort_orc
POSTHOOK: query: explain insert into table over1k_part_buck_sort_orc partition(t) select si,i,b,f,t from over1k_orc where t is null or t=27
POSTHOOK: type: QUERY
POSTHOOK: Input: default@over1k_orc
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-2 depends on stages: Stage-1
  Stage-0 depends on stages: Stage-2
  Stage-3 depends on stages: Stage-0

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: over1k_orc
                  filterExpr: (t is null or (t = 27Y)) (type: boolean)
                  Statistics: Num rows: 1049 Data size: 25160 Basic stats: COMPLETE Column stats: COMPLETE
                  Filter Operator
                    predicate: ((t = 27Y) or t is null) (type: boolean)
                    Statistics: Num rows: 11 Data size: 264 Basic stats: COMPLETE Column stats: COMPLETE
                    Select Operator
                      expressions: si (type: smallint), i (type: int), b (type: bigint), f (type: float), t (type: tinyint)
                      outputColumnNames: _col0, _col1, _col2, _col3, _col4
                      Statistics: Num rows: 11 Data size: 264 Basic stats: COMPLETE Column stats: COMPLETE
                      Reduce Output Operator
                        key expressions: _col4 (type: tinyint), _bucket_number (type: string), _col3 (type: float)
                        sort order: +++
                        Map-reduce partition columns: _col4 (type: tinyint)
                        value expressions: _col0 (type: smallint), _col1 (type: int), _col2 (type: bigint)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Reducer 2 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Select Operator
                expressions: VALUE._col0 (type: smallint), VALUE._col1 (type: int), VALUE._col2 (type: bigint), KEY._col3 (type: float), KEY._col4 (type: tinyint), KEY._bucket_number (type: string)
                outputColumnNames: _col0, _col1, _col2, _col3, _col4, _bucket_number
                File Output Operator
                  compressed: false
                  Dp Sort State: PARTITION_BUCKET_SORTED
                  Statistics: Num rows: 11 Data size: 264 Basic stats: COMPLETE Column stats: COMPLETE
                  table:
                      input format: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
                      output format: org.apache.hadoop.hive.ql.io.orc.OrcOutputFormat
                      serde: org.apache.hadoop.hive.ql.io.orc.OrcSerde
                      name: default.over1k_part_buck_sort_orc

  Stage: Stage-2
    Dependency Collection

  Stage: Stage-0
    Move Operator
      tables:
          partition:
            t 
          replace: false
          table:
              input format: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
              output format: org.apache.hadoop.hive.ql.io.orc.OrcOutputFormat
              serde: org.apache.hadoop.hive.ql.io.orc.OrcSerde
              name: default.over1k_part_buck_sort_orc

  Stage: Stage-3
    Stats Work
      Basic Stats Work:
      Column Stats Desc:
          Columns: si, i, b, f
          Column Types: smallint, int, bigint, float
          Table: default.over1k_part_buck_sort_orc

PREHOOK: query: insert into table over1k_part_orc partition(ds="foo", t) select si,i,b,f,t from over1k_orc where t is null or t=27 order by si
PREHOOK: type: QUERY
PREHOOK: Input: default@over1k_orc
PREHOOK: Output: default@over1k_part_orc@ds=foo
POSTHOOK: query: insert into table over1k_part_orc partition(ds="foo", t) select si,i,b,f,t from over1k_orc where t is null or t=27 order by si
POSTHOOK: type: QUERY
POSTHOOK: Input: default@over1k_orc
POSTHOOK: Output: default@over1k_part_orc@ds=foo/t=27
POSTHOOK: Output: default@over1k_part_orc@ds=foo/t=__HIVE_DEFAULT_PARTITION__
POSTHOOK: Lineage: over1k_part_orc PARTITION(ds=foo,t=27).b SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:b, type:bigint, comment:null), ]
POSTHOOK: Lineage: over1k_part_orc PARTITION(ds=foo,t=27).f SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:f, type:float, comment:null), ]
POSTHOOK: Lineage: over1k_part_orc PARTITION(ds=foo,t=27).i SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:i, type:int, comment:null), ]
POSTHOOK: Lineage: over1k_part_orc PARTITION(ds=foo,t=27).si SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:si, type:smallint, comment:null), ]
POSTHOOK: Lineage: over1k_part_orc PARTITION(ds=foo,t=__HIVE_DEFAULT_PARTITION__).b SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:b, type:bigint, comment:null), ]
POSTHOOK: Lineage: over1k_part_orc PARTITION(ds=foo,t=__HIVE_DEFAULT_PARTITION__).f SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:f, type:float, comment:null), ]
POSTHOOK: Lineage: over1k_part_orc PARTITION(ds=foo,t=__HIVE_DEFAULT_PARTITION__).i SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:i, type:int, comment:null), ]
POSTHOOK: Lineage: over1k_part_orc PARTITION(ds=foo,t=__HIVE_DEFAULT_PARTITION__).si SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:si, type:smallint, comment:null), ]
PREHOOK: query: insert into table over1k_part_limit_orc partition(ds="foo", t) select si,i,b,f,t from over1k_orc where t is null or t=27 limit 10
PREHOOK: type: QUERY
PREHOOK: Input: default@over1k_orc
PREHOOK: Output: default@over1k_part_limit_orc@ds=foo
POSTHOOK: query: insert into table over1k_part_limit_orc partition(ds="foo", t) select si,i,b,f,t from over1k_orc where t is null or t=27 limit 10
POSTHOOK: type: QUERY
POSTHOOK: Input: default@over1k_orc
POSTHOOK: Output: default@over1k_part_limit_orc@ds=foo/t=27
POSTHOOK: Output: default@over1k_part_limit_orc@ds=foo/t=__HIVE_DEFAULT_PARTITION__
POSTHOOK: Lineage: over1k_part_limit_orc PARTITION(ds=foo,t=27).b SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:b, type:bigint, comment:null), ]
POSTHOOK: Lineage: over1k_part_limit_orc PARTITION(ds=foo,t=27).f SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:f, type:float, comment:null), ]
POSTHOOK: Lineage: over1k_part_limit_orc PARTITION(ds=foo,t=27).i SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:i, type:int, comment:null), ]
POSTHOOK: Lineage: over1k_part_limit_orc PARTITION(ds=foo,t=27).si SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:si, type:smallint, comment:null), ]
POSTHOOK: Lineage: over1k_part_limit_orc PARTITION(ds=foo,t=__HIVE_DEFAULT_PARTITION__).b SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:b, type:bigint, comment:null), ]
POSTHOOK: Lineage: over1k_part_limit_orc PARTITION(ds=foo,t=__HIVE_DEFAULT_PARTITION__).f SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:f, type:float, comment:null), ]
POSTHOOK: Lineage: over1k_part_limit_orc PARTITION(ds=foo,t=__HIVE_DEFAULT_PARTITION__).i SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:i, type:int, comment:null), ]
POSTHOOK: Lineage: over1k_part_limit_orc PARTITION(ds=foo,t=__HIVE_DEFAULT_PARTITION__).si SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:si, type:smallint, comment:null), ]
PREHOOK: query: insert into table over1k_part_buck_orc partition(t) select si,i,b,f,t from over1k_orc where t is null or t=27
PREHOOK: type: QUERY
PREHOOK: Input: default@over1k_orc
PREHOOK: Output: default@over1k_part_buck_orc
POSTHOOK: query: insert into table over1k_part_buck_orc partition(t) select si,i,b,f,t from over1k_orc where t is null or t=27
POSTHOOK: type: QUERY
POSTHOOK: Input: default@over1k_orc
POSTHOOK: Output: default@over1k_part_buck_orc@t=27
POSTHOOK: Output: default@over1k_part_buck_orc@t=__HIVE_DEFAULT_PARTITION__
POSTHOOK: Lineage: over1k_part_buck_orc PARTITION(t=27).b SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:b, type:bigint, comment:null), ]
POSTHOOK: Lineage: over1k_part_buck_orc PARTITION(t=27).f SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:f, type:float, comment:null), ]
POSTHOOK: Lineage: over1k_part_buck_orc PARTITION(t=27).i SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:i, type:int, comment:null), ]
POSTHOOK: Lineage: over1k_part_buck_orc PARTITION(t=27).si SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:si, type:smallint, comment:null), ]
POSTHOOK: Lineage: over1k_part_buck_orc PARTITION(t=__HIVE_DEFAULT_PARTITION__).b SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:b, type:bigint, comment:null), ]
POSTHOOK: Lineage: over1k_part_buck_orc PARTITION(t=__HIVE_DEFAULT_PARTITION__).f SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:f, type:float, comment:null), ]
POSTHOOK: Lineage: over1k_part_buck_orc PARTITION(t=__HIVE_DEFAULT_PARTITION__).i SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:i, type:int, comment:null), ]
POSTHOOK: Lineage: over1k_part_buck_orc PARTITION(t=__HIVE_DEFAULT_PARTITION__).si SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:si, type:smallint, comment:null), ]
PREHOOK: query: insert into table over1k_part_buck_sort_orc partition(t) select si,i,b,f,t from over1k_orc where t is null or t=27
PREHOOK: type: QUERY
PREHOOK: Input: default@over1k_orc
PREHOOK: Output: default@over1k_part_buck_sort_orc
POSTHOOK: query: insert into table over1k_part_buck_sort_orc partition(t) select si,i,b,f,t from over1k_orc where t is null or t=27
POSTHOOK: type: QUERY
POSTHOOK: Input: default@over1k_orc
POSTHOOK: Output: default@over1k_part_buck_sort_orc@t=27
POSTHOOK: Output: default@over1k_part_buck_sort_orc@t=__HIVE_DEFAULT_PARTITION__
POSTHOOK: Lineage: over1k_part_buck_sort_orc PARTITION(t=27).b SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:b, type:bigint, comment:null), ]
POSTHOOK: Lineage: over1k_part_buck_sort_orc PARTITION(t=27).f SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:f, type:float, comment:null), ]
POSTHOOK: Lineage: over1k_part_buck_sort_orc PARTITION(t=27).i SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:i, type:int, comment:null), ]
POSTHOOK: Lineage: over1k_part_buck_sort_orc PARTITION(t=27).si SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:si, type:smallint, comment:null), ]
POSTHOOK: Lineage: over1k_part_buck_sort_orc PARTITION(t=__HIVE_DEFAULT_PARTITION__).b SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:b, type:bigint, comment:null), ]
POSTHOOK: Lineage: over1k_part_buck_sort_orc PARTITION(t=__HIVE_DEFAULT_PARTITION__).f SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:f, type:float, comment:null), ]
POSTHOOK: Lineage: over1k_part_buck_sort_orc PARTITION(t=__HIVE_DEFAULT_PARTITION__).i SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:i, type:int, comment:null), ]
POSTHOOK: Lineage: over1k_part_buck_sort_orc PARTITION(t=__HIVE_DEFAULT_PARTITION__).si SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:si, type:smallint, comment:null), ]
PREHOOK: query: desc formatted over1k_part_orc partition(ds="foo",t=27)
PREHOOK: type: DESCTABLE
PREHOOK: Input: default@over1k_part_orc
POSTHOOK: query: desc formatted over1k_part_orc partition(ds="foo",t=27)
POSTHOOK: type: DESCTABLE
POSTHOOK: Input: default@over1k_part_orc
# col_name            	data_type           	comment             
si                  	smallint            	                    
i                   	int                 	                    
b                   	bigint              	                    
f                   	float               	                    
	 	 
# Partition Information	 	 
# col_name            	data_type           	comment             
ds                  	string              	                    
t                   	tinyint             	                    
	 	 
# Detailed Partition Information	 	 
Partition Value:    	[foo, 27]           	 
Database:           	default             	 
Table:              	over1k_part_orc     	 
#### A masked pattern was here ####
Partition Parameters:	 	 
	COLUMN_STATS_ACCURATE	{\"BASIC_STATS\":\"true\",\"COLUMN_STATS\":{\"b\":\"true\",\"f\":\"true\",\"i\":\"true\",\"si\":\"true\"}}
	numFiles            	2                   
	numRows             	32                  
	rawDataSize         	640                 
	totalSize           	1428                
#### A masked pattern was here ####
	 	 
# Storage Information	 	 
SerDe Library:      	org.apache.hadoop.hive.ql.io.orc.OrcSerde	 
InputFormat:        	org.apache.hadoop.hive.ql.io.orc.OrcInputFormat	 
OutputFormat:       	org.apache.hadoop.hive.ql.io.orc.OrcOutputFormat	 
Compressed:         	No                  	 
Num Buckets:        	-1                  	 
Bucket Columns:     	[]                  	 
Sort Columns:       	[]                  	 
Storage Desc Params:	 	 
	serialization.format	1                   
PREHOOK: query: desc formatted over1k_part_orc partition(ds="foo",t="__HIVE_DEFAULT_PARTITION__")
PREHOOK: type: DESCTABLE
PREHOOK: Input: default@over1k_part_orc
POSTHOOK: query: desc formatted over1k_part_orc partition(ds="foo",t="__HIVE_DEFAULT_PARTITION__")
POSTHOOK: type: DESCTABLE
POSTHOOK: Input: default@over1k_part_orc
# col_name            	data_type           	comment             
si                  	smallint            	                    
i                   	int                 	                    
b                   	bigint              	                    
f                   	float               	                    
	 	 
# Partition Information	 	 
# col_name            	data_type           	comment             
ds                  	string              	                    
t                   	tinyint             	                    
	 	 
# Detailed Partition Information	 	 
Partition Value:    	[foo, __HIVE_DEFAULT_PARTITION__]	 
Database:           	default             	 
Table:              	over1k_part_orc     	 
#### A masked pattern was here ####
Partition Parameters:	 	 
	COLUMN_STATS_ACCURATE	{\"BASIC_STATS\":\"true\",\"COLUMN_STATS\":{\"b\":\"true\",\"f\":\"true\",\"i\":\"true\",\"si\":\"true\"}}
	numFiles            	2                   
	numRows             	6                   
	rawDataSize         	120                 
	totalSize           	1132                
#### A masked pattern was here ####
	 	 
# Storage Information	 	 
SerDe Library:      	org.apache.hadoop.hive.ql.io.orc.OrcSerde	 
InputFormat:        	org.apache.hadoop.hive.ql.io.orc.OrcInputFormat	 
OutputFormat:       	org.apache.hadoop.hive.ql.io.orc.OrcOutputFormat	 
Compressed:         	No                  	 
Num Buckets:        	-1                  	 
Bucket Columns:     	[]                  	 
Sort Columns:       	[]                  	 
Storage Desc Params:	 	 
	serialization.format	1                   
PREHOOK: query: desc formatted over1k_part_limit_orc partition(ds="foo",t=27)
PREHOOK: type: DESCTABLE
PREHOOK: Input: default@over1k_part_limit_orc
POSTHOOK: query: desc formatted over1k_part_limit_orc partition(ds="foo",t=27)
POSTHOOK: type: DESCTABLE
POSTHOOK: Input: default@over1k_part_limit_orc
# col_name            	data_type           	comment             
si                  	smallint            	                    
i                   	int                 	                    
b                   	bigint              	                    
f                   	float               	                    
	 	 
# Partition Information	 	 
# col_name            	data_type           	comment             
ds                  	string              	                    
t                   	tinyint             	                    
	 	 
# Detailed Partition Information	 	 
Partition Value:    	[foo, 27]           	 
Database:           	default             	 
Table:              	over1k_part_limit_orc	 
#### A masked pattern was here ####
Partition Parameters:	 	 
	COLUMN_STATS_ACCURATE	{\"BASIC_STATS\":\"true\",\"COLUMN_STATS\":{\"b\":\"true\",\"f\":\"true\",\"i\":\"true\",\"si\":\"true\"}}
	numFiles            	2                   
	numRows             	14                  
	rawDataSize         	280                 
	totalSize           	1246                
#### A masked pattern was here ####
	 	 
# Storage Information	 	 
SerDe Library:      	org.apache.hadoop.hive.ql.io.orc.OrcSerde	 
InputFormat:        	org.apache.hadoop.hive.ql.io.orc.OrcInputFormat	 
OutputFormat:       	org.apache.hadoop.hive.ql.io.orc.OrcOutputFormat	 
Compressed:         	No                  	 
Num Buckets:        	-1                  	 
Bucket Columns:     	[]                  	 
Sort Columns:       	[]                  	 
Storage Desc Params:	 	 
	serialization.format	1                   
PREHOOK: query: desc formatted over1k_part_limit_orc partition(ds="foo",t="__HIVE_DEFAULT_PARTITION__")
PREHOOK: type: DESCTABLE
PREHOOK: Input: default@over1k_part_limit_orc
POSTHOOK: query: desc formatted over1k_part_limit_orc partition(ds="foo",t="__HIVE_DEFAULT_PARTITION__")
POSTHOOK: type: DESCTABLE
POSTHOOK: Input: default@over1k_part_limit_orc
# col_name            	data_type           	comment             
si                  	smallint            	                    
i                   	int                 	                    
b                   	bigint              	                    
f                   	float               	                    
	 	 
# Partition Information	 	 
# col_name            	data_type           	comment             
ds                  	string              	                    
t                   	tinyint             	                    
	 	 
# Detailed Partition Information	 	 
Partition Value:    	[foo, __HIVE_DEFAULT_PARTITION__]	 
Database:           	default             	 
Table:              	over1k_part_limit_orc	 
#### A masked pattern was here ####
Partition Parameters:	 	 
	COLUMN_STATS_ACCURATE	{\"BASIC_STATS\":\"true\",\"COLUMN_STATS\":{\"b\":\"true\",\"f\":\"true\",\"i\":\"true\",\"si\":\"true\"}}
	numFiles            	2                   
	numRows             	6                   
	rawDataSize         	120                 
	totalSize           	1132                
#### A masked pattern was here ####
	 	 
# Storage Information	 	 
SerDe Library:      	org.apache.hadoop.hive.ql.io.orc.OrcSerde	 
InputFormat:        	org.apache.hadoop.hive.ql.io.orc.OrcInputFormat	 
OutputFormat:       	org.apache.hadoop.hive.ql.io.orc.OrcOutputFormat	 
Compressed:         	No                  	 
Num Buckets:        	-1                  	 
Bucket Columns:     	[]                  	 
Sort Columns:       	[]                  	 
Storage Desc Params:	 	 
	serialization.format	1                   
PREHOOK: query: desc formatted over1k_part_buck_orc partition(t=27)
PREHOOK: type: DESCTABLE
PREHOOK: Input: default@over1k_part_buck_orc
POSTHOOK: query: desc formatted over1k_part_buck_orc partition(t=27)
POSTHOOK: type: DESCTABLE
POSTHOOK: Input: default@over1k_part_buck_orc
# col_name            	data_type           	comment             
si                  	smallint            	                    
i                   	int                 	                    
b                   	bigint              	                    
f                   	float               	                    
	 	 
# Partition Information	 	 
# col_name            	data_type           	comment             
t                   	tinyint             	                    
	 	 
# Detailed Partition Information	 	 
Partition Value:    	[27]                	 
Database:           	default             	 
Table:              	over1k_part_buck_orc	 
#### A masked pattern was here ####
Partition Parameters:	 	 
	COLUMN_STATS_ACCURATE	{\"BASIC_STATS\":\"true\",\"COLUMN_STATS\":{\"b\":\"true\",\"f\":\"true\",\"i\":\"true\",\"si\":\"true\"}}
	numFiles            	8                   
	numRows             	32                  
	rawDataSize         	640                 
	totalSize           	4670                
#### A masked pattern was here ####
	 	 
# Storage Information	 	 
SerDe Library:      	org.apache.hadoop.hive.ql.io.orc.OrcSerde	 
InputFormat:        	org.apache.hadoop.hive.ql.io.orc.OrcInputFormat	 
OutputFormat:       	org.apache.hadoop.hive.ql.io.orc.OrcOutputFormat	 
Compressed:         	No                  	 
Num Buckets:        	4                   	 
Bucket Columns:     	[si]                	 
Sort Columns:       	[]                  	 
Storage Desc Params:	 	 
	serialization.format	1                   
PREHOOK: query: desc formatted over1k_part_buck_orc partition(t="__HIVE_DEFAULT_PARTITION__")
PREHOOK: type: DESCTABLE
PREHOOK: Input: default@over1k_part_buck_orc
POSTHOOK: query: desc formatted over1k_part_buck_orc partition(t="__HIVE_DEFAULT_PARTITION__")
POSTHOOK: type: DESCTABLE
POSTHOOK: Input: default@over1k_part_buck_orc
# col_name            	data_type           	comment             
si                  	smallint            	                    
i                   	int                 	                    
b                   	bigint              	                    
f                   	float               	                    
	 	 
# Partition Information	 	 
# col_name            	data_type           	comment             
t                   	tinyint             	                    
	 	 
# Detailed Partition Information	 	 
Partition Value:    	[__HIVE_DEFAULT_PARTITION__]	 
Database:           	default             	 
Table:              	over1k_part_buck_orc	 
#### A masked pattern was here ####
Partition Parameters:	 	 
	COLUMN_STATS_ACCURATE	{\"BASIC_STATS\":\"true\",\"COLUMN_STATS\":{\"b\":\"true\",\"f\":\"true\",\"i\":\"true\",\"si\":\"true\"}}
	numFiles            	4                   
	numRows             	6                   
	rawDataSize         	120                 
	totalSize           	2074                
#### A masked pattern was here ####
	 	 
# Storage Information	 	 
SerDe Library:      	org.apache.hadoop.hive.ql.io.orc.OrcSerde	 
InputFormat:        	org.apache.hadoop.hive.ql.io.orc.OrcInputFormat	 
OutputFormat:       	org.apache.hadoop.hive.ql.io.orc.OrcOutputFormat	 
Compressed:         	No                  	 
Num Buckets:        	4                   	 
Bucket Columns:     	[si]                	 
Sort Columns:       	[]                  	 
Storage Desc Params:	 	 
	serialization.format	1                   
PREHOOK: query: desc formatted over1k_part_buck_sort_orc partition(t=27)
PREHOOK: type: DESCTABLE
PREHOOK: Input: default@over1k_part_buck_sort_orc
POSTHOOK: query: desc formatted over1k_part_buck_sort_orc partition(t=27)
POSTHOOK: type: DESCTABLE
POSTHOOK: Input: default@over1k_part_buck_sort_orc
# col_name            	data_type           	comment             
si                  	smallint            	                    
i                   	int                 	                    
b                   	bigint              	                    
f                   	float               	                    
	 	 
# Partition Information	 	 
# col_name            	data_type           	comment             
t                   	tinyint             	                    
	 	 
# Detailed Partition Information	 	 
Partition Value:    	[27]                	 
Database:           	default             	 
Table:              	over1k_part_buck_sort_orc	 
#### A masked pattern was here ####
Partition Parameters:	 	 
	COLUMN_STATS_ACCURATE	{\"BASIC_STATS\":\"true\",\"COLUMN_STATS\":{\"b\":\"true\",\"f\":\"true\",\"i\":\"true\",\"si\":\"true\"}}
	numFiles            	8                   
	numRows             	32                  
	rawDataSize         	640                 
	totalSize           	4656                
#### A masked pattern was here ####
	 	 
# Storage Information	 	 
SerDe Library:      	org.apache.hadoop.hive.ql.io.orc.OrcSerde	 
InputFormat:        	org.apache.hadoop.hive.ql.io.orc.OrcInputFormat	 
OutputFormat:       	org.apache.hadoop.hive.ql.io.orc.OrcOutputFormat	 
Compressed:         	No                  	 
Num Buckets:        	4                   	 
Bucket Columns:     	[si]                	 
Sort Columns:       	[Order(col:f, order:1)]	 
Storage Desc Params:	 	 
	serialization.format	1                   
PREHOOK: query: desc formatted over1k_part_buck_sort_orc partition(t="__HIVE_DEFAULT_PARTITION__")
PREHOOK: type: DESCTABLE
PREHOOK: Input: default@over1k_part_buck_sort_orc
POSTHOOK: query: desc formatted over1k_part_buck_sort_orc partition(t="__HIVE_DEFAULT_PARTITION__")
POSTHOOK: type: DESCTABLE
POSTHOOK: Input: default@over1k_part_buck_sort_orc
# col_name            	data_type           	comment             
si                  	smallint            	                    
i                   	int                 	                    
b                   	bigint              	                    
f                   	float               	                    
	 	 
# Partition Information	 	 
# col_name            	data_type           	comment             
t                   	tinyint             	                    
	 	 
# Detailed Partition Information	 	 
Partition Value:    	[__HIVE_DEFAULT_PARTITION__]	 
Database:           	default             	 
Table:              	over1k_part_buck_sort_orc	 
#### A masked pattern was here ####
Partition Parameters:	 	 
	COLUMN_STATS_ACCURATE	{\"BASIC_STATS\":\"true\",\"COLUMN_STATS\":{\"b\":\"true\",\"f\":\"true\",\"i\":\"true\",\"si\":\"true\"}}
	numFiles            	4                   
	numRows             	6                   
	rawDataSize         	120                 
	totalSize           	2074                
#### A masked pattern was here ####
	 	 
# Storage Information	 	 
SerDe Library:      	org.apache.hadoop.hive.ql.io.orc.OrcSerde	 
InputFormat:        	org.apache.hadoop.hive.ql.io.orc.OrcInputFormat	 
OutputFormat:       	org.apache.hadoop.hive.ql.io.orc.OrcOutputFormat	 
Compressed:         	No                  	 
Num Buckets:        	4                   	 
Bucket Columns:     	[si]                	 
Sort Columns:       	[Order(col:f, order:1)]	 
Storage Desc Params:	 	 
	serialization.format	1                   
PREHOOK: query: select count(*) from over1k_part_orc
PREHOOK: type: QUERY
PREHOOK: Input: default@over1k_part_orc
PREHOOK: Input: default@over1k_part_orc@ds=foo/t=27
PREHOOK: Input: default@over1k_part_orc@ds=foo/t=__HIVE_DEFAULT_PARTITION__
#### A masked pattern was here ####
POSTHOOK: query: select count(*) from over1k_part_orc
POSTHOOK: type: QUERY
POSTHOOK: Input: default@over1k_part_orc
POSTHOOK: Input: default@over1k_part_orc@ds=foo/t=27
POSTHOOK: Input: default@over1k_part_orc@ds=foo/t=__HIVE_DEFAULT_PARTITION__
#### A masked pattern was here ####
38
PREHOOK: query: select count(*) from over1k_part_limit_orc
PREHOOK: type: QUERY
PREHOOK: Input: default@over1k_part_limit_orc
PREHOOK: Input: default@over1k_part_limit_orc@ds=foo/t=27
PREHOOK: Input: default@over1k_part_limit_orc@ds=foo/t=__HIVE_DEFAULT_PARTITION__
#### A masked pattern was here ####
POSTHOOK: query: select count(*) from over1k_part_limit_orc
POSTHOOK: type: QUERY
POSTHOOK: Input: default@over1k_part_limit_orc
POSTHOOK: Input: default@over1k_part_limit_orc@ds=foo/t=27
POSTHOOK: Input: default@over1k_part_limit_orc@ds=foo/t=__HIVE_DEFAULT_PARTITION__
#### A masked pattern was here ####
20
PREHOOK: query: select count(*) from over1k_part_buck_orc
PREHOOK: type: QUERY
PREHOOK: Input: default@over1k_part_buck_orc
PREHOOK: Input: default@over1k_part_buck_orc@t=27
PREHOOK: Input: default@over1k_part_buck_orc@t=__HIVE_DEFAULT_PARTITION__
#### A masked pattern was here ####
POSTHOOK: query: select count(*) from over1k_part_buck_orc
POSTHOOK: type: QUERY
POSTHOOK: Input: default@over1k_part_buck_orc
POSTHOOK: Input: default@over1k_part_buck_orc@t=27
POSTHOOK: Input: default@over1k_part_buck_orc@t=__HIVE_DEFAULT_PARTITION__
#### A masked pattern was here ####
38
PREHOOK: query: select count(*) from over1k_part_buck_sort_orc
PREHOOK: type: QUERY
PREHOOK: Input: default@over1k_part_buck_sort_orc
PREHOOK: Input: default@over1k_part_buck_sort_orc@t=27
PREHOOK: Input: default@over1k_part_buck_sort_orc@t=__HIVE_DEFAULT_PARTITION__
#### A masked pattern was here ####
POSTHOOK: query: select count(*) from over1k_part_buck_sort_orc
POSTHOOK: type: QUERY
POSTHOOK: Input: default@over1k_part_buck_sort_orc
POSTHOOK: Input: default@over1k_part_buck_sort_orc@t=27
POSTHOOK: Input: default@over1k_part_buck_sort_orc@t=__HIVE_DEFAULT_PARTITION__
#### A masked pattern was here ####
38
PREHOOK: query: create table over1k_part2_orc(
           si smallint,
           i int,
           b bigint,
           f float)
       partitioned by (ds string, t tinyint)
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@over1k_part2_orc
POSTHOOK: query: create table over1k_part2_orc(
           si smallint,
           i int,
           b bigint,
           f float)
       partitioned by (ds string, t tinyint)
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@over1k_part2_orc
PREHOOK: query: explain insert overwrite table over1k_part2_orc partition(ds="foo",t) select si,i,b,f,t from over1k_orc where t is null or t=27 order by i
PREHOOK: type: QUERY
PREHOOK: Input: default@over1k_orc
PREHOOK: Output: default@over1k_part2_orc@ds=foo
POSTHOOK: query: explain insert overwrite table over1k_part2_orc partition(ds="foo",t) select si,i,b,f,t from over1k_orc where t is null or t=27 order by i
POSTHOOK: type: QUERY
POSTHOOK: Input: default@over1k_orc
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-2 depends on stages: Stage-1
  Stage-0 depends on stages: Stage-2
  Stage-3 depends on stages: Stage-0

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE)
        Reducer 3 <- Reducer 2 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: over1k_orc
                  filterExpr: (t is null or (t >= 27Y)) (type: boolean)
                  Statistics: Num rows: 1049 Data size: 25160 Basic stats: COMPLETE Column stats: COMPLETE
                  Filter Operator
                    predicate: ((t >= 27Y) or t is null) (type: boolean)
                    Statistics: Num rows: 352 Data size: 8448 Basic stats: COMPLETE Column stats: COMPLETE
                    Select Operator
                      expressions: si (type: smallint), i (type: int), b (type: bigint), f (type: float), t (type: tinyint)
                      outputColumnNames: _col0, _col1, _col2, _col3, _col4
                      Statistics: Num rows: 352 Data size: 8448 Basic stats: COMPLETE Column stats: COMPLETE
                      Reduce Output Operator
                        key expressions: _col1 (type: int)
                        sort order: +
                        Statistics: Num rows: 352 Data size: 8448 Basic stats: COMPLETE Column stats: COMPLETE
                        value expressions: _col0 (type: smallint), _col2 (type: bigint), _col3 (type: float), _col4 (type: tinyint)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Reducer 2 
            Execution mode: llap
            Reduce Operator Tree:
              Select Operator
                expressions: VALUE._col0 (type: smallint), KEY.reducesinkkey0 (type: int), VALUE._col1 (type: bigint), VALUE._col2 (type: float), VALUE._col3 (type: tinyint)
                outputColumnNames: _col0, _col1, _col2, _col3, _col4
                Statistics: Num rows: 352 Data size: 8448 Basic stats: COMPLETE Column stats: COMPLETE
                File Output Operator
                  compressed: false
                  Statistics: Num rows: 352 Data size: 8448 Basic stats: COMPLETE Column stats: COMPLETE
                  table:
                      input format: org.apache.hadoop.mapred.TextInputFormat
                      output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
                      serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
                      name: default.over1k_part2_orc
                Select Operator
                  expressions: _col0 (type: smallint), _col1 (type: int), _col2 (type: bigint), _col3 (type: float), 'foo' (type: string), _col4 (type: tinyint)
                  outputColumnNames: si, i, b, f, ds, t
                  Statistics: Num rows: 352 Data size: 39072 Basic stats: COMPLETE Column stats: COMPLETE
                  Group By Operator
                    aggregations: compute_stats(si, 'hll'), compute_stats(i, 'hll'), compute_stats(b, 'hll'), compute_stats(f, 'hll')
                    keys: ds (type: string), t (type: tinyint)
                    mode: hash
                    outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5
                    Statistics: Num rows: 129 Data size: 230523 Basic stats: COMPLETE Column stats: COMPLETE
                    Reduce Output Operator
                      key expressions: _col0 (type: string), _col1 (type: tinyint)
                      sort order: ++
                      Map-reduce partition columns: _col0 (type: string), _col1 (type: tinyint)
                      Statistics: Num rows: 129 Data size: 230523 Basic stats: COMPLETE Column stats: COMPLETE
                      value expressions: _col2 (type: struct<columntype:string,min:bigint,max:bigint,countnulls:bigint,bitvector:binary>), _col3 (type: struct<columntype:string,min:bigint,max:bigint,countnulls:bigint,bitvector:binary>), _col4 (type: struct<columntype:string,min:bigint,max:bigint,countnulls:bigint,bitvector:binary>), _col5 (type: struct<columntype:string,min:double,max:double,countnulls:bigint,bitvector:binary>)
        Reducer 3 
            Execution mode: llap
            Reduce Operator Tree:
              Group By Operator
                aggregations: compute_stats(VALUE._col0), compute_stats(VALUE._col1), compute_stats(VALUE._col2), compute_stats(VALUE._col3)
                keys: KEY._col0 (type: string), KEY._col1 (type: tinyint)
                mode: mergepartial
                outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5
                Statistics: Num rows: 128 Data size: 236928 Basic stats: COMPLETE Column stats: COMPLETE
                Select Operator
                  expressions: _col2 (type: struct<columntype:string,min:bigint,max:bigint,countnulls:bigint,numdistinctvalues:bigint,ndvbitvector:binary>), _col3 (type: struct<columntype:string,min:bigint,max:bigint,countnulls:bigint,numdistinctvalues:bigint,ndvbitvector:binary>), _col4 (type: struct<columntype:string,min:bigint,max:bigint,countnulls:bigint,numdistinctvalues:bigint,ndvbitvector:binary>), _col5 (type: struct<columntype:string,min:double,max:double,countnulls:bigint,numdistinctvalues:bigint,ndvbitvector:binary>), _col0 (type: string), _col1 (type: tinyint)
                  outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5
                  Statistics: Num rows: 128 Data size: 236928 Basic stats: COMPLETE Column stats: COMPLETE
                  File Output Operator
                    compressed: false
                    Statistics: Num rows: 128 Data size: 236928 Basic stats: COMPLETE Column stats: COMPLETE
                    table:
                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-2
    Dependency Collection

  Stage: Stage-0
    Move Operator
      tables:
          partition:
            ds foo
            t 
          replace: true
          table:
              input format: org.apache.hadoop.mapred.TextInputFormat
              output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
              serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
              name: default.over1k_part2_orc

  Stage: Stage-3
    Stats Work
      Basic Stats Work:
      Column Stats Desc:
          Columns: si, i, b, f
          Column Types: smallint, int, bigint, float
          Table: default.over1k_part2_orc

PREHOOK: query: explain insert overwrite table over1k_part2_orc partition(ds="foo",t) select si,i,b,f,t from over1k_orc where t is null or t>=27 order by i
PREHOOK: type: QUERY
PREHOOK: Input: default@over1k_orc
PREHOOK: Output: default@over1k_part2_orc@ds=foo
POSTHOOK: query: explain insert overwrite table over1k_part2_orc partition(ds="foo",t) select si,i,b,f,t from over1k_orc where t is null or t>=27 order by i
POSTHOOK: type: QUERY
POSTHOOK: Input: default@over1k_orc
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-2 depends on stages: Stage-1
  Stage-0 depends on stages: Stage-2
  Stage-3 depends on stages: Stage-0

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE)
        Reducer 3 <- Reducer 2 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: over1k_orc
                  filterExpr: (t is null or (t >= 27Y)) (type: boolean)
                  Statistics: Num rows: 1049 Data size: 25160 Basic stats: COMPLETE Column stats: COMPLETE
                  Filter Operator
                    predicate: ((t >= 27Y) or t is null) (type: boolean)
                    Statistics: Num rows: 352 Data size: 8448 Basic stats: COMPLETE Column stats: COMPLETE
                    Select Operator
                      expressions: si (type: smallint), i (type: int), b (type: bigint), f (type: float), t (type: tinyint)
                      outputColumnNames: _col0, _col1, _col2, _col3, _col4
                      Statistics: Num rows: 352 Data size: 8448 Basic stats: COMPLETE Column stats: COMPLETE
                      Reduce Output Operator
                        key expressions: _col1 (type: int)
                        sort order: +
                        Statistics: Num rows: 352 Data size: 8448 Basic stats: COMPLETE Column stats: COMPLETE
                        value expressions: _col0 (type: smallint), _col2 (type: bigint), _col3 (type: float), _col4 (type: tinyint)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Reducer 2 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Select Operator
                expressions: VALUE._col0 (type: smallint), KEY.reducesinkkey0 (type: int), VALUE._col1 (type: bigint), VALUE._col2 (type: float), VALUE._col3 (type: tinyint)
                outputColumnNames: _col0, _col1, _col2, _col3, _col4
                Statistics: Num rows: 352 Data size: 8448 Basic stats: COMPLETE Column stats: COMPLETE
                Reduce Output Operator
                  key expressions: _col4 (type: tinyint), _col1 (type: int)
                  sort order: ++
                  Map-reduce partition columns: _col4 (type: tinyint)
                  value expressions: _col0 (type: smallint), _col2 (type: bigint), _col3 (type: float)
        Reducer 3 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Select Operator
                expressions: VALUE._col0 (type: smallint), KEY._col1 (type: int), VALUE._col2 (type: bigint), VALUE._col3 (type: float), KEY._col4 (type: tinyint)
                outputColumnNames: _col0, _col1, _col2, _col3, _col4
                File Output Operator
                  compressed: false
                  Dp Sort State: PARTITION_SORTED
                  Statistics: Num rows: 352 Data size: 8448 Basic stats: COMPLETE Column stats: COMPLETE
                  table:
                      input format: org.apache.hadoop.mapred.TextInputFormat
                      output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
                      serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
                      name: default.over1k_part2_orc

  Stage: Stage-2
    Dependency Collection

  Stage: Stage-0
    Move Operator
      tables:
          partition:
            ds foo
            t 
          replace: true
          table:
              input format: org.apache.hadoop.mapred.TextInputFormat
              output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
              serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
              name: default.over1k_part2_orc

  Stage: Stage-3
    Stats Work
      Basic Stats Work:
      Column Stats Desc:
          Columns: si, i, b, f
          Column Types: smallint, int, bigint, float
          Table: default.over1k_part2_orc

PREHOOK: query: explain insert overwrite table over1k_part2_orc partition(ds="foo",t) select si,i,b,f,t from (select * from over1k_orc order by i limit 30) tmp where t is null or t>27
PREHOOK: type: QUERY
PREHOOK: Input: default@over1k_orc
PREHOOK: Output: default@over1k_part2_orc@ds=foo
POSTHOOK: query: explain insert overwrite table over1k_part2_orc partition(ds="foo",t) select si,i,b,f,t from (select * from over1k_orc order by i limit 30) tmp where t is null or t>27
POSTHOOK: type: QUERY
POSTHOOK: Input: default@over1k_orc
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-2 depends on stages: Stage-1
  Stage-0 depends on stages: Stage-2
  Stage-3 depends on stages: Stage-0

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE)
        Reducer 3 <- Reducer 2 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: over1k_orc
                  Statistics: Num rows: 1049 Data size: 25160 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: t (type: tinyint), si (type: smallint), i (type: int), b (type: bigint), f (type: float)
                    outputColumnNames: _col0, _col1, _col2, _col3, _col4
                    Statistics: Num rows: 1049 Data size: 25160 Basic stats: COMPLETE Column stats: COMPLETE
                    Reduce Output Operator
                      key expressions: _col2 (type: int)
                      sort order: +
                      Statistics: Num rows: 1049 Data size: 25160 Basic stats: COMPLETE Column stats: COMPLETE
                      value expressions: _col0 (type: tinyint), _col1 (type: smallint), _col3 (type: bigint), _col4 (type: float)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Reducer 2 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Select Operator
                expressions: VALUE._col0 (type: tinyint), VALUE._col1 (type: smallint), KEY.reducesinkkey0 (type: int), VALUE._col2 (type: bigint), VALUE._col3 (type: float)
                outputColumnNames: _col0, _col1, _col2, _col3, _col4
                Statistics: Num rows: 1049 Data size: 25160 Basic stats: COMPLETE Column stats: COMPLETE
                Limit
                  Number of rows: 30
                  Statistics: Num rows: 30 Data size: 720 Basic stats: COMPLETE Column stats: COMPLETE
                  Filter Operator
                    predicate: ((_col0 > 27Y) or _col0 is null) (type: boolean)
                    Statistics: Num rows: 10 Data size: 240 Basic stats: COMPLETE Column stats: COMPLETE
                    Select Operator
                      expressions: _col1 (type: smallint), _col2 (type: int), _col3 (type: bigint), _col4 (type: float), _col0 (type: tinyint)
                      outputColumnNames: _col0, _col1, _col2, _col3, _col4
                      Statistics: Num rows: 10 Data size: 240 Basic stats: COMPLETE Column stats: COMPLETE
                      Reduce Output Operator
                        key expressions: _col4 (type: tinyint)
                        sort order: +
                        Map-reduce partition columns: _col4 (type: tinyint)
                        value expressions: _col0 (type: smallint), _col1 (type: int), _col2 (type: bigint), _col3 (type: float)
        Reducer 3 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Select Operator
                expressions: VALUE._col0 (type: smallint), VALUE._col1 (type: int), VALUE._col2 (type: bigint), VALUE._col3 (type: float), KEY._col4 (type: tinyint)
                outputColumnNames: _col0, _col1, _col2, _col3, _col4
                File Output Operator
                  compressed: false
                  Dp Sort State: PARTITION_SORTED
                  Statistics: Num rows: 10 Data size: 240 Basic stats: COMPLETE Column stats: COMPLETE
                  table:
                      input format: org.apache.hadoop.mapred.TextInputFormat
                      output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
                      serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
                      name: default.over1k_part2_orc

  Stage: Stage-2
    Dependency Collection

  Stage: Stage-0
    Move Operator
      tables:
          partition:
            ds foo
            t 
          replace: true
          table:
              input format: org.apache.hadoop.mapred.TextInputFormat
              output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
              serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
              name: default.over1k_part2_orc

  Stage: Stage-3
    Stats Work
      Basic Stats Work:
      Column Stats Desc:
          Columns: si, i, b, f
          Column Types: smallint, int, bigint, float
          Table: default.over1k_part2_orc

PREHOOK: query: explain insert overwrite table over1k_part2_orc partition(ds="foo",t) select si,i,b,f,t from over1k_orc where t is null or t>=27 group by si,i,b,f,t
PREHOOK: type: QUERY
PREHOOK: Input: default@over1k_orc
PREHOOK: Output: default@over1k_part2_orc@ds=foo
POSTHOOK: query: explain insert overwrite table over1k_part2_orc partition(ds="foo",t) select si,i,b,f,t from over1k_orc where t is null or t>=27 group by si,i,b,f,t
POSTHOOK: type: QUERY
POSTHOOK: Input: default@over1k_orc
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-2 depends on stages: Stage-1
  Stage-0 depends on stages: Stage-2
  Stage-3 depends on stages: Stage-0

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE)
        Reducer 3 <- Reducer 2 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: over1k_orc
                  filterExpr: (t is null or (t >= 27Y)) (type: boolean)
                  Statistics: Num rows: 1049 Data size: 25160 Basic stats: COMPLETE Column stats: COMPLETE
                  Filter Operator
                    predicate: ((t >= 27Y) or t is null) (type: boolean)
                    Statistics: Num rows: 352 Data size: 8448 Basic stats: COMPLETE Column stats: COMPLETE
                    Group By Operator
                      keys: t (type: tinyint), si (type: smallint), i (type: int), b (type: bigint), f (type: float)
                      mode: hash
                      outputColumnNames: _col0, _col1, _col2, _col3, _col4
                      Statistics: Num rows: 352 Data size: 8448 Basic stats: COMPLETE Column stats: COMPLETE
                      Reduce Output Operator
                        key expressions: _col0 (type: tinyint), _col1 (type: smallint), _col2 (type: int), _col3 (type: bigint), _col4 (type: float)
                        sort order: +++++
                        Map-reduce partition columns: _col0 (type: tinyint), _col1 (type: smallint), _col2 (type: int), _col3 (type: bigint), _col4 (type: float)
                        Statistics: Num rows: 352 Data size: 8448 Basic stats: COMPLETE Column stats: COMPLETE
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Reducer 2 
            Execution mode: llap
            Reduce Operator Tree:
              Group By Operator
                keys: KEY._col0 (type: tinyint), KEY._col1 (type: smallint), KEY._col2 (type: int), KEY._col3 (type: bigint), KEY._col4 (type: float)
                mode: mergepartial
                outputColumnNames: _col0, _col1, _col2, _col3, _col4
                Statistics: Num rows: 352 Data size: 8448 Basic stats: COMPLETE Column stats: COMPLETE
                Select Operator
                  expressions: _col1 (type: smallint), _col2 (type: int), _col3 (type: bigint), _col4 (type: float), _col0 (type: tinyint)
                  outputColumnNames: _col0, _col1, _col2, _col3, _col4
                  Statistics: Num rows: 352 Data size: 8448 Basic stats: COMPLETE Column stats: COMPLETE
                  File Output Operator
                    compressed: false
                    Statistics: Num rows: 352 Data size: 8448 Basic stats: COMPLETE Column stats: COMPLETE
                    table:
                        input format: org.apache.hadoop.mapred.TextInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
                        name: default.over1k_part2_orc
                  Select Operator
                    expressions: _col0 (type: smallint), _col1 (type: int), _col2 (type: bigint), _col3 (type: float), 'foo' (type: string), _col4 (type: tinyint)
                    outputColumnNames: si, i, b, f, ds, t
                    Statistics: Num rows: 352 Data size: 39072 Basic stats: COMPLETE Column stats: COMPLETE
                    Group By Operator
                      aggregations: compute_stats(si, 'hll'), compute_stats(i, 'hll'), compute_stats(b, 'hll'), compute_stats(f, 'hll')
                      keys: ds (type: string), t (type: tinyint)
                      mode: hash
                      outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5
                      Statistics: Num rows: 129 Data size: 230523 Basic stats: COMPLETE Column stats: COMPLETE
                      Reduce Output Operator
                        key expressions: _col0 (type: string), _col1 (type: tinyint)
                        sort order: ++
                        Map-reduce partition columns: _col0 (type: string), _col1 (type: tinyint)
                        Statistics: Num rows: 129 Data size: 230523 Basic stats: COMPLETE Column stats: COMPLETE
                        value expressions: _col2 (type: struct<columntype:string,min:bigint,max:bigint,countnulls:bigint,bitvector:binary>), _col3 (type: struct<columntype:string,min:bigint,max:bigint,countnulls:bigint,bitvector:binary>), _col4 (type: struct<columntype:string,min:bigint,max:bigint,countnulls:bigint,bitvector:binary>), _col5 (type: struct<columntype:string,min:double,max:double,countnulls:bigint,bitvector:binary>)
        Reducer 3 
            Execution mode: llap
            Reduce Operator Tree:
              Group By Operator
                aggregations: compute_stats(VALUE._col0), compute_stats(VALUE._col1), compute_stats(VALUE._col2), compute_stats(VALUE._col3)
                keys: KEY._col0 (type: string), KEY._col1 (type: tinyint)
                mode: mergepartial
                outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5
                Statistics: Num rows: 128 Data size: 236928 Basic stats: COMPLETE Column stats: COMPLETE
                Select Operator
                  expressions: _col2 (type: struct<columntype:string,min:bigint,max:bigint,countnulls:bigint,numdistinctvalues:bigint,ndvbitvector:binary>), _col3 (type: struct<columntype:string,min:bigint,max:bigint,countnulls:bigint,numdistinctvalues:bigint,ndvbitvector:binary>), _col4 (type: struct<columntype:string,min:bigint,max:bigint,countnulls:bigint,numdistinctvalues:bigint,ndvbitvector:binary>), _col5 (type: struct<columntype:string,min:double,max:double,countnulls:bigint,numdistinctvalues:bigint,ndvbitvector:binary>), _col0 (type: string), _col1 (type: tinyint)
                  outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5
                  Statistics: Num rows: 128 Data size: 236928 Basic stats: COMPLETE Column stats: COMPLETE
                  File Output Operator
                    compressed: false
                    Statistics: Num rows: 128 Data size: 236928 Basic stats: COMPLETE Column stats: COMPLETE
                    table:
                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-2
    Dependency Collection

  Stage: Stage-0
    Move Operator
      tables:
          partition:
            ds foo
            t 
          replace: true
          table:
              input format: org.apache.hadoop.mapred.TextInputFormat
              output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
              serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
              name: default.over1k_part2_orc

  Stage: Stage-3
    Stats Work
      Basic Stats Work:
      Column Stats Desc:
          Columns: si, i, b, f
          Column Types: smallint, int, bigint, float
          Table: default.over1k_part2_orc

PREHOOK: query: explain insert overwrite table over1k_part2_orc partition(ds="foo",t) select si,i,b,f,t from over1k_orc where t is null or t>=27 group by si,i,b,f,t
PREHOOK: type: QUERY
PREHOOK: Input: default@over1k_orc
PREHOOK: Output: default@over1k_part2_orc@ds=foo
POSTHOOK: query: explain insert overwrite table over1k_part2_orc partition(ds="foo",t) select si,i,b,f,t from over1k_orc where t is null or t>=27 group by si,i,b,f,t
POSTHOOK: type: QUERY
POSTHOOK: Input: default@over1k_orc
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-2 depends on stages: Stage-1
  Stage-0 depends on stages: Stage-2
  Stage-3 depends on stages: Stage-0

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE)
        Reducer 3 <- Reducer 2 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: over1k_orc
                  filterExpr: (t is null or (t >= 27Y)) (type: boolean)
                  Statistics: Num rows: 1049 Data size: 25160 Basic stats: COMPLETE Column stats: COMPLETE
                  Filter Operator
                    predicate: ((t >= 27Y) or t is null) (type: boolean)
                    Statistics: Num rows: 352 Data size: 8448 Basic stats: COMPLETE Column stats: COMPLETE
                    Group By Operator
                      keys: t (type: tinyint), si (type: smallint), i (type: int), b (type: bigint), f (type: float)
                      mode: hash
                      outputColumnNames: _col0, _col1, _col2, _col3, _col4
                      Statistics: Num rows: 352 Data size: 8448 Basic stats: COMPLETE Column stats: COMPLETE
                      Reduce Output Operator
                        key expressions: _col0 (type: tinyint), _col1 (type: smallint), _col2 (type: int), _col3 (type: bigint), _col4 (type: float)
                        sort order: +++++
                        Map-reduce partition columns: _col0 (type: tinyint), _col1 (type: smallint), _col2 (type: int), _col3 (type: bigint), _col4 (type: float)
                        Statistics: Num rows: 352 Data size: 8448 Basic stats: COMPLETE Column stats: COMPLETE
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Reducer 2 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Group By Operator
                keys: KEY._col0 (type: tinyint), KEY._col1 (type: smallint), KEY._col2 (type: int), KEY._col3 (type: bigint), KEY._col4 (type: float)
                mode: mergepartial
                outputColumnNames: _col0, _col1, _col2, _col3, _col4
                Statistics: Num rows: 352 Data size: 8448 Basic stats: COMPLETE Column stats: COMPLETE
                Select Operator
                  expressions: _col1 (type: smallint), _col2 (type: int), _col3 (type: bigint), _col4 (type: float), _col0 (type: tinyint)
                  outputColumnNames: _col0, _col1, _col2, _col3, _col4
                  Statistics: Num rows: 352 Data size: 8448 Basic stats: COMPLETE Column stats: COMPLETE
                  Reduce Output Operator
                    key expressions: _col4 (type: tinyint)
                    sort order: +
                    Map-reduce partition columns: _col4 (type: tinyint)
                    value expressions: _col0 (type: smallint), _col1 (type: int), _col2 (type: bigint), _col3 (type: float)
        Reducer 3 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Select Operator
                expressions: VALUE._col0 (type: smallint), VALUE._col1 (type: int), VALUE._col2 (type: bigint), VALUE._col3 (type: float), KEY._col4 (type: tinyint)
                outputColumnNames: _col0, _col1, _col2, _col3, _col4
                File Output Operator
                  compressed: false
                  Dp Sort State: PARTITION_SORTED
                  Statistics: Num rows: 352 Data size: 8448 Basic stats: COMPLETE Column stats: COMPLETE
                  table:
                      input format: org.apache.hadoop.mapred.TextInputFormat
                      output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
                      serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
                      name: default.over1k_part2_orc

  Stage: Stage-2
    Dependency Collection

  Stage: Stage-0
    Move Operator
      tables:
          partition:
            ds foo
            t 
          replace: true
          table:
              input format: org.apache.hadoop.mapred.TextInputFormat
              output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
              serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
              name: default.over1k_part2_orc

  Stage: Stage-3
    Stats Work
      Basic Stats Work:
      Column Stats Desc:
          Columns: si, i, b, f
          Column Types: smallint, int, bigint, float
          Table: default.over1k_part2_orc

PREHOOK: query: insert overwrite table over1k_part2_orc partition(ds="foo",t) select si,i,b,f,t from over1k_orc where t is null or t>=27 order by i
PREHOOK: type: QUERY
PREHOOK: Input: default@over1k_orc
PREHOOK: Output: default@over1k_part2_orc@ds=foo
POSTHOOK: query: insert overwrite table over1k_part2_orc partition(ds="foo",t) select si,i,b,f,t from over1k_orc where t is null or t>=27 order by i
POSTHOOK: type: QUERY
POSTHOOK: Input: default@over1k_orc
POSTHOOK: Output: default@over1k_part2_orc@ds=foo/t=100
POSTHOOK: Output: default@over1k_part2_orc@ds=foo/t=101
POSTHOOK: Output: default@over1k_part2_orc@ds=foo/t=102
POSTHOOK: Output: default@over1k_part2_orc@ds=foo/t=103
POSTHOOK: Output: default@over1k_part2_orc@ds=foo/t=104
POSTHOOK: Output: default@over1k_part2_orc@ds=foo/t=105
POSTHOOK: Output: default@over1k_part2_orc@ds=foo/t=106
POSTHOOK: Output: default@over1k_part2_orc@ds=foo/t=107
POSTHOOK: Output: default@over1k_part2_orc@ds=foo/t=108
POSTHOOK: Output: default@over1k_part2_orc@ds=foo/t=109
POSTHOOK: Output: default@over1k_part2_orc@ds=foo/t=110
POSTHOOK: Output: default@over1k_part2_orc@ds=foo/t=111
POSTHOOK: Output: default@over1k_part2_orc@ds=foo/t=112
POSTHOOK: Output: default@over1k_part2_orc@ds=foo/t=113
POSTHOOK: Output: default@over1k_part2_orc@ds=foo/t=114
POSTHOOK: Output: default@over1k_part2_orc@ds=foo/t=115
POSTHOOK: Output: default@over1k_part2_orc@ds=foo/t=116
POSTHOOK: Output: default@over1k_part2_orc@ds=foo/t=117
POSTHOOK: Output: default@over1k_part2_orc@ds=foo/t=118
POSTHOOK: Output: default@over1k_part2_orc@ds=foo/t=119
POSTHOOK: Output: default@over1k_part2_orc@ds=foo/t=120
POSTHOOK: Output: default@over1k_part2_orc@ds=foo/t=121
POSTHOOK: Output: default@over1k_part2_orc@ds=foo/t=122
POSTHOOK: Output: default@over1k_part2_orc@ds=foo/t=123
POSTHOOK: Output: default@over1k_part2_orc@ds=foo/t=124
POSTHOOK: Output: default@over1k_part2_orc@ds=foo/t=27
POSTHOOK: Output: default@over1k_part2_orc@ds=foo/t=28
POSTHOOK: Output: default@over1k_part2_orc@ds=foo/t=29
POSTHOOK: Output: default@over1k_part2_orc@ds=foo/t=30
POSTHOOK: Output: default@over1k_part2_orc@ds=foo/t=31
POSTHOOK: Output: default@over1k_part2_orc@ds=foo/t=32
POSTHOOK: Output: default@over1k_part2_orc@ds=foo/t=33
POSTHOOK: Output: default@over1k_part2_orc@ds=foo/t=34
POSTHOOK: Output: default@over1k_part2_orc@ds=foo/t=35
POSTHOOK: Output: default@over1k_part2_orc@ds=foo/t=36
POSTHOOK: Output: default@over1k_part2_orc@ds=foo/t=37
POSTHOOK: Output: default@over1k_part2_orc@ds=foo/t=38
POSTHOOK: Output: default@over1k_part2_orc@ds=foo/t=39
POSTHOOK: Output: default@over1k_part2_orc@ds=foo/t=40
POSTHOOK: Output: default@over1k_part2_orc@ds=foo/t=41
POSTHOOK: Output: default@over1k_part2_orc@ds=foo/t=42
POSTHOOK: Output: default@over1k_part2_orc@ds=foo/t=43
POSTHOOK: Output: default@over1k_part2_orc@ds=foo/t=44
POSTHOOK: Output: default@over1k_part2_orc@ds=foo/t=45
POSTHOOK: Output: default@over1k_part2_orc@ds=foo/t=46
POSTHOOK: Output: default@over1k_part2_orc@ds=foo/t=47
POSTHOOK: Output: default@over1k_part2_orc@ds=foo/t=48
POSTHOOK: Output: default@over1k_part2_orc@ds=foo/t=49
POSTHOOK: Output: default@over1k_part2_orc@ds=foo/t=50
POSTHOOK: Output: default@over1k_part2_orc@ds=foo/t=51
POSTHOOK: Output: default@over1k_part2_orc@ds=foo/t=52
POSTHOOK: Output: default@over1k_part2_orc@ds=foo/t=53
POSTHOOK: Output: default@over1k_part2_orc@ds=foo/t=54
POSTHOOK: Output: default@over1k_part2_orc@ds=foo/t=55
POSTHOOK: Output: default@over1k_part2_orc@ds=foo/t=56
POSTHOOK: Output: default@over1k_part2_orc@ds=foo/t=57
POSTHOOK: Output: default@over1k_part2_orc@ds=foo/t=58
POSTHOOK: Output: default@over1k_part2_orc@ds=foo/t=59
POSTHOOK: Output: default@over1k_part2_orc@ds=foo/t=60
POSTHOOK: Output: default@over1k_part2_orc@ds=foo/t=61
POSTHOOK: Output: default@over1k_part2_orc@ds=foo/t=62
POSTHOOK: Output: default@over1k_part2_orc@ds=foo/t=63
POSTHOOK: Output: default@over1k_part2_orc@ds=foo/t=64
POSTHOOK: Output: default@over1k_part2_orc@ds=foo/t=65
POSTHOOK: Output: default@over1k_part2_orc@ds=foo/t=66
POSTHOOK: Output: default@over1k_part2_orc@ds=foo/t=67
POSTHOOK: Output: default@over1k_part2_orc@ds=foo/t=68
POSTHOOK: Output: default@over1k_part2_orc@ds=foo/t=69
POSTHOOK: Output: default@over1k_part2_orc@ds=foo/t=70
POSTHOOK: Output: default@over1k_part2_orc@ds=foo/t=71
POSTHOOK: Output: default@over1k_part2_orc@ds=foo/t=72
POSTHOOK: Output: default@over1k_part2_orc@ds=foo/t=73
POSTHOOK: Output: default@over1k_part2_orc@ds=foo/t=74
POSTHOOK: Output: default@over1k_part2_orc@ds=foo/t=75
POSTHOOK: Output: default@over1k_part2_orc@ds=foo/t=76
POSTHOOK: Output: default@over1k_part2_orc@ds=foo/t=77
POSTHOOK: Output: default@over1k_part2_orc@ds=foo/t=78
POSTHOOK: Output: default@over1k_part2_orc@ds=foo/t=79
POSTHOOK: Output: default@over1k_part2_orc@ds=foo/t=80
POSTHOOK: Output: default@over1k_part2_orc@ds=foo/t=81
POSTHOOK: Output: default@over1k_part2_orc@ds=foo/t=82
POSTHOOK: Output: default@over1k_part2_orc@ds=foo/t=83
POSTHOOK: Output: default@over1k_part2_orc@ds=foo/t=84
POSTHOOK: Output: default@over1k_part2_orc@ds=foo/t=85
POSTHOOK: Output: default@over1k_part2_orc@ds=foo/t=86
POSTHOOK: Output: default@over1k_part2_orc@ds=foo/t=87
POSTHOOK: Output: default@over1k_part2_orc@ds=foo/t=88
POSTHOOK: Output: default@over1k_part2_orc@ds=foo/t=89
POSTHOOK: Output: default@over1k_part2_orc@ds=foo/t=90
POSTHOOK: Output: default@over1k_part2_orc@ds=foo/t=91
POSTHOOK: Output: default@over1k_part2_orc@ds=foo/t=92
POSTHOOK: Output: default@over1k_part2_orc@ds=foo/t=93
POSTHOOK: Output: default@over1k_part2_orc@ds=foo/t=94
POSTHOOK: Output: default@over1k_part2_orc@ds=foo/t=95
POSTHOOK: Output: default@over1k_part2_orc@ds=foo/t=96
POSTHOOK: Output: default@over1k_part2_orc@ds=foo/t=97
POSTHOOK: Output: default@over1k_part2_orc@ds=foo/t=98
POSTHOOK: Output: default@over1k_part2_orc@ds=foo/t=99
POSTHOOK: Output: default@over1k_part2_orc@ds=foo/t=__HIVE_DEFAULT_PARTITION__
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=100).b SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:b, type:bigint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=100).f SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:f, type:float, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=100).i SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:i, type:int, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=100).si SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:si, type:smallint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=101).b SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:b, type:bigint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=101).f SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:f, type:float, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=101).i SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:i, type:int, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=101).si SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:si, type:smallint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=102).b SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:b, type:bigint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=102).f SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:f, type:float, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=102).i SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:i, type:int, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=102).si SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:si, type:smallint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=103).b SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:b, type:bigint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=103).f SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:f, type:float, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=103).i SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:i, type:int, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=103).si SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:si, type:smallint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=104).b SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:b, type:bigint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=104).f SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:f, type:float, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=104).i SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:i, type:int, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=104).si SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:si, type:smallint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=105).b SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:b, type:bigint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=105).f SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:f, type:float, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=105).i SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:i, type:int, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=105).si SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:si, type:smallint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=106).b SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:b, type:bigint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=106).f SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:f, type:float, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=106).i SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:i, type:int, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=106).si SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:si, type:smallint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=107).b SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:b, type:bigint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=107).f SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:f, type:float, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=107).i SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:i, type:int, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=107).si SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:si, type:smallint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=108).b SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:b, type:bigint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=108).f SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:f, type:float, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=108).i SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:i, type:int, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=108).si SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:si, type:smallint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=109).b SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:b, type:bigint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=109).f SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:f, type:float, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=109).i SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:i, type:int, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=109).si SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:si, type:smallint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=110).b SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:b, type:bigint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=110).f SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:f, type:float, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=110).i SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:i, type:int, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=110).si SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:si, type:smallint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=111).b SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:b, type:bigint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=111).f SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:f, type:float, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=111).i SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:i, type:int, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=111).si SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:si, type:smallint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=112).b SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:b, type:bigint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=112).f SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:f, type:float, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=112).i SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:i, type:int, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=112).si SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:si, type:smallint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=113).b SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:b, type:bigint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=113).f SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:f, type:float, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=113).i SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:i, type:int, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=113).si SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:si, type:smallint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=114).b SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:b, type:bigint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=114).f SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:f, type:float, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=114).i SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:i, type:int, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=114).si SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:si, type:smallint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=115).b SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:b, type:bigint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=115).f SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:f, type:float, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=115).i SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:i, type:int, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=115).si SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:si, type:smallint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=116).b SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:b, type:bigint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=116).f SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:f, type:float, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=116).i SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:i, type:int, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=116).si SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:si, type:smallint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=117).b SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:b, type:bigint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=117).f SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:f, type:float, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=117).i SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:i, type:int, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=117).si SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:si, type:smallint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=118).b SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:b, type:bigint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=118).f SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:f, type:float, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=118).i SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:i, type:int, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=118).si SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:si, type:smallint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=119).b SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:b, type:bigint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=119).f SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:f, type:float, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=119).i SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:i, type:int, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=119).si SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:si, type:smallint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=120).b SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:b, type:bigint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=120).f SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:f, type:float, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=120).i SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:i, type:int, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=120).si SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:si, type:smallint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=121).b SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:b, type:bigint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=121).f SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:f, type:float, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=121).i SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:i, type:int, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=121).si SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:si, type:smallint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=122).b SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:b, type:bigint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=122).f SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:f, type:float, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=122).i SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:i, type:int, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=122).si SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:si, type:smallint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=123).b SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:b, type:bigint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=123).f SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:f, type:float, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=123).i SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:i, type:int, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=123).si SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:si, type:smallint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=124).b SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:b, type:bigint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=124).f SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:f, type:float, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=124).i SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:i, type:int, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=124).si SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:si, type:smallint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=27).b SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:b, type:bigint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=27).f SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:f, type:float, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=27).i SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:i, type:int, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=27).si SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:si, type:smallint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=28).b SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:b, type:bigint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=28).f SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:f, type:float, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=28).i SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:i, type:int, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=28).si SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:si, type:smallint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=29).b SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:b, type:bigint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=29).f SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:f, type:float, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=29).i SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:i, type:int, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=29).si SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:si, type:smallint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=30).b SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:b, type:bigint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=30).f SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:f, type:float, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=30).i SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:i, type:int, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=30).si SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:si, type:smallint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=31).b SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:b, type:bigint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=31).f SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:f, type:float, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=31).i SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:i, type:int, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=31).si SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:si, type:smallint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=32).b SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:b, type:bigint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=32).f SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:f, type:float, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=32).i SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:i, type:int, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=32).si SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:si, type:smallint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=33).b SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:b, type:bigint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=33).f SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:f, type:float, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=33).i SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:i, type:int, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=33).si SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:si, type:smallint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=34).b SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:b, type:bigint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=34).f SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:f, type:float, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=34).i SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:i, type:int, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=34).si SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:si, type:smallint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=35).b SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:b, type:bigint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=35).f SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:f, type:float, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=35).i SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:i, type:int, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=35).si SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:si, type:smallint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=36).b SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:b, type:bigint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=36).f SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:f, type:float, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=36).i SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:i, type:int, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=36).si SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:si, type:smallint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=37).b SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:b, type:bigint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=37).f SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:f, type:float, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=37).i SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:i, type:int, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=37).si SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:si, type:smallint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=38).b SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:b, type:bigint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=38).f SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:f, type:float, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=38).i SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:i, type:int, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=38).si SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:si, type:smallint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=39).b SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:b, type:bigint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=39).f SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:f, type:float, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=39).i SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:i, type:int, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=39).si SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:si, type:smallint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=40).b SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:b, type:bigint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=40).f SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:f, type:float, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=40).i SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:i, type:int, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=40).si SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:si, type:smallint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=41).b SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:b, type:bigint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=41).f SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:f, type:float, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=41).i SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:i, type:int, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=41).si SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:si, type:smallint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=42).b SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:b, type:bigint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=42).f SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:f, type:float, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=42).i SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:i, type:int, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=42).si SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:si, type:smallint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=43).b SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:b, type:bigint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=43).f SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:f, type:float, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=43).i SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:i, type:int, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=43).si SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:si, type:smallint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=44).b SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:b, type:bigint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=44).f SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:f, type:float, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=44).i SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:i, type:int, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=44).si SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:si, type:smallint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=45).b SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:b, type:bigint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=45).f SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:f, type:float, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=45).i SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:i, type:int, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=45).si SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:si, type:smallint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=46).b SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:b, type:bigint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=46).f SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:f, type:float, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=46).i SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:i, type:int, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=46).si SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:si, type:smallint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=47).b SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:b, type:bigint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=47).f SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:f, type:float, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=47).i SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:i, type:int, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=47).si SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:si, type:smallint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=48).b SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:b, type:bigint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=48).f SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:f, type:float, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=48).i SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:i, type:int, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=48).si SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:si, type:smallint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=49).b SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:b, type:bigint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=49).f SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:f, type:float, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=49).i SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:i, type:int, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=49).si SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:si, type:smallint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=50).b SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:b, type:bigint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=50).f SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:f, type:float, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=50).i SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:i, type:int, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=50).si SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:si, type:smallint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=51).b SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:b, type:bigint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=51).f SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:f, type:float, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=51).i SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:i, type:int, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=51).si SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:si, type:smallint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=52).b SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:b, type:bigint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=52).f SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:f, type:float, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=52).i SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:i, type:int, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=52).si SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:si, type:smallint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=53).b SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:b, type:bigint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=53).f SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:f, type:float, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=53).i SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:i, type:int, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=53).si SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:si, type:smallint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=54).b SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:b, type:bigint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=54).f SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:f, type:float, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=54).i SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:i, type:int, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=54).si SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:si, type:smallint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=55).b SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:b, type:bigint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=55).f SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:f, type:float, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=55).i SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:i, type:int, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=55).si SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:si, type:smallint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=56).b SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:b, type:bigint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=56).f SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:f, type:float, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=56).i SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:i, type:int, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=56).si SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:si, type:smallint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=57).b SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:b, type:bigint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=57).f SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:f, type:float, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=57).i SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:i, type:int, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=57).si SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:si, type:smallint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=58).b SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:b, type:bigint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=58).f SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:f, type:float, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=58).i SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:i, type:int, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=58).si SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:si, type:smallint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=59).b SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:b, type:bigint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=59).f SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:f, type:float, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=59).i SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:i, type:int, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=59).si SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:si, type:smallint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=60).b SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:b, type:bigint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=60).f SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:f, type:float, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=60).i SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:i, type:int, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=60).si SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:si, type:smallint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=61).b SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:b, type:bigint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=61).f SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:f, type:float, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=61).i SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:i, type:int, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=61).si SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:si, type:smallint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=62).b SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:b, type:bigint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=62).f SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:f, type:float, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=62).i SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:i, type:int, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=62).si SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:si, type:smallint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=63).b SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:b, type:bigint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=63).f SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:f, type:float, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=63).i SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:i, type:int, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=63).si SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:si, type:smallint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=64).b SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:b, type:bigint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=64).f SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:f, type:float, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=64).i SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:i, type:int, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=64).si SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:si, type:smallint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=65).b SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:b, type:bigint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=65).f SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:f, type:float, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=65).i SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:i, type:int, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=65).si SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:si, type:smallint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=66).b SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:b, type:bigint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=66).f SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:f, type:float, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=66).i SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:i, type:int, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=66).si SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:si, type:smallint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=67).b SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:b, type:bigint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=67).f SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:f, type:float, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=67).i SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:i, type:int, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=67).si SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:si, type:smallint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=68).b SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:b, type:bigint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=68).f SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:f, type:float, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=68).i SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:i, type:int, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=68).si SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:si, type:smallint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=69).b SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:b, type:bigint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=69).f SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:f, type:float, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=69).i SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:i, type:int, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=69).si SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:si, type:smallint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=70).b SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:b, type:bigint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=70).f SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:f, type:float, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=70).i SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:i, type:int, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=70).si SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:si, type:smallint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=71).b SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:b, type:bigint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=71).f SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:f, type:float, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=71).i SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:i, type:int, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=71).si SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:si, type:smallint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=72).b SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:b, type:bigint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=72).f SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:f, type:float, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=72).i SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:i, type:int, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=72).si SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:si, type:smallint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=73).b SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:b, type:bigint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=73).f SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:f, type:float, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=73).i SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:i, type:int, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=73).si SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:si, type:smallint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=74).b SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:b, type:bigint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=74).f SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:f, type:float, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=74).i SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:i, type:int, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=74).si SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:si, type:smallint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=75).b SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:b, type:bigint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=75).f SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:f, type:float, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=75).i SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:i, type:int, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=75).si SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:si, type:smallint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=76).b SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:b, type:bigint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=76).f SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:f, type:float, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=76).i SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:i, type:int, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=76).si SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:si, type:smallint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=77).b SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:b, type:bigint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=77).f SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:f, type:float, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=77).i SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:i, type:int, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=77).si SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:si, type:smallint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=78).b SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:b, type:bigint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=78).f SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:f, type:float, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=78).i SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:i, type:int, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=78).si SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:si, type:smallint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=79).b SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:b, type:bigint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=79).f SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:f, type:float, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=79).i SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:i, type:int, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=79).si SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:si, type:smallint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=80).b SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:b, type:bigint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=80).f SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:f, type:float, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=80).i SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:i, type:int, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=80).si SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:si, type:smallint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=81).b SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:b, type:bigint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=81).f SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:f, type:float, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=81).i SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:i, type:int, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=81).si SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:si, type:smallint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=82).b SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:b, type:bigint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=82).f SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:f, type:float, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=82).i SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:i, type:int, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=82).si SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:si, type:smallint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=83).b SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:b, type:bigint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=83).f SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:f, type:float, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=83).i SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:i, type:int, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=83).si SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:si, type:smallint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=84).b SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:b, type:bigint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=84).f SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:f, type:float, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=84).i SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:i, type:int, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=84).si SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:si, type:smallint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=85).b SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:b, type:bigint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=85).f SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:f, type:float, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=85).i SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:i, type:int, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=85).si SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:si, type:smallint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=86).b SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:b, type:bigint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=86).f SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:f, type:float, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=86).i SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:i, type:int, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=86).si SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:si, type:smallint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=87).b SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:b, type:bigint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=87).f SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:f, type:float, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=87).i SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:i, type:int, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=87).si SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:si, type:smallint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=88).b SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:b, type:bigint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=88).f SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:f, type:float, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=88).i SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:i, type:int, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=88).si SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:si, type:smallint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=89).b SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:b, type:bigint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=89).f SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:f, type:float, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=89).i SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:i, type:int, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=89).si SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:si, type:smallint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=90).b SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:b, type:bigint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=90).f SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:f, type:float, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=90).i SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:i, type:int, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=90).si SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:si, type:smallint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=91).b SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:b, type:bigint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=91).f SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:f, type:float, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=91).i SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:i, type:int, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=91).si SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:si, type:smallint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=92).b SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:b, type:bigint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=92).f SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:f, type:float, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=92).i SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:i, type:int, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=92).si SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:si, type:smallint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=93).b SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:b, type:bigint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=93).f SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:f, type:float, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=93).i SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:i, type:int, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=93).si SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:si, type:smallint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=94).b SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:b, type:bigint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=94).f SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:f, type:float, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=94).i SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:i, type:int, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=94).si SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:si, type:smallint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=95).b SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:b, type:bigint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=95).f SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:f, type:float, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=95).i SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:i, type:int, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=95).si SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:si, type:smallint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=96).b SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:b, type:bigint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=96).f SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:f, type:float, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=96).i SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:i, type:int, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=96).si SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:si, type:smallint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=97).b SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:b, type:bigint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=97).f SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:f, type:float, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=97).i SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:i, type:int, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=97).si SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:si, type:smallint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=98).b SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:b, type:bigint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=98).f SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:f, type:float, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=98).i SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:i, type:int, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=98).si SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:si, type:smallint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=99).b SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:b, type:bigint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=99).f SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:f, type:float, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=99).i SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:i, type:int, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=99).si SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:si, type:smallint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=__HIVE_DEFAULT_PARTITION__).b SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:b, type:bigint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=__HIVE_DEFAULT_PARTITION__).f SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:f, type:float, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=__HIVE_DEFAULT_PARTITION__).i SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:i, type:int, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=__HIVE_DEFAULT_PARTITION__).si SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:si, type:smallint, comment:null), ]
PREHOOK: query: desc formatted over1k_part2_orc partition(ds="foo",t=27)
PREHOOK: type: DESCTABLE
PREHOOK: Input: default@over1k_part2_orc
POSTHOOK: query: desc formatted over1k_part2_orc partition(ds="foo",t=27)
POSTHOOK: type: DESCTABLE
POSTHOOK: Input: default@over1k_part2_orc
# col_name            	data_type           	comment             
si                  	smallint            	                    
i                   	int                 	                    
b                   	bigint              	                    
f                   	float               	                    
	 	 
# Partition Information	 	 
# col_name            	data_type           	comment             
ds                  	string              	                    
t                   	tinyint             	                    
	 	 
# Detailed Partition Information	 	 
Partition Value:    	[foo, 27]           	 
Database:           	default             	 
Table:              	over1k_part2_orc    	 
#### A masked pattern was here ####
Partition Parameters:	 	 
	COLUMN_STATS_ACCURATE	{\"BASIC_STATS\":\"true\",\"COLUMN_STATS\":{\"b\":\"true\",\"f\":\"true\",\"i\":\"true\",\"si\":\"true\"}}
	numFiles            	1                   
	numRows             	16                  
	rawDataSize         	415                 
	totalSize           	431                 
#### A masked pattern was here ####
	 	 
# Storage Information	 	 
SerDe Library:      	org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe	 
InputFormat:        	org.apache.hadoop.mapred.TextInputFormat	 
OutputFormat:       	org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat	 
Compressed:         	No                  	 
Num Buckets:        	-1                  	 
Bucket Columns:     	[]                  	 
Sort Columns:       	[]                  	 
Storage Desc Params:	 	 
	serialization.format	1                   
PREHOOK: query: desc formatted over1k_part2_orc partition(ds="foo",t="__HIVE_DEFAULT_PARTITION__")
PREHOOK: type: DESCTABLE
PREHOOK: Input: default@over1k_part2_orc
POSTHOOK: query: desc formatted over1k_part2_orc partition(ds="foo",t="__HIVE_DEFAULT_PARTITION__")
POSTHOOK: type: DESCTABLE
POSTHOOK: Input: default@over1k_part2_orc
# col_name            	data_type           	comment             
si                  	smallint            	                    
i                   	int                 	                    
b                   	bigint              	                    
f                   	float               	                    
	 	 
# Partition Information	 	 
# col_name            	data_type           	comment             
ds                  	string              	                    
t                   	tinyint             	                    
	 	 
# Detailed Partition Information	 	 
Partition Value:    	[foo, __HIVE_DEFAULT_PARTITION__]	 
Database:           	default             	 
Table:              	over1k_part2_orc    	 
#### A masked pattern was here ####
Partition Parameters:	 	 
	COLUMN_STATS_ACCURATE	{\"BASIC_STATS\":\"true\",\"COLUMN_STATS\":{\"b\":\"true\",\"f\":\"true\",\"i\":\"true\",\"si\":\"true\"}}
	numFiles            	1                   
	numRows             	3                   
	rawDataSize         	78                  
	totalSize           	81                  
#### A masked pattern was here ####
	 	 
# Storage Information	 	 
SerDe Library:      	org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe	 
InputFormat:        	org.apache.hadoop.mapred.TextInputFormat	 
OutputFormat:       	org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat	 
Compressed:         	No                  	 
Num Buckets:        	-1                  	 
Bucket Columns:     	[]                  	 
Sort Columns:       	[]                  	 
Storage Desc Params:	 	 
	serialization.format	1                   
PREHOOK: query: select * from over1k_part2_orc
PREHOOK: type: QUERY
PREHOOK: Input: default@over1k_part2_orc
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=100
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=101
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=102
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=103
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=104
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=105
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=106
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=107
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=108
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=109
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=110
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=111
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=112
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=113
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=114
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=115
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=116
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=117
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=118
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=119
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=120
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=121
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=122
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=123
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=124
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=27
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=28
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=29
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=30
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=31
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=32
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=33
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=34
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=35
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=36
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=37
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=38
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=39
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=40
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=41
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=42
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=43
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=44
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=45
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=46
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=47
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=48
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=49
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=50
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=51
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=52
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=53
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=54
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=55
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=56
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=57
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=58
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=59
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=60
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=61
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=62
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=63
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=64
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=65
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=66
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=67
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=68
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=69
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=70
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=71
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=72
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=73
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=74
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=75
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=76
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=77
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=78
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=79
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=80
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=81
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=82
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=83
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=84
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=85
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=86
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=87
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=88
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=89
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=90
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=91
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=92
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=93
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=94
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=95
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=96
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=97
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=98
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=99
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=__HIVE_DEFAULT_PARTITION__
#### A masked pattern was here ####
POSTHOOK: query: select * from over1k_part2_orc
POSTHOOK: type: QUERY
POSTHOOK: Input: default@over1k_part2_orc
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=100
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=101
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=102
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=103
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=104
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=105
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=106
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=107
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=108
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=109
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=110
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=111
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=112
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=113
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=114
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=115
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=116
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=117
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=118
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=119
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=120
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=121
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=122
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=123
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=124
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=27
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=28
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=29
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=30
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=31
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=32
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=33
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=34
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=35
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=36
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=37
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=38
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=39
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=40
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=41
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=42
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=43
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=44
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=45
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=46
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=47
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=48
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=49
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=50
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=51
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=52
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=53
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=54
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=55
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=56
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=57
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=58
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=59
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=60
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=61
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=62
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=63
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=64
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=65
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=66
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=67
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=68
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=69
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=70
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=71
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=72
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=73
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=74
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=75
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=76
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=77
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=78
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=79
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=80
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=81
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=82
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=83
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=84
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=85
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=86
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=87
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=88
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=89
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=90
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=91
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=92
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=93
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=94
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=95
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=96
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=97
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=98
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=99
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=__HIVE_DEFAULT_PARTITION__
#### A masked pattern was here ####
413	65547	4294967303	53.18	foo	100
430	65570	4294967431	50.31	foo	100
264	65637	4294967340	85.0	foo	100
354	65649	4294967358	7.54	foo	100
310	65657	4294967393	20.67	foo	100
391	65661	4294967317	52.72	foo	100
481	65750	4294967308	21.19	foo	100
492	65778	4294967379	13.35	foo	100
283	65538	4294967527	84.03	foo	101
326	65586	4294967435	30.81	foo	101
476	65631	4294967538	29.78	foo	101
487	65676	4294967367	85.87	foo	101
327	65706	4294967340	71.54	foo	101
282	65738	4294967432	93.61	foo	101
315	65749	4294967519	85.14	foo	101
317	65756	4294967505	4.8	foo	101
259	65757	4294967550	82.97	foo	101
259	65759	4294967383	79.96	foo	101
359	65560	4294967482	93.03	foo	102
501	65710	4294967332	47.27	foo	102
436	65749	4294967542	68.89	foo	102
411	65579	4294967521	22.25	foo	103
430	65591	4294967344	75.03	foo	103
310	65603	4294967475	44.1	foo	103
430	65642	4294967347	84.23	foo	103
494	65760	4294967301	59.21	foo	103
504	65768	4294967354	53.93	foo	103
343	65773	4294967485	46.8	foo	103
454	65579	4294967467	54.44	foo	104
472	65620	4294967548	22.08	foo	104
448	65693	4294967459	80.92	foo	104
266	65704	4294967413	59.16	foo	104
331	65757	4294967330	30.71	foo	104
415	65758	4294967454	66.17	foo	104
474	65773	4294967473	40.98	foo	104
299	65791	4294967424	34.03	foo	104
345	65582	4294967478	12.42	foo	105
376	65602	4294967472	10.67	foo	105
438	65623	4294967501	39.69	foo	105
435	65637	4294967534	80.23	foo	105
326	65673	4294967440	4.59	foo	105
509	65716	4294967308	22.94	foo	105
478	65790	4294967302	88.05	foo	105
456	65548	4294967484	37.9	foo	106
446	65613	4294967369	48.45	foo	106
284	65619	4294967527	92.96	foo	106
482	65624	4294967446	45.45	foo	106
370	65625	4294967333	3.0	foo	106
415	65644	4294967399	63.35	foo	106
282	65688	4294967433	75.19	foo	106
502	65695	4294967501	83.92	foo	106
441	65771	4294967386	83.93	foo	106
318	65789	4294967381	1.02	foo	106
278	65550	4294967432	83.08	foo	107
421	65595	4294967543	57.11	foo	107
271	65601	4294967456	8.57	foo	107
271	65652	4294967329	38.3	foo	107
466	65691	4294967302	9.68	foo	107
313	65699	4294967493	9.25	foo	107
301	65536	4294967357	90.05	foo	108
476	65587	4294967306	2.96	foo	108
466	65600	4294967458	90.73	foo	108
478	65712	4294967522	46.43	foo	108
391	65717	4294967336	43.71	foo	108
385	65730	4294967387	65.44	foo	108
446	65733	4294967403	7.11	foo	108
280	65765	4294967434	4.79	foo	108
263	65787	4294967297	12.44	foo	108
376	65538	4294967453	59.61	foo	109
344	65595	4294967409	42.24	foo	109
427	65626	4294967308	98.72	foo	109
306	65643	4294967323	79.54	foo	109
275	65651	4294967393	96.94	foo	109
283	65675	4294967429	88.91	foo	109
319	65734	4294967387	52.23	foo	109
438	65779	4294967371	67.18	foo	109
306	65571	4294967419	43.01	foo	110
261	65600	4294967428	75.83	foo	110
279	65604	4294967344	92.33	foo	110
346	65693	4294967505	67.12	foo	110
344	65759	4294967464	27.31	foo	110
287	65587	4294967421	48.22	foo	111
486	65620	4294967357	22.36	foo	111
372	65656	4294967312	13.01	foo	111
317	65703	4294967297	38.05	foo	111
349	65740	4294967400	17.37	foo	111
288	65770	4294967544	80.84	foo	111
453	65586	4294967540	42.76	foo	112
348	65643	4294967388	30.61	foo	112
295	65662	4294967517	65.62	foo	112
373	65680	4294967449	90.28	foo	112
312	65685	4294967395	33.76	foo	112
316	65719	4294967473	51.79	foo	112
444	65721	4294967401	47.88	foo	112
372	65722	4294967529	41.44	foo	112
383	65578	4294967358	43.16	foo	113
445	65658	4294967530	4.32	foo	113
361	65660	4294967516	23.17	foo	113
395	65666	4294967447	26.49	foo	113
302	65721	4294967526	96.68	foo	113
385	65541	4294967458	73.48	foo	114
454	65542	4294967443	64.67	foo	114
279	65544	4294967383	6.67	foo	114
384	65549	4294967361	55.39	foo	114
433	65572	4294967463	43.02	foo	114
507	65576	4294967517	15.18	foo	114
410	65578	4294967363	94.34	foo	114
271	65581	4294967520	61.88	foo	114
402	65622	4294967542	59.87	foo	114
304	65643	4294967457	54.75	foo	114
279	65657	4294967339	54.73	foo	114
503	65677	4294967534	64.22	foo	114
427	65712	4294967419	32.47	foo	114
499	65724	4294967334	42.51	foo	114
425	65772	4294967307	55.1	foo	114
327	65607	4294967391	28.79	foo	115
269	65627	4294967362	91.42	foo	115
276	65632	4294967457	90.69	foo	115
281	65651	4294967434	80.46	foo	115
334	65653	4294967435	46.45	foo	115
502	65773	4294967522	37.59	foo	115
482	65550	4294967489	5.85	foo	116
485	65575	4294967296	95.84	foo	116
487	65659	4294967309	77.66	foo	116
444	65659	4294967329	59.62	foo	116
351	65771	4294967470	48.59	foo	116
396	65778	4294967515	30.65	foo	116
307	65785	4294967434	72.18	foo	116
396	65541	4294967434	74.78	foo	117
276	65581	4294967457	69.8	foo	117
341	65588	4294967496	51.29	foo	117
302	65615	4294967382	21.32	foo	117
346	65619	4294967321	78.73	foo	117
483	65627	4294967547	21.18	foo	117
267	65637	4294967544	93.64	foo	117
323	65669	4294967316	90.25	foo	117
311	65691	4294967335	24.28	foo	117
474	65729	4294967333	68.22	foo	117
400	65755	4294967399	91.48	foo	117
497	65536	4294967381	50.32	foo	118
374	65541	4294967528	6.72	foo	118
309	65578	4294967357	75.1	foo	118
334	65586	4294967525	38.79	foo	118
467	65632	4294967296	41.36	foo	118
292	65637	4294967403	49.68	foo	118
282	65644	4294967407	67.59	foo	118
486	65651	4294967472	32.23	foo	118
399	65730	4294967309	0.52	foo	118
497	65738	4294967546	19.14	foo	118
390	65544	4294967411	41.31	foo	119
427	65553	4294967319	95.53	foo	119
421	65580	4294967480	27.87	foo	119
280	65615	4294967457	94.72	foo	119
316	65646	4294967405	46.27	foo	119
310	65679	4294967319	14.21	foo	119
373	65704	4294967459	27.07	foo	119
278	65773	4294967488	31.15	foo	119
331	65539	4294967324	88.02	foo	120
294	65590	4294967443	90.07	foo	120
497	65595	4294967442	45.56	foo	120
406	65610	4294967538	59.99	foo	120
285	65649	4294967355	35.56	foo	120
413	65650	4294967543	48.25	foo	120
445	65670	4294967344	98.23	foo	120
273	65724	4294967477	94.15	foo	120
325	65758	4294967540	79.19	foo	120
298	65763	4294967513	3.33	foo	120
355	65537	4294967437	85.9	foo	121
342	65565	4294967528	52.85	foo	121
330	65755	4294967380	64.36	foo	121
449	65776	4294967327	60.6	foo	121
401	65779	4294967375	29.24	foo	121
396	65550	4294967350	60.02	foo	122
384	65578	4294967358	8.45	foo	122
392	65619	4294967527	20.81	foo	122
473	65629	4294967387	90.77	foo	122
444	65675	4294967500	72.62	foo	122
288	65695	4294967469	90.05	foo	122
354	65709	4294967334	74.45	foo	122
428	65715	4294967520	35.72	foo	122
449	65751	4294967548	81.66	foo	122
356	65759	4294967379	92.61	foo	122
278	65573	4294967496	86.22	foo	123
299	65606	4294967525	99.36	foo	123
499	65623	4294967521	43.37	foo	123
419	65654	4294967442	97.87	foo	123
477	65699	4294967340	1.21	foo	123
381	65780	4294967388	5.44	foo	123
439	65781	4294967448	15.86	foo	123
284	65783	4294967301	60.26	foo	123
310	65548	4294967319	58.66	foo	124
495	65549	4294967471	99.21	foo	124
336	65664	4294967435	74.72	foo	124
311	65670	4294967420	87.94	foo	124
371	65687	4294967489	79.55	foo	124
384	65697	4294967426	15.3	foo	124
392	65711	4294967498	15.37	foo	124
421	65743	4294967434	3.62	foo	124
405	65536	4294967508	82.24	foo	27
457	65570	4294967464	81.58	foo	27
256	65599	4294967383	89.55	foo	27
335	65617	4294967381	64.87	foo	27
261	65619	4294967401	88.78	foo	27
278	65622	4294967516	25.67	foo	27
482	65624	4294967313	78.98	foo	27
503	65628	4294967371	95.07	foo	27
335	65636	4294967505	37.14	foo	27
367	65675	4294967518	12.32	foo	27
340	65677	4294967461	98.96	foo	27
490	65680	4294967347	57.46	foo	27
287	65708	4294967542	83.33	foo	27
329	65778	4294967451	6.63	foo	27
401	65779	4294967402	97.39	foo	27
262	65787	4294967371	57.35	foo	27
259	65544	4294967398	54.31	foo	28
427	65559	4294967370	39.03	foo	28
372	65578	4294967374	75.42	foo	28
307	65606	4294967389	95.34	foo	28
454	65612	4294967480	65.02	foo	28
443	65635	4294967426	97.68	foo	28
480	65637	4294967328	76.69	foo	28
428	65650	4294967320	85.76	foo	28
302	65653	4294967388	50.4	foo	28
378	65678	4294967355	68.32	foo	28
485	65694	4294967534	79.48	foo	28
349	65711	4294967458	84.69	foo	28
380	65714	4294967514	0.28	foo	28
418	65756	4294967451	27.12	foo	28
294	65756	4294967487	76.74	foo	28
331	65539	4294967420	73.18	foo	29
449	65596	4294967490	58.67	foo	29
374	65696	4294967481	13.87	foo	29
441	65721	4294967456	40.17	foo	30
294	65779	4294967482	36.58	foo	30
366	65557	4294967458	41.71	foo	31
493	65562	4294967428	38.94	foo	31
459	65595	4294967413	40.0	foo	31
426	65602	4294967543	24.79	foo	31
432	65607	4294967497	40.8	foo	31
461	65608	4294967349	61.92	foo	31
278	65634	4294967511	50.41	foo	31
457	65656	4294967394	29.36	foo	31
351	65669	4294967441	95.38	foo	31
281	65681	4294967368	86.0	foo	31
474	65682	4294967551	30.63	foo	31
356	65721	4294967481	1.08	foo	31
382	65737	4294967301	58.09	foo	31
426	65789	4294967526	58.13	foo	31
467	65547	4294967502	67.94	foo	32
506	65551	4294967375	19.13	foo	32
264	65606	4294967487	66.17	foo	32
490	65658	4294967541	62.23	foo	32
348	65747	4294967514	37.85	foo	32
400	65753	4294967360	35.13	foo	32
458	65783	4294967309	45.42	foo	32
321	65594	4294967495	97.71	foo	33
508	65600	4294967372	12.02	foo	33
497	65612	4294967375	28.69	foo	33
319	65617	4294967431	64.65	foo	33
285	65689	4294967355	97.83	foo	33
430	65694	4294967346	48.37	foo	33
265	65713	4294967529	86.69	foo	33
258	65762	4294967417	15.22	foo	33
459	65783	4294967300	10.29	foo	33
324	65549	4294967307	17.16	foo	34
264	65564	4294967437	31.77	foo	34
450	65607	4294967328	18.2	foo	34
322	65659	4294967353	78.62	foo	34
425	65660	4294967371	58.43	foo	34
439	65667	4294967480	26.49	foo	34
405	65719	4294967306	1.31	foo	34
398	65731	4294967546	66.61	foo	34
379	65750	4294967441	98.18	foo	34
475	65574	4294967455	60.13	foo	35
387	65619	4294967459	96.91	foo	35
500	65641	4294967469	68.85	foo	35
463	65646	4294967363	50.83	foo	35
423	65667	4294967507	65.43	foo	35
290	65726	4294967434	18.63	foo	35
488	65737	4294967502	62.52	foo	35
451	65763	4294967498	33.83	foo	35
409	65777	4294967422	93.09	foo	35
280	65779	4294967322	1.87	foo	35
460	65541	4294967365	55.99	foo	36
377	65697	4294967444	98.51	foo	36
274	65705	4294967514	70.52	foo	36
350	65717	4294967481	92.98	foo	36
429	65723	4294967296	67.45	foo	36
273	65739	4294967416	1.25	foo	36
309	65769	4294967317	91.16	foo	36
472	65545	4294967351	83.54	foo	37
503	65562	4294967358	44.22	foo	37
445	65612	4294967444	92.11	foo	37
434	65638	4294967335	55.18	foo	37
411	65680	4294967353	2.92	foo	37
317	65684	4294967499	23.13	foo	37
379	65737	4294967314	88.17	foo	37
293	65762	4294967316	67.38	foo	37
336	65556	4294967482	14.84	foo	38
308	65559	4294967465	95.81	foo	38
318	65560	4294967354	43.73	foo	38
351	65567	4294967316	22.78	foo	38
290	65628	4294967473	56.07	foo	38
291	65634	4294967438	83.57	foo	38
384	65667	4294967539	81.32	foo	38
376	65783	4294967507	10.19	foo	38
493	65788	4294967427	60.85	foo	38
368	65590	4294967420	27.72	foo	39
340	65650	4294967365	22.12	foo	39
492	65701	4294967458	23.96	foo	39
496	65640	4294967513	93.73	foo	40
442	65659	4294967379	50.08	foo	40
500	65664	4294967428	16.25	foo	40
432	65691	4294967547	24.86	foo	40
331	65705	4294967470	91.78	foo	40
299	65712	4294967352	25.37	foo	40
465	65713	4294967408	50.09	foo	40
338	65618	4294967304	45.68	foo	41
360	65643	4294967488	76.28	foo	41
453	65677	4294967371	76.1	foo	41
275	65694	4294967503	1.91	foo	41
301	65706	4294967501	51.84	foo	41
329	65717	4294967463	30.36	foo	41
266	65774	4294967365	41.68	foo	41
334	65776	4294967432	71.89	foo	41
495	65536	4294967431	43.57	foo	42
342	65628	4294967436	9.48	foo	42
323	65629	4294967324	8.45	foo	42
353	65672	4294967465	70.04	foo	42
345	65676	4294967447	14.92	foo	42
498	65687	4294967352	42.85	foo	42
368	65701	4294967410	35.68	foo	42
315	65713	4294967544	88.48	foo	42
338	65719	4294967488	87.99	foo	42
315	65782	4294967369	4.46	foo	42
333	65549	4294967331	11.22	foo	43
476	65570	4294967398	1.12	foo	43
305	65572	4294967511	36.7	foo	43
379	65616	4294967348	46.15	foo	43
418	65646	4294967385	43.92	foo	43
503	65650	4294967482	96.38	foo	43
340	65669	4294967500	23.19	foo	43
281	65676	4294967540	87.14	foo	43
436	65678	4294967424	50.92	foo	43
461	65686	4294967544	20.82	foo	43
440	65693	4294967409	38.05	foo	43
473	65697	4294967457	79.97	foo	43
357	65542	4294967373	31.91	foo	44
364	65614	4294967413	4.35	foo	44
452	65645	4294967345	56.15	foo	44
330	65647	4294967339	39.34	foo	44
398	65691	4294967393	26.71	foo	44
386	65692	4294967434	0.84	foo	44
460	65693	4294967423	58.0	foo	44
390	65693	4294967504	1.29	foo	44
437	65721	4294967376	22.27	foo	44
260	65727	4294967453	60.53	foo	44
465	65744	4294967391	27.3	foo	44
270	65751	4294967301	67.48	foo	44
475	65776	4294967510	89.55	foo	44
459	65565	4294967507	6.55	foo	45
408	65577	4294967461	59.43	foo	45
394	65586	4294967391	63.33	foo	45
433	65672	4294967506	85.03	foo	45
423	65673	4294967447	11.55	foo	45
401	65680	4294967303	32.41	foo	45
298	65747	4294967434	15.15	foo	45
357	65755	4294967485	94.25	foo	45
292	65769	4294967336	32.01	foo	45
377	65786	4294967364	92.37	foo	45
303	65562	4294967402	96.29	foo	46
463	65622	4294967479	23.44	foo	46
480	65649	4294967458	86.23	foo	46
319	65683	4294967549	94.33	foo	46
360	65702	4294967541	46.21	foo	46
410	65721	4294967362	80.3	foo	46
363	65735	4294967537	72.79	foo	46
485	65739	4294967519	9.19	foo	46
266	65762	4294967305	2.97	foo	46
386	65790	4294967507	52.73	foo	46
291	65615	4294967402	37.14	foo	47
306	65636	4294967524	54.1	foo	47
463	65751	4294967525	71.68	foo	47
375	65775	4294967465	70.56	foo	47
328	65784	4294967411	94.08	foo	47
511	65561	4294967547	8.45	foo	48
438	65575	4294967376	25.42	foo	48
328	65594	4294967366	59.07	foo	48
491	65669	4294967492	63.51	foo	48
443	65675	4294967322	57.67	foo	48
501	65720	4294967525	2.79	foo	48
498	65774	4294967431	59.71	foo	48
459	65777	4294967312	76.72	foo	48
329	65788	4294967378	30.25	foo	48
291	65548	4294967403	77.02	foo	49
388	65574	4294967407	27.63	foo	49
345	65614	4294967318	50.02	foo	49
407	65639	4294967362	27.66	foo	49
271	65735	4294967454	59.83	foo	49
448	65742	4294967470	82.34	foo	49
349	65747	4294967306	84.4	foo	49
307	65596	4294967300	80.6	foo	50
478	65599	4294967338	77.81	foo	50
290	65630	4294967304	10.2	foo	50
338	65634	4294967463	85.23	foo	50
316	65654	4294967488	9.81	foo	50
367	65663	4294967405	11.18	foo	50
346	65673	4294967549	55.51	foo	50
317	65709	4294967379	68.5	foo	50
405	65715	4294967538	79.12	foo	50
409	65738	4294967535	28.56	foo	50
402	65781	4294967410	65.38	foo	50
434	65549	4294967449	3.96	foo	51
495	65554	4294967347	94.27	foo	51
345	65566	4294967519	70.38	foo	51
377	65626	4294967479	1.27	foo	51
265	65626	4294967521	94.38	foo	51
484	65635	4294967500	2.18	foo	51
459	65641	4294967380	5.45	foo	51
444	65662	4294967539	42.48	foo	51
334	65670	4294967369	70.24	foo	51
362	65677	4294967445	63.42	foo	51
398	65687	4294967304	30.37	foo	51
390	65709	4294967548	29.59	foo	51
295	65716	4294967433	16.24	foo	51
445	65761	4294967423	10.6	foo	51
258	65781	4294967391	1.92	foo	51
447	65791	4294967354	28.95	foo	51
511	65658	4294967432	7.96	foo	52
365	65691	4294967551	99.15	foo	52
279	65541	4294967441	77.97	foo	53
466	65545	4294967514	94.66	foo	53
371	65603	4294967303	51.29	foo	53
315	65607	4294967496	1.58	foo	53
311	65650	4294967299	48.11	foo	53
274	65658	4294967545	95.28	foo	53
435	65687	4294967451	76.7	foo	53
373	65691	4294967371	79.75	foo	53
317	65702	4294967398	35.17	foo	53
467	65718	4294967355	11.15	foo	53
464	65720	4294967413	26.39	foo	53
482	65736	4294967394	74.59	foo	53
489	65752	4294967329	83.27	foo	53
293	65778	4294967418	16.09	foo	53
422	65784	4294967450	56.04	foo	53
257	65790	4294967425	9.26	foo	53
317	65547	4294967409	60.71	foo	54
478	65615	4294967344	9.74	foo	54
327	65657	4294967334	42.42	foo	54
463	65701	4294967313	43.31	foo	54
501	65722	4294967336	42.67	foo	54
321	65724	4294967486	47.69	foo	54
346	65751	4294967398	98.31	foo	54
481	65755	4294967429	28.5	foo	54
341	65756	4294967522	1.08	foo	54
325	65594	4294967337	7.98	foo	55
335	65699	4294967487	5.28	foo	55
328	65703	4294967492	68.41	foo	55
427	65722	4294967331	10.09	foo	55
310	65556	4294967518	38.85	foo	56
392	65586	4294967410	48.15	foo	56
463	65587	4294967307	52.17	foo	56
351	65732	4294967479	8.37	foo	56
456	65606	4294967422	72.56	foo	57
304	65731	4294967315	94.68	foo	57
277	65754	4294967357	36.26	foo	57
420	65771	4294967508	34.21	foo	57
419	65786	4294967300	6.57	foo	57
360	65564	4294967402	19.0	foo	58
448	65591	4294967451	62.74	foo	58
290	65596	4294967532	41.62	foo	58
427	65597	4294967511	71.19	foo	58
289	65604	4294967313	77.36	foo	58
382	65644	4294967500	18.63	foo	58
359	65675	4294967486	3.61	foo	58
478	65684	4294967439	95.53	foo	58
404	65693	4294967345	78.89	foo	58
256	65733	4294967501	70.53	foo	58
482	65775	4294967417	68.04	foo	58
431	65537	4294967326	11.34	foo	59
410	65572	4294967370	74.42	foo	59
496	65576	4294967331	15.75	foo	59
373	65589	4294967359	9.35	foo	59
484	65743	4294967483	66.67	foo	59
382	65762	4294967468	25.28	foo	59
390	65776	4294967421	97.81	foo	59
494	65786	4294967483	35.8	foo	59
342	65550	4294967306	90.38	foo	60
308	65564	4294967405	36.79	foo	60
381	65627	4294967365	33.85	foo	60
275	65654	4294967405	24.8	foo	60
459	65655	4294967535	36.95	foo	60
475	65664	4294967299	44.43	foo	60
400	65698	4294967299	41.34	foo	60
454	65706	4294967443	47.32	foo	60
309	65743	4294967450	15.9	foo	60
301	65746	4294967381	4.41	foo	60
421	65774	4294967400	5.62	foo	60
266	65564	4294967461	95.81	foo	61
478	65575	4294967442	96.73	foo	61
300	65588	4294967412	75.73	foo	61
405	65609	4294967301	16.48	foo	61
382	65623	4294967443	25.11	foo	61
510	65675	4294967391	88.07	foo	61
491	65711	4294967382	11.19	foo	61
407	65750	4294967412	0.1	foo	61
432	65778	4294967469	9.57	foo	61
419	65783	4294967427	70.93	foo	61
358	65552	4294967533	50.96	foo	62
262	65668	4294967468	61.94	foo	62
428	65758	4294967373	96.09	foo	62
427	65787	4294967323	86.93	foo	62
458	65537	4294967463	21.94	foo	63
481	65591	4294967382	28.31	foo	63
464	65596	4294967327	44.57	foo	63
268	65652	4294967374	40.78	foo	63
422	65690	4294967550	8.42	foo	63
341	65704	4294967546	7.79	foo	63
364	65705	4294967490	73.68	foo	63
368	65714	4294967420	20.38	foo	63
295	65622	4294967521	59.34	foo	64
371	65685	4294967320	15.63	foo	64
476	65542	4294967547	41.29	foo	65
458	65554	4294967329	69.96	foo	65
460	65570	4294967399	74.3	foo	65
274	65619	4294967389	12.45	foo	65
393	65625	4294967374	24.73	foo	65
263	65671	4294967519	68.95	foo	65
505	65679	4294967338	75.88	foo	65
508	65732	4294967409	81.47	foo	65
323	65739	4294967424	4.47	foo	65
300	65553	4294967447	29.02	foo	66
359	65556	4294967532	86.93	foo	66
264	65600	4294967388	28.71	foo	66
475	65633	4294967498	26.64	foo	66
477	65674	4294967313	8.45	foo	66
484	65685	4294967387	45.99	foo	66
462	65697	4294967452	57.29	foo	66
372	65718	4294967401	83.87	foo	66
267	65738	4294967371	70.89	foo	66
259	65767	4294967378	51.72	foo	66
436	65541	4294967471	19.06	foo	67
265	65562	4294967421	53.06	foo	67
295	65654	4294967449	59.55	foo	67
301	65579	4294967497	94.43	foo	68
448	65597	4294967422	70.39	foo	68
501	65606	4294967445	5.08	foo	68
264	65623	4294967481	69.97	foo	68
472	65628	4294967512	8.67	foo	68
439	65703	4294967469	92.55	foo	68
314	65770	4294967398	70.85	foo	68
489	65536	4294967404	33.52	foo	69
473	65599	4294967325	76.72	foo	69
304	65695	4294967384	13.94	foo	69
440	65720	4294967373	9.56	foo	69
492	65751	4294967324	45.1	foo	69
376	65751	4294967384	88.77	foo	69
430	65539	4294967534	18.89	foo	70
342	65569	4294967492	64.3	foo	70
283	65620	4294967355	9.13	foo	70
443	65700	4294967448	52.44	foo	70
285	65718	4294967353	37.1	foo	70
312	65742	4294967540	54.43	foo	70
361	65746	4294967332	97.57	foo	70
268	65766	4294967299	88.36	foo	70
373	65773	4294967502	46.18	foo	70
298	65540	4294967510	91.63	foo	71
347	65584	4294967549	99.65	foo	71
276	65584	4294967431	8.07	foo	71
260	65589	4294967329	2.35	foo	71
418	65598	4294967439	80.3	foo	71
280	65610	4294967451	33.36	foo	71
439	65618	4294967349	49.78	foo	71
496	65643	4294967349	84.72	foo	71
306	65664	4294967541	34.97	foo	71
324	65681	4294967388	47.59	foo	71
356	65715	4294967364	26.47	foo	71
332	65717	4294967337	10.73	foo	71
391	65749	4294967412	41.2	foo	71
363	65787	4294967465	59.5	foo	71
267	65537	4294967460	55.2	foo	72
489	65549	4294967424	82.56	foo	72
408	65581	4294967453	7.82	foo	72
383	65638	4294967398	23.6	foo	72
389	65724	4294967300	69.74	foo	72
503	65727	4294967376	79.99	foo	72
430	65763	4294967324	99.91	foo	72
421	65764	4294967458	88.8	foo	72
469	65765	4294967500	60.22	foo	72
310	65780	4294967507	80.99	foo	72
324	65582	4294967330	59.68	foo	73
340	65584	4294967330	21.28	foo	73
451	65599	4294967373	36.89	foo	73
318	65610	4294967401	11.91	foo	73
394	65657	4294967486	11.82	foo	73
306	65659	4294967341	34.58	foo	73
337	65775	4294967406	57.12	foo	73
487	65563	4294967305	60.06	foo	74
290	65630	4294967436	57.89	foo	74
309	65662	4294967518	4.17	foo	74
422	65682	4294967316	37.6	foo	74
289	65733	4294967495	77.84	foo	74
504	65766	4294967520	89.93	foo	74
298	65773	4294967400	21.8	foo	74
256	65778	4294967487	74.15	foo	74
504	65564	4294967534	7.56	foo	75
499	65696	4294967405	53.59	foo	75
393	65726	4294967467	39.98	foo	75
479	65749	4294967528	80.52	foo	75
461	65760	4294967326	3.21	foo	75
422	65552	4294967325	26.73	foo	76
368	65608	4294967506	16.69	foo	76
400	65661	4294967379	15.81	foo	76
258	65724	4294967365	70.0	foo	76
435	65578	4294967474	38.62	foo	77
461	65581	4294967449	89.55	foo	77
320	65585	4294967344	45.59	foo	77
485	65651	4294967326	50.7	foo	77
NULL	65681	4294967535	18.56	foo	77
283	65711	4294967523	10.17	foo	77
507	65721	4294967488	78.31	foo	77
441	65727	4294967391	43.13	foo	77
337	65766	4294967334	12.16	foo	77
483	65784	4294967330	23.07	foo	77
328	65789	4294967489	81.32	foo	77
417	65552	4294967300	64.0	foo	78
448	65568	4294967513	74.02	foo	78
275	65596	4294967299	21.7	foo	78
419	65633	4294967299	34.35	foo	78
421	65633	4294967410	87.67	foo	78
351	65755	4294967337	99.29	foo	78
509	65758	4294967531	21.45	foo	78
377	65570	4294967410	22.12	foo	79
451	65662	4294967487	73.63	foo	79
399	65664	4294967492	41.85	foo	79
396	65686	4294967335	89.28	foo	79
422	65691	4294967299	39.21	foo	79
486	65694	4294967305	10.25	foo	79
340	65744	4294967531	79.49	foo	79
419	65755	4294967329	91.05	foo	79
509	65553	4294967544	50.28	foo	80
407	65588	4294967371	51.25	foo	80
333	65614	4294967331	13.1	foo	80
455	65644	4294967460	75.35	foo	80
277	65671	4294967370	97.26	foo	80
390	65766	4294967360	67.26	foo	80
272	65548	4294967413	40.04	foo	81
448	65550	4294967533	25.88	foo	81
344	65677	4294967530	28.11	foo	81
338	65681	4294967519	50.66	foo	81
283	65702	4294967424	24.52	foo	81
449	65726	4294967395	97.09	foo	81
331	65745	4294967531	80.71	foo	81
305	65783	4294967443	39.01	foo	81
257	65654	4294967497	9.8	foo	82
257	65655	4294967320	40.42	foo	82
337	65662	4294967453	11.57	foo	82
272	65699	4294967488	92.82	foo	82
393	65763	4294967452	66.51	foo	82
303	65764	4294967480	54.34	foo	82
324	65789	4294967492	14.92	foo	82
353	65538	4294967339	0.08	foo	83
382	65550	4294967451	35.0	foo	83
420	65563	4294967400	85.1	foo	83
451	65583	4294967443	10.13	foo	83
395	65645	4294967509	99.62	foo	83
311	65653	4294967419	61.21	foo	83
432	65656	4294967303	26.08	foo	83
336	65672	4294967347	9.71	foo	83
265	65705	4294967392	19.28	foo	83
493	65742	4294967352	76.33	foo	83
316	65749	4294967342	90.51	foo	83
279	65754	4294967435	5.4	foo	83
373	65585	4294967486	14.13	foo	84
437	65601	4294967357	49.44	foo	84
496	65604	4294967329	59.45	foo	84
305	65637	4294967402	10.16	foo	84
403	65656	4294967550	7.05	foo	84
323	65685	4294967477	61.86	foo	84
492	65737	4294967467	23.45	foo	84
447	65755	4294967387	4.92	foo	84
326	65782	4294967362	17.87	foo	84
463	65542	4294967348	3.86	foo	85
349	65573	4294967308	97.46	foo	85
334	65610	4294967373	2.96	foo	85
454	65620	4294967520	65.55	foo	85
468	65643	4294967430	86.63	foo	85
461	65654	4294967507	89.1	foo	85
495	65656	4294967507	90.12	foo	85
283	65746	4294967384	11.68	foo	85
439	65759	4294967530	20.64	foo	85
392	65760	4294967436	65.02	foo	85
313	65780	4294967303	71.01	foo	85
448	65784	4294967299	90.56	foo	85
451	65580	4294967451	8.71	foo	86
422	65582	4294967353	87.83	foo	86
391	65620	4294967337	34.73	foo	86
425	65626	4294967374	87.4	foo	86
330	65676	4294967480	88.47	foo	86
349	65686	4294967512	62.85	foo	86
257	65748	4294967427	32.52	foo	86
466	65562	4294967446	35.62	foo	87
469	65580	4294967411	90.2	foo	87
361	65662	4294967331	97.56	foo	87
325	65730	4294967516	13.15	foo	87
341	65733	4294967412	18.93	foo	87
328	65547	4294967517	70.35	foo	88
404	65548	4294967382	6.87	foo	88
334	65583	4294967468	5.88	foo	88
277	65585	4294967398	3.97	foo	88
409	65607	4294967509	99.13	foo	88
348	65645	4294967328	46.88	foo	88
504	65652	4294967419	78.28	foo	88
346	65654	4294967369	48.23	foo	88
331	65682	4294967412	73.32	foo	88
404	65730	4294967335	17.74	foo	88
322	65733	4294967316	80.58	foo	88
307	65747	4294967389	31.86	foo	88
437	65762	4294967385	76.71	foo	88
496	65767	4294967448	14.3	foo	88
445	65778	4294967422	33.67	foo	88
466	65541	4294967468	85.51	foo	89
313	65550	4294967361	41.89	foo	89
278	65570	4294967466	55.63	foo	89
NULL	65579	4294967419	46.02	foo	89
478	65583	4294967522	92.4	foo	89
278	65593	4294967432	8.61	foo	89
354	65593	4294967462	97.51	foo	89
436	65623	4294967461	89.03	foo	89
300	65675	4294967384	49.77	foo	89
476	65728	4294967549	62.3	foo	89
492	65736	4294967336	14.93	foo	89
354	65777	4294967509	71.68	foo	89
273	65548	4294967366	62.9	foo	90
509	65602	4294967415	7.96	foo	90
269	65648	4294967392	42.31	foo	90
487	65695	4294967313	57.93	foo	90
414	65702	4294967337	66.36	foo	90
406	65763	4294967450	0.15	foo	90
307	65544	4294967344	4.57	foo	91
448	65559	4294967320	90.35	foo	91
295	65587	4294967506	76.93	foo	91
384	65644	4294967533	10.09	foo	91
262	65661	4294967391	73.65	foo	91
415	65672	4294967316	59.45	foo	91
346	65696	4294967355	71.31	foo	91
392	65708	4294967305	71.35	foo	91
352	65559	4294967353	3.82	foo	92
335	65603	4294967296	80.96	foo	92
329	65610	4294967521	47.08	foo	92
344	65618	4294967390	46.09	foo	92
306	65657	4294967337	50.26	foo	92
363	65697	4294967310	13.89	foo	92
297	65704	4294967403	84.83	foo	92
418	65706	4294967367	2.07	foo	92
490	65745	4294967420	10.22	foo	92
441	65549	4294967389	95.11	foo	93
504	65557	4294967500	22.68	foo	93
342	65623	4294967405	99.67	foo	93
433	65629	4294967439	39.83	foo	93
356	65650	4294967428	53.94	foo	93
326	65678	4294967428	45.19	foo	93
373	65707	4294967343	95.48	foo	93
426	65714	4294967478	83.4	foo	93
403	65752	4294967497	97.65	foo	93
403	65782	4294967355	74.53	foo	93
335	65603	4294967357	68.25	foo	94
475	65606	4294967503	62.14	foo	94
485	65735	4294967472	69.88	foo	94
256	65747	4294967347	32.18	foo	94
474	65759	4294967317	57.08	foo	94
415	65560	4294967444	4.71	foo	95
300	65568	4294967520	39.82	foo	95
329	65628	4294967396	61.7	foo	95
511	65636	4294967325	71.5	foo	95
482	65637	4294967342	9.7	foo	95
424	65643	4294967442	36.22	foo	95
489	65711	4294967493	11.89	foo	95
432	65711	4294967378	39.87	foo	95
459	65760	4294967524	85.74	foo	95
435	65658	4294967523	6.74	foo	96
421	65692	4294967526	98.48	foo	96
315	65769	4294967323	94.68	foo	96
263	65769	4294967532	53.02	foo	96
266	65544	4294967373	32.2	foo	97
283	65589	4294967434	37.8	foo	97
360	65590	4294967324	68.96	foo	97
491	65618	4294967423	32.25	foo	97
503	65690	4294967463	77.57	foo	97
323	65704	4294967477	60.12	foo	97
349	65769	4294967386	12.9	foo	97
290	65774	4294967311	71.07	foo	97
452	65544	4294967309	73.93	foo	98
381	65563	4294967458	41.29	foo	98
466	65602	4294967470	8.32	foo	98
430	65616	4294967451	35.89	foo	98
432	65669	4294967373	63.12	foo	98
435	65546	4294967535	22.85	foo	99
303	65566	4294967353	98.57	foo	99
373	65579	4294967465	24.02	foo	99
497	65656	4294967390	32.37	foo	99
282	65659	4294967394	30.62	foo	99
436	65746	4294967342	39.81	foo	99
409	65536	4294967490	46.97	foo	NULL
374	65560	4294967516	65.43	foo	NULL
473	65720	4294967324	80.74	foo	NULL
PREHOOK: query: select count(*) from over1k_part2_orc
PREHOOK: type: QUERY
PREHOOK: Input: default@over1k_part2_orc
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=100
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=101
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=102
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=103
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=104
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=105
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=106
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=107
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=108
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=109
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=110
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=111
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=112
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=113
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=114
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=115
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=116
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=117
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=118
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=119
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=120
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=121
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=122
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=123
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=124
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=27
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=28
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=29
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=30
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=31
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=32
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=33
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=34
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=35
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=36
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=37
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=38
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=39
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=40
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=41
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=42
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=43
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=44
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=45
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=46
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=47
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=48
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=49
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=50
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=51
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=52
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=53
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=54
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=55
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=56
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=57
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=58
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=59
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=60
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=61
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=62
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=63
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=64
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=65
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=66
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=67
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=68
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=69
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=70
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=71
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=72
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=73
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=74
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=75
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=76
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=77
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=78
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=79
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=80
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=81
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=82
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=83
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=84
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=85
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=86
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=87
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=88
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=89
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=90
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=91
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=92
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=93
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=94
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=95
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=96
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=97
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=98
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=99
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=__HIVE_DEFAULT_PARTITION__
#### A masked pattern was here ####
POSTHOOK: query: select count(*) from over1k_part2_orc
POSTHOOK: type: QUERY
POSTHOOK: Input: default@over1k_part2_orc
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=100
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=101
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=102
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=103
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=104
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=105
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=106
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=107
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=108
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=109
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=110
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=111
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=112
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=113
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=114
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=115
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=116
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=117
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=118
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=119
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=120
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=121
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=122
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=123
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=124
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=27
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=28
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=29
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=30
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=31
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=32
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=33
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=34
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=35
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=36
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=37
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=38
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=39
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=40
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=41
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=42
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=43
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=44
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=45
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=46
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=47
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=48
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=49
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=50
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=51
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=52
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=53
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=54
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=55
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=56
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=57
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=58
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=59
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=60
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=61
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=62
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=63
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=64
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=65
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=66
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=67
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=68
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=69
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=70
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=71
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=72
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=73
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=74
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=75
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=76
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=77
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=78
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=79
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=80
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=81
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=82
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=83
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=84
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=85
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=86
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=87
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=88
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=89
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=90
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=91
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=92
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=93
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=94
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=95
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=96
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=97
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=98
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=99
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=__HIVE_DEFAULT_PARTITION__
#### A masked pattern was here ####
806
PREHOOK: query: insert overwrite table over1k_part2_orc partition(ds="foo",t) select si,i,b,f,t from over1k_orc where t is null or t=27 order by i
PREHOOK: type: QUERY
PREHOOK: Input: default@over1k_orc
PREHOOK: Output: default@over1k_part2_orc@ds=foo
POSTHOOK: query: insert overwrite table over1k_part2_orc partition(ds="foo",t) select si,i,b,f,t from over1k_orc where t is null or t=27 order by i
POSTHOOK: type: QUERY
POSTHOOK: Input: default@over1k_orc
POSTHOOK: Output: default@over1k_part2_orc@ds=foo/t=27
POSTHOOK: Output: default@over1k_part2_orc@ds=foo/t=__HIVE_DEFAULT_PARTITION__
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=27).b SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:b, type:bigint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=27).f SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:f, type:float, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=27).i SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:i, type:int, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=27).si SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:si, type:smallint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=__HIVE_DEFAULT_PARTITION__).b SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:b, type:bigint, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=__HIVE_DEFAULT_PARTITION__).f SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:f, type:float, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=__HIVE_DEFAULT_PARTITION__).i SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:i, type:int, comment:null), ]
POSTHOOK: Lineage: over1k_part2_orc PARTITION(ds=foo,t=__HIVE_DEFAULT_PARTITION__).si SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:si, type:smallint, comment:null), ]
PREHOOK: query: desc formatted over1k_part2_orc partition(ds="foo",t=27)
PREHOOK: type: DESCTABLE
PREHOOK: Input: default@over1k_part2_orc
POSTHOOK: query: desc formatted over1k_part2_orc partition(ds="foo",t=27)
POSTHOOK: type: DESCTABLE
POSTHOOK: Input: default@over1k_part2_orc
# col_name            	data_type           	comment             
si                  	smallint            	                    
i                   	int                 	                    
b                   	bigint              	                    
f                   	float               	                    
	 	 
# Partition Information	 	 
# col_name            	data_type           	comment             
ds                  	string              	                    
t                   	tinyint             	                    
	 	 
# Detailed Partition Information	 	 
Partition Value:    	[foo, 27]           	 
Database:           	default             	 
Table:              	over1k_part2_orc    	 
#### A masked pattern was here ####
Partition Parameters:	 	 
	COLUMN_STATS_ACCURATE	{\"BASIC_STATS\":\"true\",\"COLUMN_STATS\":{\"b\":\"true\",\"f\":\"true\",\"i\":\"true\",\"si\":\"true\"}}
	numFiles            	1                   
	numRows             	16                  
	rawDataSize         	415                 
	totalSize           	431                 
#### A masked pattern was here ####
	 	 
# Storage Information	 	 
SerDe Library:      	org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe	 
InputFormat:        	org.apache.hadoop.mapred.TextInputFormat	 
OutputFormat:       	org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat	 
Compressed:         	No                  	 
Num Buckets:        	-1                  	 
Bucket Columns:     	[]                  	 
Sort Columns:       	[]                  	 
Storage Desc Params:	 	 
	serialization.format	1                   
PREHOOK: query: desc formatted over1k_part2_orc partition(ds="foo",t="__HIVE_DEFAULT_PARTITION__")
PREHOOK: type: DESCTABLE
PREHOOK: Input: default@over1k_part2_orc
POSTHOOK: query: desc formatted over1k_part2_orc partition(ds="foo",t="__HIVE_DEFAULT_PARTITION__")
POSTHOOK: type: DESCTABLE
POSTHOOK: Input: default@over1k_part2_orc
# col_name            	data_type           	comment             
si                  	smallint            	                    
i                   	int                 	                    
b                   	bigint              	                    
f                   	float               	                    
	 	 
# Partition Information	 	 
# col_name            	data_type           	comment             
ds                  	string              	                    
t                   	tinyint             	                    
	 	 
# Detailed Partition Information	 	 
Partition Value:    	[foo, __HIVE_DEFAULT_PARTITION__]	 
Database:           	default             	 
Table:              	over1k_part2_orc    	 
#### A masked pattern was here ####
Partition Parameters:	 	 
	COLUMN_STATS_ACCURATE	{\"BASIC_STATS\":\"true\",\"COLUMN_STATS\":{\"b\":\"true\",\"f\":\"true\",\"i\":\"true\",\"si\":\"true\"}}
	numFiles            	1                   
	numRows             	3                   
	rawDataSize         	78                  
	totalSize           	81                  
#### A masked pattern was here ####
	 	 
# Storage Information	 	 
SerDe Library:      	org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe	 
InputFormat:        	org.apache.hadoop.mapred.TextInputFormat	 
OutputFormat:       	org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat	 
Compressed:         	No                  	 
Num Buckets:        	-1                  	 
Bucket Columns:     	[]                  	 
Sort Columns:       	[]                  	 
Storage Desc Params:	 	 
	serialization.format	1                   
PREHOOK: query: select * from over1k_part2_orc
PREHOOK: type: QUERY
PREHOOK: Input: default@over1k_part2_orc
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=100
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=101
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=102
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=103
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=104
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=105
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=106
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=107
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=108
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=109
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=110
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=111
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=112
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=113
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=114
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=115
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=116
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=117
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=118
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=119
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=120
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=121
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=122
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=123
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=124
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=27
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=28
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=29
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=30
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=31
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=32
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=33
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=34
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=35
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=36
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=37
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=38
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=39
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=40
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=41
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=42
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=43
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=44
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=45
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=46
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=47
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=48
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=49
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=50
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=51
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=52
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=53
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=54
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=55
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=56
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=57
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=58
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=59
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=60
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=61
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=62
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=63
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=64
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=65
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=66
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=67
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=68
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=69
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=70
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=71
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=72
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=73
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=74
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=75
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=76
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=77
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=78
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=79
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=80
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=81
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=82
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=83
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=84
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=85
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=86
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=87
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=88
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=89
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=90
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=91
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=92
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=93
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=94
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=95
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=96
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=97
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=98
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=99
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=__HIVE_DEFAULT_PARTITION__
#### A masked pattern was here ####
POSTHOOK: query: select * from over1k_part2_orc
POSTHOOK: type: QUERY
POSTHOOK: Input: default@over1k_part2_orc
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=100
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=101
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=102
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=103
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=104
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=105
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=106
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=107
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=108
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=109
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=110
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=111
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=112
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=113
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=114
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=115
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=116
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=117
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=118
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=119
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=120
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=121
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=122
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=123
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=124
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=27
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=28
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=29
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=30
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=31
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=32
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=33
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=34
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=35
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=36
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=37
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=38
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=39
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=40
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=41
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=42
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=43
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=44
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=45
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=46
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=47
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=48
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=49
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=50
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=51
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=52
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=53
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=54
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=55
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=56
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=57
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=58
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=59
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=60
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=61
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=62
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=63
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=64
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=65
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=66
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=67
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=68
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=69
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=70
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=71
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=72
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=73
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=74
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=75
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=76
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=77
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=78
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=79
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=80
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=81
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=82
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=83
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=84
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=85
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=86
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=87
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=88
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=89
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=90
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=91
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=92
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=93
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=94
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=95
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=96
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=97
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=98
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=99
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=__HIVE_DEFAULT_PARTITION__
#### A masked pattern was here ####
413	65547	4294967303	53.18	foo	100
430	65570	4294967431	50.31	foo	100
264	65637	4294967340	85.0	foo	100
354	65649	4294967358	7.54	foo	100
310	65657	4294967393	20.67	foo	100
391	65661	4294967317	52.72	foo	100
481	65750	4294967308	21.19	foo	100
492	65778	4294967379	13.35	foo	100
283	65538	4294967527	84.03	foo	101
326	65586	4294967435	30.81	foo	101
476	65631	4294967538	29.78	foo	101
487	65676	4294967367	85.87	foo	101
327	65706	4294967340	71.54	foo	101
282	65738	4294967432	93.61	foo	101
315	65749	4294967519	85.14	foo	101
317	65756	4294967505	4.8	foo	101
259	65757	4294967550	82.97	foo	101
259	65759	4294967383	79.96	foo	101
359	65560	4294967482	93.03	foo	102
501	65710	4294967332	47.27	foo	102
436	65749	4294967542	68.89	foo	102
411	65579	4294967521	22.25	foo	103
430	65591	4294967344	75.03	foo	103
310	65603	4294967475	44.1	foo	103
430	65642	4294967347	84.23	foo	103
494	65760	4294967301	59.21	foo	103
504	65768	4294967354	53.93	foo	103
343	65773	4294967485	46.8	foo	103
454	65579	4294967467	54.44	foo	104
472	65620	4294967548	22.08	foo	104
448	65693	4294967459	80.92	foo	104
266	65704	4294967413	59.16	foo	104
331	65757	4294967330	30.71	foo	104
415	65758	4294967454	66.17	foo	104
474	65773	4294967473	40.98	foo	104
299	65791	4294967424	34.03	foo	104
345	65582	4294967478	12.42	foo	105
376	65602	4294967472	10.67	foo	105
438	65623	4294967501	39.69	foo	105
435	65637	4294967534	80.23	foo	105
326	65673	4294967440	4.59	foo	105
509	65716	4294967308	22.94	foo	105
478	65790	4294967302	88.05	foo	105
456	65548	4294967484	37.9	foo	106
446	65613	4294967369	48.45	foo	106
284	65619	4294967527	92.96	foo	106
482	65624	4294967446	45.45	foo	106
370	65625	4294967333	3.0	foo	106
415	65644	4294967399	63.35	foo	106
282	65688	4294967433	75.19	foo	106
502	65695	4294967501	83.92	foo	106
441	65771	4294967386	83.93	foo	106
318	65789	4294967381	1.02	foo	106
278	65550	4294967432	83.08	foo	107
421	65595	4294967543	57.11	foo	107
271	65601	4294967456	8.57	foo	107
271	65652	4294967329	38.3	foo	107
466	65691	4294967302	9.68	foo	107
313	65699	4294967493	9.25	foo	107
301	65536	4294967357	90.05	foo	108
476	65587	4294967306	2.96	foo	108
466	65600	4294967458	90.73	foo	108
478	65712	4294967522	46.43	foo	108
391	65717	4294967336	43.71	foo	108
385	65730	4294967387	65.44	foo	108
446	65733	4294967403	7.11	foo	108
280	65765	4294967434	4.79	foo	108
263	65787	4294967297	12.44	foo	108
376	65538	4294967453	59.61	foo	109
344	65595	4294967409	42.24	foo	109
427	65626	4294967308	98.72	foo	109
306	65643	4294967323	79.54	foo	109
275	65651	4294967393	96.94	foo	109
283	65675	4294967429	88.91	foo	109
319	65734	4294967387	52.23	foo	109
438	65779	4294967371	67.18	foo	109
306	65571	4294967419	43.01	foo	110
261	65600	4294967428	75.83	foo	110
279	65604	4294967344	92.33	foo	110
346	65693	4294967505	67.12	foo	110
344	65759	4294967464	27.31	foo	110
287	65587	4294967421	48.22	foo	111
486	65620	4294967357	22.36	foo	111
372	65656	4294967312	13.01	foo	111
317	65703	4294967297	38.05	foo	111
349	65740	4294967400	17.37	foo	111
288	65770	4294967544	80.84	foo	111
453	65586	4294967540	42.76	foo	112
348	65643	4294967388	30.61	foo	112
295	65662	4294967517	65.62	foo	112
373	65680	4294967449	90.28	foo	112
312	65685	4294967395	33.76	foo	112
316	65719	4294967473	51.79	foo	112
444	65721	4294967401	47.88	foo	112
372	65722	4294967529	41.44	foo	112
383	65578	4294967358	43.16	foo	113
445	65658	4294967530	4.32	foo	113
361	65660	4294967516	23.17	foo	113
395	65666	4294967447	26.49	foo	113
302	65721	4294967526	96.68	foo	113
385	65541	4294967458	73.48	foo	114
454	65542	4294967443	64.67	foo	114
279	65544	4294967383	6.67	foo	114
384	65549	4294967361	55.39	foo	114
433	65572	4294967463	43.02	foo	114
507	65576	4294967517	15.18	foo	114
410	65578	4294967363	94.34	foo	114
271	65581	4294967520	61.88	foo	114
402	65622	4294967542	59.87	foo	114
304	65643	4294967457	54.75	foo	114
279	65657	4294967339	54.73	foo	114
503	65677	4294967534	64.22	foo	114
427	65712	4294967419	32.47	foo	114
499	65724	4294967334	42.51	foo	114
425	65772	4294967307	55.1	foo	114
327	65607	4294967391	28.79	foo	115
269	65627	4294967362	91.42	foo	115
276	65632	4294967457	90.69	foo	115
281	65651	4294967434	80.46	foo	115
334	65653	4294967435	46.45	foo	115
502	65773	4294967522	37.59	foo	115
482	65550	4294967489	5.85	foo	116
485	65575	4294967296	95.84	foo	116
487	65659	4294967309	77.66	foo	116
444	65659	4294967329	59.62	foo	116
351	65771	4294967470	48.59	foo	116
396	65778	4294967515	30.65	foo	116
307	65785	4294967434	72.18	foo	116
396	65541	4294967434	74.78	foo	117
276	65581	4294967457	69.8	foo	117
341	65588	4294967496	51.29	foo	117
302	65615	4294967382	21.32	foo	117
346	65619	4294967321	78.73	foo	117
483	65627	4294967547	21.18	foo	117
267	65637	4294967544	93.64	foo	117
323	65669	4294967316	90.25	foo	117
311	65691	4294967335	24.28	foo	117
474	65729	4294967333	68.22	foo	117
400	65755	4294967399	91.48	foo	117
497	65536	4294967381	50.32	foo	118
374	65541	4294967528	6.72	foo	118
309	65578	4294967357	75.1	foo	118
334	65586	4294967525	38.79	foo	118
467	65632	4294967296	41.36	foo	118
292	65637	4294967403	49.68	foo	118
282	65644	4294967407	67.59	foo	118
486	65651	4294967472	32.23	foo	118
399	65730	4294967309	0.52	foo	118
497	65738	4294967546	19.14	foo	118
390	65544	4294967411	41.31	foo	119
427	65553	4294967319	95.53	foo	119
421	65580	4294967480	27.87	foo	119
280	65615	4294967457	94.72	foo	119
316	65646	4294967405	46.27	foo	119
310	65679	4294967319	14.21	foo	119
373	65704	4294967459	27.07	foo	119
278	65773	4294967488	31.15	foo	119
331	65539	4294967324	88.02	foo	120
294	65590	4294967443	90.07	foo	120
497	65595	4294967442	45.56	foo	120
406	65610	4294967538	59.99	foo	120
285	65649	4294967355	35.56	foo	120
413	65650	4294967543	48.25	foo	120
445	65670	4294967344	98.23	foo	120
273	65724	4294967477	94.15	foo	120
325	65758	4294967540	79.19	foo	120
298	65763	4294967513	3.33	foo	120
355	65537	4294967437	85.9	foo	121
342	65565	4294967528	52.85	foo	121
330	65755	4294967380	64.36	foo	121
449	65776	4294967327	60.6	foo	121
401	65779	4294967375	29.24	foo	121
396	65550	4294967350	60.02	foo	122
384	65578	4294967358	8.45	foo	122
392	65619	4294967527	20.81	foo	122
473	65629	4294967387	90.77	foo	122
444	65675	4294967500	72.62	foo	122
288	65695	4294967469	90.05	foo	122
354	65709	4294967334	74.45	foo	122
428	65715	4294967520	35.72	foo	122
449	65751	4294967548	81.66	foo	122
356	65759	4294967379	92.61	foo	122
278	65573	4294967496	86.22	foo	123
299	65606	4294967525	99.36	foo	123
499	65623	4294967521	43.37	foo	123
419	65654	4294967442	97.87	foo	123
477	65699	4294967340	1.21	foo	123
381	65780	4294967388	5.44	foo	123
439	65781	4294967448	15.86	foo	123
284	65783	4294967301	60.26	foo	123
310	65548	4294967319	58.66	foo	124
495	65549	4294967471	99.21	foo	124
336	65664	4294967435	74.72	foo	124
311	65670	4294967420	87.94	foo	124
371	65687	4294967489	79.55	foo	124
384	65697	4294967426	15.3	foo	124
392	65711	4294967498	15.37	foo	124
421	65743	4294967434	3.62	foo	124
405	65536	4294967508	82.24	foo	27
457	65570	4294967464	81.58	foo	27
256	65599	4294967383	89.55	foo	27
335	65617	4294967381	64.87	foo	27
261	65619	4294967401	88.78	foo	27
278	65622	4294967516	25.67	foo	27
482	65624	4294967313	78.98	foo	27
503	65628	4294967371	95.07	foo	27
335	65636	4294967505	37.14	foo	27
367	65675	4294967518	12.32	foo	27
340	65677	4294967461	98.96	foo	27
490	65680	4294967347	57.46	foo	27
287	65708	4294967542	83.33	foo	27
329	65778	4294967451	6.63	foo	27
401	65779	4294967402	97.39	foo	27
262	65787	4294967371	57.35	foo	27
259	65544	4294967398	54.31	foo	28
427	65559	4294967370	39.03	foo	28
372	65578	4294967374	75.42	foo	28
307	65606	4294967389	95.34	foo	28
454	65612	4294967480	65.02	foo	28
443	65635	4294967426	97.68	foo	28
480	65637	4294967328	76.69	foo	28
428	65650	4294967320	85.76	foo	28
302	65653	4294967388	50.4	foo	28
378	65678	4294967355	68.32	foo	28
485	65694	4294967534	79.48	foo	28
349	65711	4294967458	84.69	foo	28
380	65714	4294967514	0.28	foo	28
418	65756	4294967451	27.12	foo	28
294	65756	4294967487	76.74	foo	28
331	65539	4294967420	73.18	foo	29
449	65596	4294967490	58.67	foo	29
374	65696	4294967481	13.87	foo	29
441	65721	4294967456	40.17	foo	30
294	65779	4294967482	36.58	foo	30
366	65557	4294967458	41.71	foo	31
493	65562	4294967428	38.94	foo	31
459	65595	4294967413	40.0	foo	31
426	65602	4294967543	24.79	foo	31
432	65607	4294967497	40.8	foo	31
461	65608	4294967349	61.92	foo	31
278	65634	4294967511	50.41	foo	31
457	65656	4294967394	29.36	foo	31
351	65669	4294967441	95.38	foo	31
281	65681	4294967368	86.0	foo	31
474	65682	4294967551	30.63	foo	31
356	65721	4294967481	1.08	foo	31
382	65737	4294967301	58.09	foo	31
426	65789	4294967526	58.13	foo	31
467	65547	4294967502	67.94	foo	32
506	65551	4294967375	19.13	foo	32
264	65606	4294967487	66.17	foo	32
490	65658	4294967541	62.23	foo	32
348	65747	4294967514	37.85	foo	32
400	65753	4294967360	35.13	foo	32
458	65783	4294967309	45.42	foo	32
321	65594	4294967495	97.71	foo	33
508	65600	4294967372	12.02	foo	33
497	65612	4294967375	28.69	foo	33
319	65617	4294967431	64.65	foo	33
285	65689	4294967355	97.83	foo	33
430	65694	4294967346	48.37	foo	33
265	65713	4294967529	86.69	foo	33
258	65762	4294967417	15.22	foo	33
459	65783	4294967300	10.29	foo	33
324	65549	4294967307	17.16	foo	34
264	65564	4294967437	31.77	foo	34
450	65607	4294967328	18.2	foo	34
322	65659	4294967353	78.62	foo	34
425	65660	4294967371	58.43	foo	34
439	65667	4294967480	26.49	foo	34
405	65719	4294967306	1.31	foo	34
398	65731	4294967546	66.61	foo	34
379	65750	4294967441	98.18	foo	34
475	65574	4294967455	60.13	foo	35
387	65619	4294967459	96.91	foo	35
500	65641	4294967469	68.85	foo	35
463	65646	4294967363	50.83	foo	35
423	65667	4294967507	65.43	foo	35
290	65726	4294967434	18.63	foo	35
488	65737	4294967502	62.52	foo	35
451	65763	4294967498	33.83	foo	35
409	65777	4294967422	93.09	foo	35
280	65779	4294967322	1.87	foo	35
460	65541	4294967365	55.99	foo	36
377	65697	4294967444	98.51	foo	36
274	65705	4294967514	70.52	foo	36
350	65717	4294967481	92.98	foo	36
429	65723	4294967296	67.45	foo	36
273	65739	4294967416	1.25	foo	36
309	65769	4294967317	91.16	foo	36
472	65545	4294967351	83.54	foo	37
503	65562	4294967358	44.22	foo	37
445	65612	4294967444	92.11	foo	37
434	65638	4294967335	55.18	foo	37
411	65680	4294967353	2.92	foo	37
317	65684	4294967499	23.13	foo	37
379	65737	4294967314	88.17	foo	37
293	65762	4294967316	67.38	foo	37
336	65556	4294967482	14.84	foo	38
308	65559	4294967465	95.81	foo	38
318	65560	4294967354	43.73	foo	38
351	65567	4294967316	22.78	foo	38
290	65628	4294967473	56.07	foo	38
291	65634	4294967438	83.57	foo	38
384	65667	4294967539	81.32	foo	38
376	65783	4294967507	10.19	foo	38
493	65788	4294967427	60.85	foo	38
368	65590	4294967420	27.72	foo	39
340	65650	4294967365	22.12	foo	39
492	65701	4294967458	23.96	foo	39
496	65640	4294967513	93.73	foo	40
442	65659	4294967379	50.08	foo	40
500	65664	4294967428	16.25	foo	40
432	65691	4294967547	24.86	foo	40
331	65705	4294967470	91.78	foo	40
299	65712	4294967352	25.37	foo	40
465	65713	4294967408	50.09	foo	40
338	65618	4294967304	45.68	foo	41
360	65643	4294967488	76.28	foo	41
453	65677	4294967371	76.1	foo	41
275	65694	4294967503	1.91	foo	41
301	65706	4294967501	51.84	foo	41
329	65717	4294967463	30.36	foo	41
266	65774	4294967365	41.68	foo	41
334	65776	4294967432	71.89	foo	41
495	65536	4294967431	43.57	foo	42
342	65628	4294967436	9.48	foo	42
323	65629	4294967324	8.45	foo	42
353	65672	4294967465	70.04	foo	42
345	65676	4294967447	14.92	foo	42
498	65687	4294967352	42.85	foo	42
368	65701	4294967410	35.68	foo	42
315	65713	4294967544	88.48	foo	42
338	65719	4294967488	87.99	foo	42
315	65782	4294967369	4.46	foo	42
333	65549	4294967331	11.22	foo	43
476	65570	4294967398	1.12	foo	43
305	65572	4294967511	36.7	foo	43
379	65616	4294967348	46.15	foo	43
418	65646	4294967385	43.92	foo	43
503	65650	4294967482	96.38	foo	43
340	65669	4294967500	23.19	foo	43
281	65676	4294967540	87.14	foo	43
436	65678	4294967424	50.92	foo	43
461	65686	4294967544	20.82	foo	43
440	65693	4294967409	38.05	foo	43
473	65697	4294967457	79.97	foo	43
357	65542	4294967373	31.91	foo	44
364	65614	4294967413	4.35	foo	44
452	65645	4294967345	56.15	foo	44
330	65647	4294967339	39.34	foo	44
398	65691	4294967393	26.71	foo	44
386	65692	4294967434	0.84	foo	44
460	65693	4294967423	58.0	foo	44
390	65693	4294967504	1.29	foo	44
437	65721	4294967376	22.27	foo	44
260	65727	4294967453	60.53	foo	44
465	65744	4294967391	27.3	foo	44
270	65751	4294967301	67.48	foo	44
475	65776	4294967510	89.55	foo	44
459	65565	4294967507	6.55	foo	45
408	65577	4294967461	59.43	foo	45
394	65586	4294967391	63.33	foo	45
433	65672	4294967506	85.03	foo	45
423	65673	4294967447	11.55	foo	45
401	65680	4294967303	32.41	foo	45
298	65747	4294967434	15.15	foo	45
357	65755	4294967485	94.25	foo	45
292	65769	4294967336	32.01	foo	45
377	65786	4294967364	92.37	foo	45
303	65562	4294967402	96.29	foo	46
463	65622	4294967479	23.44	foo	46
480	65649	4294967458	86.23	foo	46
319	65683	4294967549	94.33	foo	46
360	65702	4294967541	46.21	foo	46
410	65721	4294967362	80.3	foo	46
363	65735	4294967537	72.79	foo	46
485	65739	4294967519	9.19	foo	46
266	65762	4294967305	2.97	foo	46
386	65790	4294967507	52.73	foo	46
291	65615	4294967402	37.14	foo	47
306	65636	4294967524	54.1	foo	47
463	65751	4294967525	71.68	foo	47
375	65775	4294967465	70.56	foo	47
328	65784	4294967411	94.08	foo	47
511	65561	4294967547	8.45	foo	48
438	65575	4294967376	25.42	foo	48
328	65594	4294967366	59.07	foo	48
491	65669	4294967492	63.51	foo	48
443	65675	4294967322	57.67	foo	48
501	65720	4294967525	2.79	foo	48
498	65774	4294967431	59.71	foo	48
459	65777	4294967312	76.72	foo	48
329	65788	4294967378	30.25	foo	48
291	65548	4294967403	77.02	foo	49
388	65574	4294967407	27.63	foo	49
345	65614	4294967318	50.02	foo	49
407	65639	4294967362	27.66	foo	49
271	65735	4294967454	59.83	foo	49
448	65742	4294967470	82.34	foo	49
349	65747	4294967306	84.4	foo	49
307	65596	4294967300	80.6	foo	50
478	65599	4294967338	77.81	foo	50
290	65630	4294967304	10.2	foo	50
338	65634	4294967463	85.23	foo	50
316	65654	4294967488	9.81	foo	50
367	65663	4294967405	11.18	foo	50
346	65673	4294967549	55.51	foo	50
317	65709	4294967379	68.5	foo	50
405	65715	4294967538	79.12	foo	50
409	65738	4294967535	28.56	foo	50
402	65781	4294967410	65.38	foo	50
434	65549	4294967449	3.96	foo	51
495	65554	4294967347	94.27	foo	51
345	65566	4294967519	70.38	foo	51
377	65626	4294967479	1.27	foo	51
265	65626	4294967521	94.38	foo	51
484	65635	4294967500	2.18	foo	51
459	65641	4294967380	5.45	foo	51
444	65662	4294967539	42.48	foo	51
334	65670	4294967369	70.24	foo	51
362	65677	4294967445	63.42	foo	51
398	65687	4294967304	30.37	foo	51
390	65709	4294967548	29.59	foo	51
295	65716	4294967433	16.24	foo	51
445	65761	4294967423	10.6	foo	51
258	65781	4294967391	1.92	foo	51
447	65791	4294967354	28.95	foo	51
511	65658	4294967432	7.96	foo	52
365	65691	4294967551	99.15	foo	52
279	65541	4294967441	77.97	foo	53
466	65545	4294967514	94.66	foo	53
371	65603	4294967303	51.29	foo	53
315	65607	4294967496	1.58	foo	53
311	65650	4294967299	48.11	foo	53
274	65658	4294967545	95.28	foo	53
435	65687	4294967451	76.7	foo	53
373	65691	4294967371	79.75	foo	53
317	65702	4294967398	35.17	foo	53
467	65718	4294967355	11.15	foo	53
464	65720	4294967413	26.39	foo	53
482	65736	4294967394	74.59	foo	53
489	65752	4294967329	83.27	foo	53
293	65778	4294967418	16.09	foo	53
422	65784	4294967450	56.04	foo	53
257	65790	4294967425	9.26	foo	53
317	65547	4294967409	60.71	foo	54
478	65615	4294967344	9.74	foo	54
327	65657	4294967334	42.42	foo	54
463	65701	4294967313	43.31	foo	54
501	65722	4294967336	42.67	foo	54
321	65724	4294967486	47.69	foo	54
346	65751	4294967398	98.31	foo	54
481	65755	4294967429	28.5	foo	54
341	65756	4294967522	1.08	foo	54
325	65594	4294967337	7.98	foo	55
335	65699	4294967487	5.28	foo	55
328	65703	4294967492	68.41	foo	55
427	65722	4294967331	10.09	foo	55
310	65556	4294967518	38.85	foo	56
392	65586	4294967410	48.15	foo	56
463	65587	4294967307	52.17	foo	56
351	65732	4294967479	8.37	foo	56
456	65606	4294967422	72.56	foo	57
304	65731	4294967315	94.68	foo	57
277	65754	4294967357	36.26	foo	57
420	65771	4294967508	34.21	foo	57
419	65786	4294967300	6.57	foo	57
360	65564	4294967402	19.0	foo	58
448	65591	4294967451	62.74	foo	58
290	65596	4294967532	41.62	foo	58
427	65597	4294967511	71.19	foo	58
289	65604	4294967313	77.36	foo	58
382	65644	4294967500	18.63	foo	58
359	65675	4294967486	3.61	foo	58
478	65684	4294967439	95.53	foo	58
404	65693	4294967345	78.89	foo	58
256	65733	4294967501	70.53	foo	58
482	65775	4294967417	68.04	foo	58
431	65537	4294967326	11.34	foo	59
410	65572	4294967370	74.42	foo	59
496	65576	4294967331	15.75	foo	59
373	65589	4294967359	9.35	foo	59
484	65743	4294967483	66.67	foo	59
382	65762	4294967468	25.28	foo	59
390	65776	4294967421	97.81	foo	59
494	65786	4294967483	35.8	foo	59
342	65550	4294967306	90.38	foo	60
308	65564	4294967405	36.79	foo	60
381	65627	4294967365	33.85	foo	60
275	65654	4294967405	24.8	foo	60
459	65655	4294967535	36.95	foo	60
475	65664	4294967299	44.43	foo	60
400	65698	4294967299	41.34	foo	60
454	65706	4294967443	47.32	foo	60
309	65743	4294967450	15.9	foo	60
301	65746	4294967381	4.41	foo	60
421	65774	4294967400	5.62	foo	60
266	65564	4294967461	95.81	foo	61
478	65575	4294967442	96.73	foo	61
300	65588	4294967412	75.73	foo	61
405	65609	4294967301	16.48	foo	61
382	65623	4294967443	25.11	foo	61
510	65675	4294967391	88.07	foo	61
491	65711	4294967382	11.19	foo	61
407	65750	4294967412	0.1	foo	61
432	65778	4294967469	9.57	foo	61
419	65783	4294967427	70.93	foo	61
358	65552	4294967533	50.96	foo	62
262	65668	4294967468	61.94	foo	62
428	65758	4294967373	96.09	foo	62
427	65787	4294967323	86.93	foo	62
458	65537	4294967463	21.94	foo	63
481	65591	4294967382	28.31	foo	63
464	65596	4294967327	44.57	foo	63
268	65652	4294967374	40.78	foo	63
422	65690	4294967550	8.42	foo	63
341	65704	4294967546	7.79	foo	63
364	65705	4294967490	73.68	foo	63
368	65714	4294967420	20.38	foo	63
295	65622	4294967521	59.34	foo	64
371	65685	4294967320	15.63	foo	64
476	65542	4294967547	41.29	foo	65
458	65554	4294967329	69.96	foo	65
460	65570	4294967399	74.3	foo	65
274	65619	4294967389	12.45	foo	65
393	65625	4294967374	24.73	foo	65
263	65671	4294967519	68.95	foo	65
505	65679	4294967338	75.88	foo	65
508	65732	4294967409	81.47	foo	65
323	65739	4294967424	4.47	foo	65
300	65553	4294967447	29.02	foo	66
359	65556	4294967532	86.93	foo	66
264	65600	4294967388	28.71	foo	66
475	65633	4294967498	26.64	foo	66
477	65674	4294967313	8.45	foo	66
484	65685	4294967387	45.99	foo	66
462	65697	4294967452	57.29	foo	66
372	65718	4294967401	83.87	foo	66
267	65738	4294967371	70.89	foo	66
259	65767	4294967378	51.72	foo	66
436	65541	4294967471	19.06	foo	67
265	65562	4294967421	53.06	foo	67
295	65654	4294967449	59.55	foo	67
301	65579	4294967497	94.43	foo	68
448	65597	4294967422	70.39	foo	68
501	65606	4294967445	5.08	foo	68
264	65623	4294967481	69.97	foo	68
472	65628	4294967512	8.67	foo	68
439	65703	4294967469	92.55	foo	68
314	65770	4294967398	70.85	foo	68
489	65536	4294967404	33.52	foo	69
473	65599	4294967325	76.72	foo	69
304	65695	4294967384	13.94	foo	69
440	65720	4294967373	9.56	foo	69
492	65751	4294967324	45.1	foo	69
376	65751	4294967384	88.77	foo	69
430	65539	4294967534	18.89	foo	70
342	65569	4294967492	64.3	foo	70
283	65620	4294967355	9.13	foo	70
443	65700	4294967448	52.44	foo	70
285	65718	4294967353	37.1	foo	70
312	65742	4294967540	54.43	foo	70
361	65746	4294967332	97.57	foo	70
268	65766	4294967299	88.36	foo	70
373	65773	4294967502	46.18	foo	70
298	65540	4294967510	91.63	foo	71
347	65584	4294967549	99.65	foo	71
276	65584	4294967431	8.07	foo	71
260	65589	4294967329	2.35	foo	71
418	65598	4294967439	80.3	foo	71
280	65610	4294967451	33.36	foo	71
439	65618	4294967349	49.78	foo	71
496	65643	4294967349	84.72	foo	71
306	65664	4294967541	34.97	foo	71
324	65681	4294967388	47.59	foo	71
356	65715	4294967364	26.47	foo	71
332	65717	4294967337	10.73	foo	71
391	65749	4294967412	41.2	foo	71
363	65787	4294967465	59.5	foo	71
267	65537	4294967460	55.2	foo	72
489	65549	4294967424	82.56	foo	72
408	65581	4294967453	7.82	foo	72
383	65638	4294967398	23.6	foo	72
389	65724	4294967300	69.74	foo	72
503	65727	4294967376	79.99	foo	72
430	65763	4294967324	99.91	foo	72
421	65764	4294967458	88.8	foo	72
469	65765	4294967500	60.22	foo	72
310	65780	4294967507	80.99	foo	72
324	65582	4294967330	59.68	foo	73
340	65584	4294967330	21.28	foo	73
451	65599	4294967373	36.89	foo	73
318	65610	4294967401	11.91	foo	73
394	65657	4294967486	11.82	foo	73
306	65659	4294967341	34.58	foo	73
337	65775	4294967406	57.12	foo	73
487	65563	4294967305	60.06	foo	74
290	65630	4294967436	57.89	foo	74
309	65662	4294967518	4.17	foo	74
422	65682	4294967316	37.6	foo	74
289	65733	4294967495	77.84	foo	74
504	65766	4294967520	89.93	foo	74
298	65773	4294967400	21.8	foo	74
256	65778	4294967487	74.15	foo	74
504	65564	4294967534	7.56	foo	75
499	65696	4294967405	53.59	foo	75
393	65726	4294967467	39.98	foo	75
479	65749	4294967528	80.52	foo	75
461	65760	4294967326	3.21	foo	75
422	65552	4294967325	26.73	foo	76
368	65608	4294967506	16.69	foo	76
400	65661	4294967379	15.81	foo	76
258	65724	4294967365	70.0	foo	76
435	65578	4294967474	38.62	foo	77
461	65581	4294967449	89.55	foo	77
320	65585	4294967344	45.59	foo	77
485	65651	4294967326	50.7	foo	77
NULL	65681	4294967535	18.56	foo	77
283	65711	4294967523	10.17	foo	77
507	65721	4294967488	78.31	foo	77
441	65727	4294967391	43.13	foo	77
337	65766	4294967334	12.16	foo	77
483	65784	4294967330	23.07	foo	77
328	65789	4294967489	81.32	foo	77
417	65552	4294967300	64.0	foo	78
448	65568	4294967513	74.02	foo	78
275	65596	4294967299	21.7	foo	78
419	65633	4294967299	34.35	foo	78
421	65633	4294967410	87.67	foo	78
351	65755	4294967337	99.29	foo	78
509	65758	4294967531	21.45	foo	78
377	65570	4294967410	22.12	foo	79
451	65662	4294967487	73.63	foo	79
399	65664	4294967492	41.85	foo	79
396	65686	4294967335	89.28	foo	79
422	65691	4294967299	39.21	foo	79
486	65694	4294967305	10.25	foo	79
340	65744	4294967531	79.49	foo	79
419	65755	4294967329	91.05	foo	79
509	65553	4294967544	50.28	foo	80
407	65588	4294967371	51.25	foo	80
333	65614	4294967331	13.1	foo	80
455	65644	4294967460	75.35	foo	80
277	65671	4294967370	97.26	foo	80
390	65766	4294967360	67.26	foo	80
272	65548	4294967413	40.04	foo	81
448	65550	4294967533	25.88	foo	81
344	65677	4294967530	28.11	foo	81
338	65681	4294967519	50.66	foo	81
283	65702	4294967424	24.52	foo	81
449	65726	4294967395	97.09	foo	81
331	65745	4294967531	80.71	foo	81
305	65783	4294967443	39.01	foo	81
257	65654	4294967497	9.8	foo	82
257	65655	4294967320	40.42	foo	82
337	65662	4294967453	11.57	foo	82
272	65699	4294967488	92.82	foo	82
393	65763	4294967452	66.51	foo	82
303	65764	4294967480	54.34	foo	82
324	65789	4294967492	14.92	foo	82
353	65538	4294967339	0.08	foo	83
382	65550	4294967451	35.0	foo	83
420	65563	4294967400	85.1	foo	83
451	65583	4294967443	10.13	foo	83
395	65645	4294967509	99.62	foo	83
311	65653	4294967419	61.21	foo	83
432	65656	4294967303	26.08	foo	83
336	65672	4294967347	9.71	foo	83
265	65705	4294967392	19.28	foo	83
493	65742	4294967352	76.33	foo	83
316	65749	4294967342	90.51	foo	83
279	65754	4294967435	5.4	foo	83
373	65585	4294967486	14.13	foo	84
437	65601	4294967357	49.44	foo	84
496	65604	4294967329	59.45	foo	84
305	65637	4294967402	10.16	foo	84
403	65656	4294967550	7.05	foo	84
323	65685	4294967477	61.86	foo	84
492	65737	4294967467	23.45	foo	84
447	65755	4294967387	4.92	foo	84
326	65782	4294967362	17.87	foo	84
463	65542	4294967348	3.86	foo	85
349	65573	4294967308	97.46	foo	85
334	65610	4294967373	2.96	foo	85
454	65620	4294967520	65.55	foo	85
468	65643	4294967430	86.63	foo	85
461	65654	4294967507	89.1	foo	85
495	65656	4294967507	90.12	foo	85
283	65746	4294967384	11.68	foo	85
439	65759	4294967530	20.64	foo	85
392	65760	4294967436	65.02	foo	85
313	65780	4294967303	71.01	foo	85
448	65784	4294967299	90.56	foo	85
451	65580	4294967451	8.71	foo	86
422	65582	4294967353	87.83	foo	86
391	65620	4294967337	34.73	foo	86
425	65626	4294967374	87.4	foo	86
330	65676	4294967480	88.47	foo	86
349	65686	4294967512	62.85	foo	86
257	65748	4294967427	32.52	foo	86
466	65562	4294967446	35.62	foo	87
469	65580	4294967411	90.2	foo	87
361	65662	4294967331	97.56	foo	87
325	65730	4294967516	13.15	foo	87
341	65733	4294967412	18.93	foo	87
328	65547	4294967517	70.35	foo	88
404	65548	4294967382	6.87	foo	88
334	65583	4294967468	5.88	foo	88
277	65585	4294967398	3.97	foo	88
409	65607	4294967509	99.13	foo	88
348	65645	4294967328	46.88	foo	88
504	65652	4294967419	78.28	foo	88
346	65654	4294967369	48.23	foo	88
331	65682	4294967412	73.32	foo	88
404	65730	4294967335	17.74	foo	88
322	65733	4294967316	80.58	foo	88
307	65747	4294967389	31.86	foo	88
437	65762	4294967385	76.71	foo	88
496	65767	4294967448	14.3	foo	88
445	65778	4294967422	33.67	foo	88
466	65541	4294967468	85.51	foo	89
313	65550	4294967361	41.89	foo	89
278	65570	4294967466	55.63	foo	89
NULL	65579	4294967419	46.02	foo	89
478	65583	4294967522	92.4	foo	89
278	65593	4294967432	8.61	foo	89
354	65593	4294967462	97.51	foo	89
436	65623	4294967461	89.03	foo	89
300	65675	4294967384	49.77	foo	89
476	65728	4294967549	62.3	foo	89
492	65736	4294967336	14.93	foo	89
354	65777	4294967509	71.68	foo	89
273	65548	4294967366	62.9	foo	90
509	65602	4294967415	7.96	foo	90
269	65648	4294967392	42.31	foo	90
487	65695	4294967313	57.93	foo	90
414	65702	4294967337	66.36	foo	90
406	65763	4294967450	0.15	foo	90
307	65544	4294967344	4.57	foo	91
448	65559	4294967320	90.35	foo	91
295	65587	4294967506	76.93	foo	91
384	65644	4294967533	10.09	foo	91
262	65661	4294967391	73.65	foo	91
415	65672	4294967316	59.45	foo	91
346	65696	4294967355	71.31	foo	91
392	65708	4294967305	71.35	foo	91
352	65559	4294967353	3.82	foo	92
335	65603	4294967296	80.96	foo	92
329	65610	4294967521	47.08	foo	92
344	65618	4294967390	46.09	foo	92
306	65657	4294967337	50.26	foo	92
363	65697	4294967310	13.89	foo	92
297	65704	4294967403	84.83	foo	92
418	65706	4294967367	2.07	foo	92
490	65745	4294967420	10.22	foo	92
441	65549	4294967389	95.11	foo	93
504	65557	4294967500	22.68	foo	93
342	65623	4294967405	99.67	foo	93
433	65629	4294967439	39.83	foo	93
356	65650	4294967428	53.94	foo	93
326	65678	4294967428	45.19	foo	93
373	65707	4294967343	95.48	foo	93
426	65714	4294967478	83.4	foo	93
403	65752	4294967497	97.65	foo	93
403	65782	4294967355	74.53	foo	93
335	65603	4294967357	68.25	foo	94
475	65606	4294967503	62.14	foo	94
485	65735	4294967472	69.88	foo	94
256	65747	4294967347	32.18	foo	94
474	65759	4294967317	57.08	foo	94
415	65560	4294967444	4.71	foo	95
300	65568	4294967520	39.82	foo	95
329	65628	4294967396	61.7	foo	95
511	65636	4294967325	71.5	foo	95
482	65637	4294967342	9.7	foo	95
424	65643	4294967442	36.22	foo	95
489	65711	4294967493	11.89	foo	95
432	65711	4294967378	39.87	foo	95
459	65760	4294967524	85.74	foo	95
435	65658	4294967523	6.74	foo	96
421	65692	4294967526	98.48	foo	96
315	65769	4294967323	94.68	foo	96
263	65769	4294967532	53.02	foo	96
266	65544	4294967373	32.2	foo	97
283	65589	4294967434	37.8	foo	97
360	65590	4294967324	68.96	foo	97
491	65618	4294967423	32.25	foo	97
503	65690	4294967463	77.57	foo	97
323	65704	4294967477	60.12	foo	97
349	65769	4294967386	12.9	foo	97
290	65774	4294967311	71.07	foo	97
452	65544	4294967309	73.93	foo	98
381	65563	4294967458	41.29	foo	98
466	65602	4294967470	8.32	foo	98
430	65616	4294967451	35.89	foo	98
432	65669	4294967373	63.12	foo	98
435	65546	4294967535	22.85	foo	99
303	65566	4294967353	98.57	foo	99
373	65579	4294967465	24.02	foo	99
497	65656	4294967390	32.37	foo	99
282	65659	4294967394	30.62	foo	99
436	65746	4294967342	39.81	foo	99
409	65536	4294967490	46.97	foo	NULL
374	65560	4294967516	65.43	foo	NULL
473	65720	4294967324	80.74	foo	NULL
PREHOOK: query: select count(*) from over1k_part2_orc
PREHOOK: type: QUERY
PREHOOK: Input: default@over1k_part2_orc
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=100
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=101
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=102
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=103
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=104
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=105
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=106
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=107
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=108
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=109
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=110
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=111
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=112
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=113
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=114
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=115
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=116
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=117
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=118
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=119
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=120
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=121
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=122
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=123
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=124
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=27
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=28
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=29
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=30
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=31
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=32
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=33
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=34
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=35
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=36
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=37
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=38
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=39
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=40
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=41
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=42
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=43
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=44
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=45
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=46
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=47
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=48
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=49
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=50
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=51
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=52
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=53
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=54
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=55
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=56
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=57
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=58
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=59
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=60
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=61
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=62
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=63
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=64
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=65
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=66
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=67
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=68
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=69
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=70
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=71
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=72
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=73
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=74
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=75
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=76
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=77
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=78
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=79
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=80
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=81
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=82
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=83
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=84
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=85
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=86
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=87
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=88
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=89
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=90
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=91
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=92
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=93
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=94
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=95
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=96
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=97
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=98
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=99
PREHOOK: Input: default@over1k_part2_orc@ds=foo/t=__HIVE_DEFAULT_PARTITION__
#### A masked pattern was here ####
POSTHOOK: query: select count(*) from over1k_part2_orc
POSTHOOK: type: QUERY
POSTHOOK: Input: default@over1k_part2_orc
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=100
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=101
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=102
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=103
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=104
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=105
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=106
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=107
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=108
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=109
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=110
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=111
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=112
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=113
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=114
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=115
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=116
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=117
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=118
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=119
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=120
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=121
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=122
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=123
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=124
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=27
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=28
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=29
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=30
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=31
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=32
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=33
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=34
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=35
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=36
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=37
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=38
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=39
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=40
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=41
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=42
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=43
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=44
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=45
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=46
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=47
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=48
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=49
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=50
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=51
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=52
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=53
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=54
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=55
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=56
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=57
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=58
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=59
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=60
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=61
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=62
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=63
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=64
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=65
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=66
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=67
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=68
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=69
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=70
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=71
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=72
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=73
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=74
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=75
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=76
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=77
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=78
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=79
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=80
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=81
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=82
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=83
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=84
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=85
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=86
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=87
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=88
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=89
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=90
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=91
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=92
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=93
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=94
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=95
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=96
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=97
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=98
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=99
POSTHOOK: Input: default@over1k_part2_orc@ds=foo/t=__HIVE_DEFAULT_PARTITION__
#### A masked pattern was here ####
806
PREHOOK: query: create table over1k_part_buck_sort2_orc(
           si smallint,
           i int,
           b bigint,
           f float)
       partitioned by (t tinyint)
       clustered by (si)
       sorted by (f) into 1 buckets
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@over1k_part_buck_sort2_orc
POSTHOOK: query: create table over1k_part_buck_sort2_orc(
           si smallint,
           i int,
           b bigint,
           f float)
       partitioned by (t tinyint)
       clustered by (si)
       sorted by (f) into 1 buckets
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@over1k_part_buck_sort2_orc
PREHOOK: query: explain insert overwrite table over1k_part_buck_sort2_orc partition(t) select si,i,b,f,t from over1k_orc where t is null or t=27
PREHOOK: type: QUERY
PREHOOK: Input: default@over1k_orc
PREHOOK: Output: default@over1k_part_buck_sort2_orc
POSTHOOK: query: explain insert overwrite table over1k_part_buck_sort2_orc partition(t) select si,i,b,f,t from over1k_orc where t is null or t=27
POSTHOOK: type: QUERY
POSTHOOK: Input: default@over1k_orc
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-2 depends on stages: Stage-1
  Stage-0 depends on stages: Stage-2
  Stage-3 depends on stages: Stage-0

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE)
        Reducer 3 <- Reducer 2 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: over1k_orc
                  filterExpr: (t is null or (t = 27Y)) (type: boolean)
                  Statistics: Num rows: 1049 Data size: 25160 Basic stats: COMPLETE Column stats: COMPLETE
                  Filter Operator
                    predicate: ((t = 27Y) or t is null) (type: boolean)
                    Statistics: Num rows: 11 Data size: 264 Basic stats: COMPLETE Column stats: COMPLETE
                    Select Operator
                      expressions: si (type: smallint), i (type: int), b (type: bigint), f (type: float), t (type: tinyint)
                      outputColumnNames: _col0, _col1, _col2, _col3, _col4
                      Statistics: Num rows: 11 Data size: 264 Basic stats: COMPLETE Column stats: COMPLETE
                      Reduce Output Operator
                        key expressions: _col3 (type: float)
                        sort order: +
                        Map-reduce partition columns: _col0 (type: smallint)
                        Statistics: Num rows: 11 Data size: 264 Basic stats: COMPLETE Column stats: COMPLETE
                        value expressions: _col0 (type: smallint), _col1 (type: int), _col2 (type: bigint), _col4 (type: tinyint)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Reducer 2 
            Execution mode: llap
            Reduce Operator Tree:
              Select Operator
                expressions: VALUE._col0 (type: smallint), VALUE._col1 (type: int), VALUE._col2 (type: bigint), KEY.reducesinkkey0 (type: float), VALUE._col3 (type: tinyint)
                outputColumnNames: _col0, _col1, _col2, _col3, _col4
                Statistics: Num rows: 11 Data size: 264 Basic stats: COMPLETE Column stats: COMPLETE
                File Output Operator
                  compressed: false
                  Statistics: Num rows: 11 Data size: 264 Basic stats: COMPLETE Column stats: COMPLETE
                  table:
                      input format: org.apache.hadoop.mapred.TextInputFormat
                      output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
                      serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
                      name: default.over1k_part_buck_sort2_orc
                Select Operator
                  expressions: _col0 (type: smallint), _col1 (type: int), _col2 (type: bigint), _col3 (type: float), _col4 (type: tinyint)
                  outputColumnNames: si, i, b, f, t
                  Statistics: Num rows: 11 Data size: 264 Basic stats: COMPLETE Column stats: COMPLETE
                  Group By Operator
                    aggregations: compute_stats(si, 'hll'), compute_stats(i, 'hll'), compute_stats(b, 'hll'), compute_stats(f, 'hll')
                    keys: t (type: tinyint)
                    mode: hash
                    outputColumnNames: _col0, _col1, _col2, _col3, _col4
                    Statistics: Num rows: 5 Data size: 8500 Basic stats: COMPLETE Column stats: COMPLETE
                    Reduce Output Operator
                      key expressions: _col0 (type: tinyint)
                      sort order: +
                      Map-reduce partition columns: _col0 (type: tinyint)
                      Statistics: Num rows: 5 Data size: 8500 Basic stats: COMPLETE Column stats: COMPLETE
                      value expressions: _col1 (type: struct<columntype:string,min:bigint,max:bigint,countnulls:bigint,bitvector:binary>), _col2 (type: struct<columntype:string,min:bigint,max:bigint,countnulls:bigint,bitvector:binary>), _col3 (type: struct<columntype:string,min:bigint,max:bigint,countnulls:bigint,bitvector:binary>), _col4 (type: struct<columntype:string,min:double,max:double,countnulls:bigint,bitvector:binary>)
        Reducer 3 
            Execution mode: llap
            Reduce Operator Tree:
              Group By Operator
                aggregations: compute_stats(VALUE._col0), compute_stats(VALUE._col1), compute_stats(VALUE._col2), compute_stats(VALUE._col3)
                keys: KEY._col0 (type: tinyint)
                mode: mergepartial
                outputColumnNames: _col0, _col1, _col2, _col3, _col4
                Statistics: Num rows: 5 Data size: 8820 Basic stats: COMPLETE Column stats: COMPLETE
                Select Operator
                  expressions: _col1 (type: struct<columntype:string,min:bigint,max:bigint,countnulls:bigint,numdistinctvalues:bigint,ndvbitvector:binary>), _col2 (type: struct<columntype:string,min:bigint,max:bigint,countnulls:bigint,numdistinctvalues:bigint,ndvbitvector:binary>), _col3 (type: struct<columntype:string,min:bigint,max:bigint,countnulls:bigint,numdistinctvalues:bigint,ndvbitvector:binary>), _col4 (type: struct<columntype:string,min:double,max:double,countnulls:bigint,numdistinctvalues:bigint,ndvbitvector:binary>), _col0 (type: tinyint)
                  outputColumnNames: _col0, _col1, _col2, _col3, _col4
                  Statistics: Num rows: 5 Data size: 8820 Basic stats: COMPLETE Column stats: COMPLETE
                  File Output Operator
                    compressed: false
                    Statistics: Num rows: 5 Data size: 8820 Basic stats: COMPLETE Column stats: COMPLETE
                    table:
                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-2
    Dependency Collection

  Stage: Stage-0
    Move Operator
      tables:
          partition:
            t 
          replace: true
          table:
              input format: org.apache.hadoop.mapred.TextInputFormat
              output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
              serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
              name: default.over1k_part_buck_sort2_orc

  Stage: Stage-3
    Stats Work
      Basic Stats Work:
      Column Stats Desc:
          Columns: si, i, b, f
          Column Types: smallint, int, bigint, float
          Table: default.over1k_part_buck_sort2_orc

PREHOOK: query: explain insert overwrite table over1k_part_buck_sort2_orc partition(t) select si,i,b,f,t from over1k_orc where t is null or t=27
PREHOOK: type: QUERY
PREHOOK: Input: default@over1k_orc
PREHOOK: Output: default@over1k_part_buck_sort2_orc
POSTHOOK: query: explain insert overwrite table over1k_part_buck_sort2_orc partition(t) select si,i,b,f,t from over1k_orc where t is null or t=27
POSTHOOK: type: QUERY
POSTHOOK: Input: default@over1k_orc
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-2 depends on stages: Stage-1
  Stage-0 depends on stages: Stage-2
  Stage-3 depends on stages: Stage-0

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: over1k_orc
                  filterExpr: (t is null or (t = 27Y)) (type: boolean)
                  Statistics: Num rows: 1049 Data size: 25160 Basic stats: COMPLETE Column stats: COMPLETE
                  Filter Operator
                    predicate: ((t = 27Y) or t is null) (type: boolean)
                    Statistics: Num rows: 11 Data size: 264 Basic stats: COMPLETE Column stats: COMPLETE
                    Select Operator
                      expressions: si (type: smallint), i (type: int), b (type: bigint), f (type: float), t (type: tinyint)
                      outputColumnNames: _col0, _col1, _col2, _col3, _col4
                      Statistics: Num rows: 11 Data size: 264 Basic stats: COMPLETE Column stats: COMPLETE
                      Reduce Output Operator
                        key expressions: _col4 (type: tinyint), _bucket_number (type: string), _col3 (type: float)
                        sort order: +++
                        Map-reduce partition columns: _col4 (type: tinyint)
                        value expressions: _col0 (type: smallint), _col1 (type: int), _col2 (type: bigint)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Reducer 2 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Select Operator
                expressions: VALUE._col0 (type: smallint), VALUE._col1 (type: int), VALUE._col2 (type: bigint), KEY._col3 (type: float), KEY._col4 (type: tinyint), KEY._bucket_number (type: string)
                outputColumnNames: _col0, _col1, _col2, _col3, _col4, _bucket_number
                File Output Operator
                  compressed: false
                  Dp Sort State: PARTITION_BUCKET_SORTED
                  Statistics: Num rows: 11 Data size: 264 Basic stats: COMPLETE Column stats: COMPLETE
                  table:
                      input format: org.apache.hadoop.mapred.TextInputFormat
                      output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
                      serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
                      name: default.over1k_part_buck_sort2_orc

  Stage: Stage-2
    Dependency Collection

  Stage: Stage-0
    Move Operator
      tables:
          partition:
            t 
          replace: true
          table:
              input format: org.apache.hadoop.mapred.TextInputFormat
              output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
              serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
              name: default.over1k_part_buck_sort2_orc

  Stage: Stage-3
    Stats Work
      Basic Stats Work:
      Column Stats Desc:
          Columns: si, i, b, f
          Column Types: smallint, int, bigint, float
          Table: default.over1k_part_buck_sort2_orc

PREHOOK: query: insert overwrite table over1k_part_buck_sort2_orc partition(t) select si,i,b,f,t from over1k_orc where t is null or t=27
PREHOOK: type: QUERY
PREHOOK: Input: default@over1k_orc
PREHOOK: Output: default@over1k_part_buck_sort2_orc
POSTHOOK: query: insert overwrite table over1k_part_buck_sort2_orc partition(t) select si,i,b,f,t from over1k_orc where t is null or t=27
POSTHOOK: type: QUERY
POSTHOOK: Input: default@over1k_orc
POSTHOOK: Output: default@over1k_part_buck_sort2_orc@t=27
POSTHOOK: Output: default@over1k_part_buck_sort2_orc@t=__HIVE_DEFAULT_PARTITION__
POSTHOOK: Lineage: over1k_part_buck_sort2_orc PARTITION(t=27).b SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:b, type:bigint, comment:null), ]
POSTHOOK: Lineage: over1k_part_buck_sort2_orc PARTITION(t=27).f SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:f, type:float, comment:null), ]
POSTHOOK: Lineage: over1k_part_buck_sort2_orc PARTITION(t=27).i SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:i, type:int, comment:null), ]
POSTHOOK: Lineage: over1k_part_buck_sort2_orc PARTITION(t=27).si SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:si, type:smallint, comment:null), ]
POSTHOOK: Lineage: over1k_part_buck_sort2_orc PARTITION(t=__HIVE_DEFAULT_PARTITION__).b SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:b, type:bigint, comment:null), ]
POSTHOOK: Lineage: over1k_part_buck_sort2_orc PARTITION(t=__HIVE_DEFAULT_PARTITION__).f SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:f, type:float, comment:null), ]
POSTHOOK: Lineage: over1k_part_buck_sort2_orc PARTITION(t=__HIVE_DEFAULT_PARTITION__).i SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:i, type:int, comment:null), ]
POSTHOOK: Lineage: over1k_part_buck_sort2_orc PARTITION(t=__HIVE_DEFAULT_PARTITION__).si SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:si, type:smallint, comment:null), ]
PREHOOK: query: desc formatted over1k_part_buck_sort2_orc partition(t=27)
PREHOOK: type: DESCTABLE
PREHOOK: Input: default@over1k_part_buck_sort2_orc
POSTHOOK: query: desc formatted over1k_part_buck_sort2_orc partition(t=27)
POSTHOOK: type: DESCTABLE
POSTHOOK: Input: default@over1k_part_buck_sort2_orc
# col_name            	data_type           	comment             
si                  	smallint            	                    
i                   	int                 	                    
b                   	bigint              	                    
f                   	float               	                    
	 	 
# Partition Information	 	 
# col_name            	data_type           	comment             
t                   	tinyint             	                    
	 	 
# Detailed Partition Information	 	 
Partition Value:    	[27]                	 
Database:           	default             	 
Table:              	over1k_part_buck_sort2_orc	 
#### A masked pattern was here ####
Partition Parameters:	 	 
	COLUMN_STATS_ACCURATE	{\"BASIC_STATS\":\"true\",\"COLUMN_STATS\":{\"b\":\"true\",\"f\":\"true\",\"i\":\"true\",\"si\":\"true\"}}
	numFiles            	1                   
	numRows             	16                  
	rawDataSize         	415                 
	totalSize           	431                 
#### A masked pattern was here ####
	 	 
# Storage Information	 	 
SerDe Library:      	org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe	 
InputFormat:        	org.apache.hadoop.mapred.TextInputFormat	 
OutputFormat:       	org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat	 
Compressed:         	No                  	 
Num Buckets:        	1                   	 
Bucket Columns:     	[si]                	 
Sort Columns:       	[Order(col:f, order:1)]	 
Storage Desc Params:	 	 
	serialization.format	1                   
PREHOOK: query: desc formatted over1k_part_buck_sort2_orc partition(t="__HIVE_DEFAULT_PARTITION__")
PREHOOK: type: DESCTABLE
PREHOOK: Input: default@over1k_part_buck_sort2_orc
POSTHOOK: query: desc formatted over1k_part_buck_sort2_orc partition(t="__HIVE_DEFAULT_PARTITION__")
POSTHOOK: type: DESCTABLE
POSTHOOK: Input: default@over1k_part_buck_sort2_orc
# col_name            	data_type           	comment             
si                  	smallint            	                    
i                   	int                 	                    
b                   	bigint              	                    
f                   	float               	                    
	 	 
# Partition Information	 	 
# col_name            	data_type           	comment             
t                   	tinyint             	                    
	 	 
# Detailed Partition Information	 	 
Partition Value:    	[__HIVE_DEFAULT_PARTITION__]	 
Database:           	default             	 
Table:              	over1k_part_buck_sort2_orc	 
#### A masked pattern was here ####
Partition Parameters:	 	 
	COLUMN_STATS_ACCURATE	{\"BASIC_STATS\":\"true\",\"COLUMN_STATS\":{\"b\":\"true\",\"f\":\"true\",\"i\":\"true\",\"si\":\"true\"}}
	numFiles            	1                   
	numRows             	3                   
	rawDataSize         	78                  
	totalSize           	81                  
#### A masked pattern was here ####
	 	 
# Storage Information	 	 
SerDe Library:      	org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe	 
InputFormat:        	org.apache.hadoop.mapred.TextInputFormat	 
OutputFormat:       	org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat	 
Compressed:         	No                  	 
Num Buckets:        	1                   	 
Bucket Columns:     	[si]                	 
Sort Columns:       	[Order(col:f, order:1)]	 
Storage Desc Params:	 	 
	serialization.format	1                   
PREHOOK: query: explain select * from over1k_part_buck_sort2_orc
PREHOOK: type: QUERY
PREHOOK: Input: default@over1k_part_buck_sort2_orc
PREHOOK: Input: default@over1k_part_buck_sort2_orc@t=27
PREHOOK: Input: default@over1k_part_buck_sort2_orc@t=__HIVE_DEFAULT_PARTITION__
#### A masked pattern was here ####
POSTHOOK: query: explain select * from over1k_part_buck_sort2_orc
POSTHOOK: type: QUERY
POSTHOOK: Input: default@over1k_part_buck_sort2_orc
POSTHOOK: Input: default@over1k_part_buck_sort2_orc@t=27
POSTHOOK: Input: default@over1k_part_buck_sort2_orc@t=__HIVE_DEFAULT_PARTITION__
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-0 is a root stage

STAGE PLANS:
  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        TableScan
          alias: over1k_part_buck_sort2_orc
          Select Operator
            expressions: si (type: smallint), i (type: int), b (type: bigint), f (type: float), t (type: tinyint)
            outputColumnNames: _col0, _col1, _col2, _col3, _col4
            ListSink

PREHOOK: query: select * from over1k_part_buck_sort2_orc
PREHOOK: type: QUERY
PREHOOK: Input: default@over1k_part_buck_sort2_orc
PREHOOK: Input: default@over1k_part_buck_sort2_orc@t=27
PREHOOK: Input: default@over1k_part_buck_sort2_orc@t=__HIVE_DEFAULT_PARTITION__
#### A masked pattern was here ####
POSTHOOK: query: select * from over1k_part_buck_sort2_orc
POSTHOOK: type: QUERY
POSTHOOK: Input: default@over1k_part_buck_sort2_orc
POSTHOOK: Input: default@over1k_part_buck_sort2_orc@t=27
POSTHOOK: Input: default@over1k_part_buck_sort2_orc@t=__HIVE_DEFAULT_PARTITION__
#### A masked pattern was here ####
329	65778	4294967451	6.63	27
367	65675	4294967518	12.32	27
278	65622	4294967516	25.67	27
335	65636	4294967505	37.14	27
262	65787	4294967371	57.35	27
490	65680	4294967347	57.46	27
335	65617	4294967381	64.87	27
482	65624	4294967313	78.98	27
457	65570	4294967464	81.58	27
405	65536	4294967508	82.24	27
287	65708	4294967542	83.33	27
261	65619	4294967401	88.78	27
256	65599	4294967383	89.55	27
503	65628	4294967371	95.07	27
401	65779	4294967402	97.39	27
340	65677	4294967461	98.96	27
409	65536	4294967490	46.97	NULL
374	65560	4294967516	65.43	NULL
473	65720	4294967324	80.74	NULL
PREHOOK: query: explain select count(*) from over1k_part_buck_sort2_orc
PREHOOK: type: QUERY
PREHOOK: Input: default@over1k_part_buck_sort2_orc
PREHOOK: Input: default@over1k_part_buck_sort2_orc@t=27
PREHOOK: Input: default@over1k_part_buck_sort2_orc@t=__HIVE_DEFAULT_PARTITION__
#### A masked pattern was here ####
POSTHOOK: query: explain select count(*) from over1k_part_buck_sort2_orc
POSTHOOK: type: QUERY
POSTHOOK: Input: default@over1k_part_buck_sort2_orc
POSTHOOK: Input: default@over1k_part_buck_sort2_orc@t=27
POSTHOOK: Input: default@over1k_part_buck_sort2_orc@t=__HIVE_DEFAULT_PARTITION__
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (CUSTOM_SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: over1k_part_buck_sort2_orc
                  Statistics: Num rows: 19 Data size: 645 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    Statistics: Num rows: 19 Data size: 645 Basic stats: COMPLETE Column stats: COMPLETE
                    Group By Operator
                      aggregations: count()
                      mode: hash
                      outputColumnNames: _col0
                      Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: COMPLETE
                      Reduce Output Operator
                        sort order: 
                        Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: COMPLETE
                        value expressions: _col0 (type: bigint)
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Reducer 2 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Group By Operator
                aggregations: count(VALUE._col0)
                mode: mergepartial
                outputColumnNames: _col0
                Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: COMPLETE
                File Output Operator
                  compressed: false
                  Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: COMPLETE
                  table:
                      input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                      output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                      serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select count(*) from over1k_part_buck_sort2_orc
PREHOOK: type: QUERY
PREHOOK: Input: default@over1k_part_buck_sort2_orc
PREHOOK: Input: default@over1k_part_buck_sort2_orc@t=27
PREHOOK: Input: default@over1k_part_buck_sort2_orc@t=__HIVE_DEFAULT_PARTITION__
#### A masked pattern was here ####
POSTHOOK: query: select count(*) from over1k_part_buck_sort2_orc
POSTHOOK: type: QUERY
POSTHOOK: Input: default@over1k_part_buck_sort2_orc
POSTHOOK: Input: default@over1k_part_buck_sort2_orc@t=27
POSTHOOK: Input: default@over1k_part_buck_sort2_orc@t=__HIVE_DEFAULT_PARTITION__
#### A masked pattern was here ####
19
PREHOOK: query: insert overwrite table over1k_part_buck_sort2_orc partition(t) select si,i,b,f,t from over1k_orc where t is null or t=27
PREHOOK: type: QUERY
PREHOOK: Input: default@over1k_orc
PREHOOK: Output: default@over1k_part_buck_sort2_orc
POSTHOOK: query: insert overwrite table over1k_part_buck_sort2_orc partition(t) select si,i,b,f,t from over1k_orc where t is null or t=27
POSTHOOK: type: QUERY
POSTHOOK: Input: default@over1k_orc
POSTHOOK: Output: default@over1k_part_buck_sort2_orc@t=27
POSTHOOK: Output: default@over1k_part_buck_sort2_orc@t=__HIVE_DEFAULT_PARTITION__
POSTHOOK: Lineage: over1k_part_buck_sort2_orc PARTITION(t=27).b SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:b, type:bigint, comment:null), ]
POSTHOOK: Lineage: over1k_part_buck_sort2_orc PARTITION(t=27).f SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:f, type:float, comment:null), ]
POSTHOOK: Lineage: over1k_part_buck_sort2_orc PARTITION(t=27).i SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:i, type:int, comment:null), ]
POSTHOOK: Lineage: over1k_part_buck_sort2_orc PARTITION(t=27).si SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:si, type:smallint, comment:null), ]
POSTHOOK: Lineage: over1k_part_buck_sort2_orc PARTITION(t=__HIVE_DEFAULT_PARTITION__).b SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:b, type:bigint, comment:null), ]
POSTHOOK: Lineage: over1k_part_buck_sort2_orc PARTITION(t=__HIVE_DEFAULT_PARTITION__).f SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:f, type:float, comment:null), ]
POSTHOOK: Lineage: over1k_part_buck_sort2_orc PARTITION(t=__HIVE_DEFAULT_PARTITION__).i SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:i, type:int, comment:null), ]
POSTHOOK: Lineage: over1k_part_buck_sort2_orc PARTITION(t=__HIVE_DEFAULT_PARTITION__).si SIMPLE [(over1k_orc)over1k_orc.FieldSchema(name:si, type:smallint, comment:null), ]
PREHOOK: query: desc formatted over1k_part_buck_sort2_orc partition(t=27)
PREHOOK: type: DESCTABLE
PREHOOK: Input: default@over1k_part_buck_sort2_orc
POSTHOOK: query: desc formatted over1k_part_buck_sort2_orc partition(t=27)
POSTHOOK: type: DESCTABLE
POSTHOOK: Input: default@over1k_part_buck_sort2_orc
# col_name            	data_type           	comment             
si                  	smallint            	                    
i                   	int                 	                    
b                   	bigint              	                    
f                   	float               	                    
	 	 
# Partition Information	 	 
# col_name            	data_type           	comment             
t                   	tinyint             	                    
	 	 
# Detailed Partition Information	 	 
Partition Value:    	[27]                	 
Database:           	default             	 
Table:              	over1k_part_buck_sort2_orc	 
#### A masked pattern was here ####
Partition Parameters:	 	 
	COLUMN_STATS_ACCURATE	{\"BASIC_STATS\":\"true\",\"COLUMN_STATS\":{\"b\":\"true\",\"f\":\"true\",\"i\":\"true\",\"si\":\"true\"}}
	numFiles            	1                   
	numRows             	16                  
	rawDataSize         	415                 
	totalSize           	431                 
#### A masked pattern was here ####
	 	 
# Storage Information	 	 
SerDe Library:      	org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe	 
InputFormat:        	org.apache.hadoop.mapred.TextInputFormat	 
OutputFormat:       	org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat	 
Compressed:         	No                  	 
Num Buckets:        	1                   	 
Bucket Columns:     	[si]                	 
Sort Columns:       	[Order(col:f, order:1)]	 
Storage Desc Params:	 	 
	serialization.format	1                   
PREHOOK: query: desc formatted over1k_part_buck_sort2_orc partition(t="__HIVE_DEFAULT_PARTITION__")
PREHOOK: type: DESCTABLE
PREHOOK: Input: default@over1k_part_buck_sort2_orc
POSTHOOK: query: desc formatted over1k_part_buck_sort2_orc partition(t="__HIVE_DEFAULT_PARTITION__")
POSTHOOK: type: DESCTABLE
POSTHOOK: Input: default@over1k_part_buck_sort2_orc
# col_name            	data_type           	comment             
si                  	smallint            	                    
i                   	int                 	                    
b                   	bigint              	                    
f                   	float               	                    
	 	 
# Partition Information	 	 
# col_name            	data_type           	comment             
t                   	tinyint             	                    
	 	 
# Detailed Partition Information	 	 
Partition Value:    	[__HIVE_DEFAULT_PARTITION__]	 
Database:           	default             	 
Table:              	over1k_part_buck_sort2_orc	 
#### A masked pattern was here ####
Partition Parameters:	 	 
	COLUMN_STATS_ACCURATE	{\"BASIC_STATS\":\"true\",\"COLUMN_STATS\":{\"b\":\"true\",\"f\":\"true\",\"i\":\"true\",\"si\":\"true\"}}
	numFiles            	1                   
	numRows             	3                   
	rawDataSize         	78                  
	totalSize           	81                  
#### A masked pattern was here ####
	 	 
# Storage Information	 	 
SerDe Library:      	org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe	 
InputFormat:        	org.apache.hadoop.mapred.TextInputFormat	 
OutputFormat:       	org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat	 
Compressed:         	No                  	 
Num Buckets:        	1                   	 
Bucket Columns:     	[si]                	 
Sort Columns:       	[Order(col:f, order:1)]	 
Storage Desc Params:	 	 
	serialization.format	1                   
PREHOOK: query: explain select * from over1k_part_buck_sort2_orc
PREHOOK: type: QUERY
PREHOOK: Input: default@over1k_part_buck_sort2_orc
PREHOOK: Input: default@over1k_part_buck_sort2_orc@t=27
PREHOOK: Input: default@over1k_part_buck_sort2_orc@t=__HIVE_DEFAULT_PARTITION__
#### A masked pattern was here ####
POSTHOOK: query: explain select * from over1k_part_buck_sort2_orc
POSTHOOK: type: QUERY
POSTHOOK: Input: default@over1k_part_buck_sort2_orc
POSTHOOK: Input: default@over1k_part_buck_sort2_orc@t=27
POSTHOOK: Input: default@over1k_part_buck_sort2_orc@t=__HIVE_DEFAULT_PARTITION__
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-0 is a root stage

STAGE PLANS:
  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        TableScan
          alias: over1k_part_buck_sort2_orc
          Select Operator
            expressions: si (type: smallint), i (type: int), b (type: bigint), f (type: float), t (type: tinyint)
            outputColumnNames: _col0, _col1, _col2, _col3, _col4
            ListSink

PREHOOK: query: select * from over1k_part_buck_sort2_orc
PREHOOK: type: QUERY
PREHOOK: Input: default@over1k_part_buck_sort2_orc
PREHOOK: Input: default@over1k_part_buck_sort2_orc@t=27
PREHOOK: Input: default@over1k_part_buck_sort2_orc@t=__HIVE_DEFAULT_PARTITION__
#### A masked pattern was here ####
POSTHOOK: query: select * from over1k_part_buck_sort2_orc
POSTHOOK: type: QUERY
POSTHOOK: Input: default@over1k_part_buck_sort2_orc
POSTHOOK: Input: default@over1k_part_buck_sort2_orc@t=27
POSTHOOK: Input: default@over1k_part_buck_sort2_orc@t=__HIVE_DEFAULT_PARTITION__
#### A masked pattern was here ####
329	65778	4294967451	6.63	27
367	65675	4294967518	12.32	27
278	65622	4294967516	25.67	27
335	65636	4294967505	37.14	27
262	65787	4294967371	57.35	27
490	65680	4294967347	57.46	27
335	65617	4294967381	64.87	27
482	65624	4294967313	78.98	27
457	65570	4294967464	81.58	27
405	65536	4294967508	82.24	27
287	65708	4294967542	83.33	27
261	65619	4294967401	88.78	27
256	65599	4294967383	89.55	27
503	65628	4294967371	95.07	27
401	65779	4294967402	97.39	27
340	65677	4294967461	98.96	27
409	65536	4294967490	46.97	NULL
374	65560	4294967516	65.43	NULL
473	65720	4294967324	80.74	NULL
PREHOOK: query: explain select count(*) from over1k_part_buck_sort2_orc
PREHOOK: type: QUERY
PREHOOK: Input: default@over1k_part_buck_sort2_orc
PREHOOK: Input: default@over1k_part_buck_sort2_orc@t=27
PREHOOK: Input: default@over1k_part_buck_sort2_orc@t=__HIVE_DEFAULT_PARTITION__
#### A masked pattern was here ####
POSTHOOK: query: explain select count(*) from over1k_part_buck_sort2_orc
POSTHOOK: type: QUERY
POSTHOOK: Input: default@over1k_part_buck_sort2_orc
POSTHOOK: Input: default@over1k_part_buck_sort2_orc@t=27
POSTHOOK: Input: default@over1k_part_buck_sort2_orc@t=__HIVE_DEFAULT_PARTITION__
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (CUSTOM_SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: over1k_part_buck_sort2_orc
                  Statistics: Num rows: 19 Data size: 645 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    Statistics: Num rows: 19 Data size: 645 Basic stats: COMPLETE Column stats: COMPLETE
                    Group By Operator
                      aggregations: count()
                      mode: hash
                      outputColumnNames: _col0
                      Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: COMPLETE
                      Reduce Output Operator
                        sort order: 
                        Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: COMPLETE
                        value expressions: _col0 (type: bigint)
            Execution mode: vectorized, llap
            LLAP IO: no inputs
        Reducer 2 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Group By Operator
                aggregations: count(VALUE._col0)
                mode: mergepartial
                outputColumnNames: _col0
                Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: COMPLETE
                File Output Operator
                  compressed: false
                  Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: COMPLETE
                  table:
                      input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                      output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                      serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select count(*) from over1k_part_buck_sort2_orc
PREHOOK: type: QUERY
PREHOOK: Input: default@over1k_part_buck_sort2_orc
PREHOOK: Input: default@over1k_part_buck_sort2_orc@t=27
PREHOOK: Input: default@over1k_part_buck_sort2_orc@t=__HIVE_DEFAULT_PARTITION__
#### A masked pattern was here ####
POSTHOOK: query: select count(*) from over1k_part_buck_sort2_orc
POSTHOOK: type: QUERY
POSTHOOK: Input: default@over1k_part_buck_sort2_orc
POSTHOOK: Input: default@over1k_part_buck_sort2_orc@t=27
POSTHOOK: Input: default@over1k_part_buck_sort2_orc@t=__HIVE_DEFAULT_PARTITION__
#### A masked pattern was here ####
19
PREHOOK: query: create table addcolumns_vectorization_true_disallowincompatible_true_fileformat_orc_tinyint
(i int,si smallint)
partitioned by (s string)
clustered by (si) into 2 buckets
stored as orc tblproperties ('transactional'='true')
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@addcolumns_vectorization_true_disallowincompatible_true_fileformat_orc_tinyint
POSTHOOK: query: create table addcolumns_vectorization_true_disallowincompatible_true_fileformat_orc_tinyint
(i int,si smallint)
partitioned by (s string)
clustered by (si) into 2 buckets
stored as orc tblproperties ('transactional'='true')
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@addcolumns_vectorization_true_disallowincompatible_true_fileformat_orc_tinyint
PREHOOK: query: explain insert into table addcolumns_vectorization_true_disallowincompatible_true_fileformat_orc_tinyint partition (s)
  select cint,csmallint, cstring1 from alltypesorc limit 10
PREHOOK: type: QUERY
PREHOOK: Input: default@alltypesorc
PREHOOK: Output: default@addcolumns_vectorization_true_disallowincompatible_true_fileformat_orc_tinyint
POSTHOOK: query: explain insert into table addcolumns_vectorization_true_disallowincompatible_true_fileformat_orc_tinyint partition (s)
  select cint,csmallint, cstring1 from alltypesorc limit 10
POSTHOOK: type: QUERY
POSTHOOK: Input: default@alltypesorc
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-2 depends on stages: Stage-1
  Stage-0 depends on stages: Stage-2
  Stage-3 depends on stages: Stage-0

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (CUSTOM_SIMPLE_EDGE)
        Reducer 3 <- Reducer 2 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: alltypesorc
                  Statistics: Num rows: 12288 Data size: 935846 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: cint (type: int), csmallint (type: smallint), cstring1 (type: string)
                    outputColumnNames: _col0, _col1, _col2
                    Statistics: Num rows: 12288 Data size: 935846 Basic stats: COMPLETE Column stats: COMPLETE
                    Limit
                      Number of rows: 10
                      Statistics: Num rows: 10 Data size: 816 Basic stats: COMPLETE Column stats: COMPLETE
                      Reduce Output Operator
                        sort order: 
                        Statistics: Num rows: 10 Data size: 816 Basic stats: COMPLETE Column stats: COMPLETE
                        value expressions: _col0 (type: int), _col1 (type: smallint), _col2 (type: string)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
        Reducer 2 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Select Operator
                expressions: VALUE._col0 (type: int), VALUE._col1 (type: smallint), VALUE._col2 (type: string)
                outputColumnNames: _col0, _col1, _col2
                Statistics: Num rows: 10 Data size: 816 Basic stats: COMPLETE Column stats: COMPLETE
                Limit
                  Number of rows: 10
                  Statistics: Num rows: 10 Data size: 816 Basic stats: COMPLETE Column stats: COMPLETE
                  Reduce Output Operator
                    key expressions: _col2 (type: string), _bucket_number (type: string)
                    sort order: ++
                    Map-reduce partition columns: _col2 (type: string)
                    value expressions: _col0 (type: int), _col1 (type: smallint)
        Reducer 3 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Select Operator
                expressions: VALUE._col0 (type: int), VALUE._col1 (type: smallint), KEY._col2 (type: string), KEY._bucket_number (type: string)
                outputColumnNames: _col0, _col1, _col2, _bucket_number
                File Output Operator
                  compressed: false
                  Dp Sort State: PARTITION_BUCKET_SORTED
                  Statistics: Num rows: 10 Data size: 816 Basic stats: COMPLETE Column stats: COMPLETE
                  table:
                      input format: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
                      output format: org.apache.hadoop.hive.ql.io.orc.OrcOutputFormat
                      serde: org.apache.hadoop.hive.ql.io.orc.OrcSerde
                      name: default.addcolumns_vectorization_true_disallowincompatible_true_fileformat_orc_tinyint
                  Write Type: INSERT

  Stage: Stage-2
    Dependency Collection

  Stage: Stage-0
    Move Operator
      tables:
          partition:
            s 
          replace: false
          table:
              input format: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
              output format: org.apache.hadoop.hive.ql.io.orc.OrcOutputFormat
              serde: org.apache.hadoop.hive.ql.io.orc.OrcSerde
              name: default.addcolumns_vectorization_true_disallowincompatible_true_fileformat_orc_tinyint
          Write Type: INSERT

  Stage: Stage-3
    Stats Work
      Basic Stats Work:
      Column Stats Desc:
          Columns: i, si
          Column Types: int, smallint
          Table: default.addcolumns_vectorization_true_disallowincompatible_true_fileformat_orc_tinyint

PREHOOK: query: insert into table addcolumns_vectorization_true_disallowincompatible_true_fileformat_orc_tinyint partition (s)
  select cint,csmallint, cstring1 from alltypesorc limit 10
PREHOOK: type: QUERY
PREHOOK: Input: default@alltypesorc
PREHOOK: Output: default@addcolumns_vectorization_true_disallowincompatible_true_fileformat_orc_tinyint
POSTHOOK: query: insert into table addcolumns_vectorization_true_disallowincompatible_true_fileformat_orc_tinyint partition (s)
  select cint,csmallint, cstring1 from alltypesorc limit 10
POSTHOOK: type: QUERY
POSTHOOK: Input: default@alltypesorc
POSTHOOK: Output: default@addcolumns_vectorization_true_disallowincompatible_true_fileformat_orc_tinyint@s=cvLH6Eat2yFsyy7p
POSTHOOK: Lineage: addcolumns_vectorization_true_disallowincompatible_true_fileformat_orc_tinyint PARTITION(s=cvLH6Eat2yFsyy7p).i SIMPLE [(alltypesorc)alltypesorc.FieldSchema(name:cint, type:int, comment:null), ]
POSTHOOK: Lineage: addcolumns_vectorization_true_disallowincompatible_true_fileformat_orc_tinyint PARTITION(s=cvLH6Eat2yFsyy7p).si SIMPLE [(alltypesorc)alltypesorc.FieldSchema(name:csmallint, type:smallint, comment:null), ]
PREHOOK: query: select cint, csmallint, cstring1 from alltypesorc limit 10
PREHOOK: type: QUERY
PREHOOK: Input: default@alltypesorc
#### A masked pattern was here ####
POSTHOOK: query: select cint, csmallint, cstring1 from alltypesorc limit 10
POSTHOOK: type: QUERY
POSTHOOK: Input: default@alltypesorc
#### A masked pattern was here ####
528534767	-13326	cvLH6Eat2yFsyy7p
528534767	-4213	cvLH6Eat2yFsyy7p
528534767	-15813	cvLH6Eat2yFsyy7p
528534767	-9566	cvLH6Eat2yFsyy7p
528534767	15007	cvLH6Eat2yFsyy7p
528534767	7021	cvLH6Eat2yFsyy7p
528534767	4963	cvLH6Eat2yFsyy7p
528534767	-7824	cvLH6Eat2yFsyy7p
528534767	-15431	cvLH6Eat2yFsyy7p
528534767	-15549	cvLH6Eat2yFsyy7p
PREHOOK: query: select * from addcolumns_vectorization_true_disallowincompatible_true_fileformat_orc_tinyint
PREHOOK: type: QUERY
PREHOOK: Input: default@addcolumns_vectorization_true_disallowincompatible_true_fileformat_orc_tinyint
PREHOOK: Input: default@addcolumns_vectorization_true_disallowincompatible_true_fileformat_orc_tinyint@s=cvLH6Eat2yFsyy7p
#### A masked pattern was here ####
POSTHOOK: query: select * from addcolumns_vectorization_true_disallowincompatible_true_fileformat_orc_tinyint
POSTHOOK: type: QUERY
POSTHOOK: Input: default@addcolumns_vectorization_true_disallowincompatible_true_fileformat_orc_tinyint
POSTHOOK: Input: default@addcolumns_vectorization_true_disallowincompatible_true_fileformat_orc_tinyint@s=cvLH6Eat2yFsyy7p
#### A masked pattern was here ####
528534767	-13326	cvLH6Eat2yFsyy7p
528534767	-9566	cvLH6Eat2yFsyy7p
528534767	7021	cvLH6Eat2yFsyy7p
528534767	-15549	cvLH6Eat2yFsyy7p
528534767	-4213	cvLH6Eat2yFsyy7p
528534767	-15813	cvLH6Eat2yFsyy7p
528534767	15007	cvLH6Eat2yFsyy7p
528534767	4963	cvLH6Eat2yFsyy7p
528534767	-7824	cvLH6Eat2yFsyy7p
528534767	-15431	cvLH6Eat2yFsyy7p
